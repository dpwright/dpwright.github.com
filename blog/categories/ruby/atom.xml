<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Wright Access]]></title>
  <link href="http://dpwright.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://dpwright.github.com/"/>
  <updated>2012-09-28T19:21:44+09:00</updated>
  <id>http://dpwright.github.com/</id>
  <author>
    <name><![CDATA[Daniel P. Wright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git script to rebase all child branches following a command]]></title>
    <link href="http://dpwright.github.com/blog/2012/09/25/git-script-to-rebase-all-child-branches-following-a-command/"/>
    <updated>2012-09-25T10:27:00+09:00</updated>
    <id>http://dpwright.github.com/blog/2012/09/25/git-script-to-rebase-all-child-branches-following-a-command</id>
    <content type="html"><![CDATA[<p>This script looks at the current status of the DAG to find the children of the
current branch, runs an action, then rebases those children.  It is particularly
useful for users of <code>git-svn</code>, who may find themselves having to rebase all
topic branches (and sub-topics which build off those) every time they <code>git svn
rebase</code> or <code>git svn dcommit</code>.</p>

<p>For pure git projects, this is considered by many to be bad form, so use with
discretion.  People who like a linear history might like it.</p>

<p>I expect the script, in its current state, will fail in cases where the rebase
can't be done automatically, but for simple day-to-day operations it makes
<code>git-svn</code> that bit less painful to use :-)</p>

<p><div><script src='https://gist.github.com/3779324.js?file=git-rar.rb'></script>
<noscript><pre><code>#!/usr/bin/ruby
#GistID: 3779324

require 'escape'

exit if ARGV.empty?

current_branch = `git symbolic-ref -q HEAD`.sub(/^refs\/heads\//, &quot;&quot;).strip
exit if current_branch.empty?

IGNORED_BRANCHES = `git branch -r --no-color`.sub(/^[ *]*/, &quot;&quot;).split(&quot;\n&quot;).collect{ |e| e.strip } &lt;&lt; &quot;HEAD&quot;

def branches_on(commit)
	log = `git log --pretty=%d --simplify-by-decoration #{commit} | head -n 1`
	branches = log.sub(/^ \(([^)]+)\).*$/, '\1').split(&quot;, &quot;)
	branches.collect{ |e| e.strip }.reject{ |b| (IGNORED_BRANCHES &lt;&lt; commit).include? b }
end

def children_of(branch)
	log = `git branch --no-color --contains #{branch} | sed 's/^[ *]*//' | grep -v \&quot;^#{branch}$\&quot;`
	log.split(&quot;\n&quot;)
end

def branch_tree_from(branch)
	siblings = branches_on branch
	children = children_of(branch).reject{|c| siblings.include? c}
	if children.empty?
		return [branch]
	else
		return [branch, siblings.collect{|s| [s]} + children.collect{|c| branch_tree_from(c)}]
	end
end

def rebase_all_children(tree)
	parent = tree.shift
	children = tree.shift
	children.map do |e|
		system &quot;git rebase #{parent} #{e.first}&quot;

		if e.size &gt; 1
			rebase_all_children e
		end
	end
end

initial_tree = branch_tree_from current_branch

if system &quot;git #{Escape.shell_command(ARGV)}&quot;
	rebase_all_children initial_tree
	system &quot;git checkout #{current_branch}&quot;
end</code></pre></noscript></div>
</p>

<p>I have an alias set up to invoke it with <code>git rar</code> ("Run and Rebase"), so that I
can type, for example, <code>git rar svn rebase</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ruby to send mail through GMail's SMTP servers]]></title>
    <link href="http://dpwright.github.com/blog/2012/04/16/using-ruby-to-send-mail-through-gmails-smtp-servers/"/>
    <updated>2012-04-16T09:59:00+09:00</updated>
    <id>http://dpwright.github.com/blog/2012/04/16/using-ruby-to-send-mail-through-gmails-smtp-servers</id>
    <content type="html"><![CDATA[<p>A few days ago, I ran into a problem.  I have a script set up on my Dreamhost
server which occasionally sends me notification emails.  It had been running
fine for a couple of weeks, but suddenly they stopped coming through.  I checked
the logs and saw I'd been getting an "Access Denied" error from the SMTP
server:</p>

<blockquote><p>554 5.7.1 &lt;mail@address.com&gt;: Recipient address rejected: Access denied</p></blockquote>

<p>Up until this point I'd simply been using 'localhost' as my SMTP server, but I
guess they might not like me doing that.  I'm not sure whether the servers they
use to manage their users' email are the same as their hosting servers, and
either way I'd switched to using Google Apps to manage my email years ago.  The
easiest solution, it seemed, was to switch to using Google's SMTP server.</p>

<p>Just switching the server addresses and adding username/password info wasn't
enough though -- the connection was refused:</p>

<blockquote><p>Connection refused - connect(2) (Errno::ECONNREFUSED)</p></blockquote>

<p>This is because Google mail only supports TLS/SSL connections (quite sensibly). 
Unfortunately, it seems the version of Ruby installed on Dreamhost's servers by
default (1.8.7) doesn't support TLS connections out of the box.</p>

<p>Thankfully, there's a gem for that!  If you <code>gem install tlsmail</code>,
the enable_tls function becomes available and you can communicate with Google
Mail's servers.</p>

<p>I did all this, but there was still one gotcha.  Using my previous code directly
but replacing the servers with Google's resulted in the following error:</p>

<blockquote><p>555 5.5.2 Syntax error. yw3sm17774749obb.7 (Net::SMTPFatalError)</p></blockquote>

<p>Note that this is an SMTP error, rather than a Ruby one.  A little googling
turned up <a href="http://www.ruby-forum.com/topic/185075">this thread</a>, which suggested
that the latest ruby version automatically adds angled brackets to the email
address you supply to Net::SMTP's send_message function.  I hadn't upgraded my
Ruby version, but I had made use of the tlsmail gem, so maybe that had done it.</p>

<p>I modified the call so that it specified the email address alone, without the
name or angled brackets.  I left the headers in the message itself intact.  It
worked!  Here's the resulting code:</p>

<p><div><script src='https://gist.github.com/2395670.js?file=rubygmail.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby

require 'rubygems'
require 'tlsmail'

msg=&lt;&lt;EOF
From: Test Sender &lt;sender@domain.com&gt;
To: Test Recipient &lt;recipient@domain.com&gt;
Subject: test

This is a test
EOF

Net::SMTP.enable_tls(OpenSSL::SSL::VERIFY_NONE)
Net::SMTP.start('smtp.gmail.com', 587, 'domain.com', 'sender@domain.com', 'password', :login) do |smtp|
        smtp.send_message msg, &quot;sender@domain.com&quot;, &quot;recipient@domain.com&quot;
end</code></pre></noscript></div>
</p>

<p>Note this works with mail provided by Google Apps as well as plain vanilla
Google Mail. In the latter case, specify "gmail.com" as the domain, otherwise
use your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualising #include trees]]></title>
    <link href="http://dpwright.github.com/blog/2012/04/10/visualising-include-trees/"/>
    <updated>2012-04-10T08:31:00+09:00</updated>
    <id>http://dpwright.github.com/blog/2012/04/10/visualising-include-trees</id>
    <content type="html"><![CDATA[<p><img src="http://files.dpwright.com/opengl-includes.png" title="OpenGL include tree" ></p>

<p>Just put a new script up <a href="https://github.com/vitei/generate-include-graph.rb">on github</a> which generates graphs visualising
<code>#include</code> trees.  The above image shows what actually gets pulled in
when you <code>#include</code> the main header for <a href="http://www.opengl.org/">OpenGL</a>.</p>
]]></content>
  </entry>
  
</feed>
