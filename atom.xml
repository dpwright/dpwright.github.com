<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Wright Access</title>
    <link href="http://dpwright.com/atom.xml" rel="self" />
    <link href="http://dpwright.com" />
    <id>http://dpwright.com/atom.xml</id>
    <author>
        <name>Daniel P. Wright</name>
        <email>dani@dpwright.com</email>
    </author>
    <updated>2015-03-04T09:57:39Z</updated>
    <entry>
    <title>Generating this website part 3: Indexing</title>
    <link href="http://dpwright.com/posts/2015-03-04-generating-this-website-part-3-indexing/index.html" />
    <id>http://dpwright.com/posts/2015-03-04-generating-this-website-part-3-indexing/index.html</id>
    <published>2015-03-04T09:57:39Z</published>
    <updated>2015-03-04T09:57:39Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 4 March, 2015</div>



<div class="sidenote">
<p>This is part three of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>After something of a hiatus, I’m back with the next in the “generating this website” series, which describes the actual code used to create the site you’re reading. This time I’m going to cover indexing, which in combination with the <a href="/posts/2014-08-04-generating-this-website-part-1-introduction">introduction</a> and the previous post on <a href="/posts/2014-09-29-generating-this-website-part-2-posts">generating posts themselves</a> is enough to get a basic Hakyll site up and running.</p>
<p>What do I mean by “indexing”? Well, basically just creating the list of blog posts on the site’s <a href="/">main page</a>, or the indices by <a href="/tags">tags</a>. This is the main mechanism by which visitors will navigate the site and be introduced to new posts.</p>
<p>It’s possible to go quite deep on this, breaking up indices into pages, having lists by year or by month, and so forth. As I don’t have too many posts, I’m keeping it simple for now, with a single-page index of all posts, and a similar single-page index per tag. I may revisit this as the number of posts increases to split the index up over multiple pages, or have some sort of infinite scrolling thing like twitter. Should that happen I’ll update this post – as I’ll have to of course, because this post is a literate program, and the code you’re about to see is what I actually run to generate the index pages for this site.</p>
<p>Let’s get cracking.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>For this post, I’m going to try out something I haven’t tried before, and that’s the <code>UnicodeSyntax</code> extension for GHC and the <a href="https://hackage.haskell.org/package/base-unicode-symbols">base-unicode-symbols</a> package which gives Unicode equivalents to commonly used Haskell operators. Why? Well, I’ve recently switched to using the <a href="http://checkmyworking.com/cm-web-fonts/">Computer Modern</a> series of fonts on the site; specifically I use <code>Computer Modern Serif</code> for the prose and <code>Computer Modern Concrete</code> for code. I think it looks really nice (well, unless you’re on Windows anyway), but some of Haskell’s operators are a little ungainly – for example the ubiquitous monadic bind operator comes out as <code>&gt;&gt;=</code>, and monoidal concatenation isn’t much better: <code>&lt;&gt;</code>. With unicode operators I can use <code>≫=</code> and <code>⊕</code> respectively, which look nicer at the possible expense of being slightly more awkward to type.</p>
<p>Most of the operators are similar enough to their ASCII originals that I hope readers will still be able to follow the code.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Having enabled Unicode syntax, I’ll start with the usual incantation:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Indexing</span> <span class="kw">where</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Here come the Unicode modules, which give me the operators from <code>Control.Monad</code>, <code>Data.Monoid</code>, and the Prelude, in Unicode.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Unicode</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid.Unicode</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>base-unicode-symbols</code> does export a module for <code>Control.Applicative</code>, but there is no Unicode symbol representing <code>&lt;$&gt;</code>, so I import that here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;$&gt;))</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The following two modules come in handy for imposing a pseudo-random order on my tags (for the tag cloud). In fact there’s nothing random about it – I just order the tags based on the hash of their name, but the result looks a lot less tacky than an alphabetically ordered list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Hashable</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Ord</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Finally I import the previous blog on <a href="/posts/2014-09-29-generating-this-website-part-2-posts">posts</a>, to make use of the <code>removeIndexHtml</code> function.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span> (removeIndexHtml)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="the-main-index">The main index</h2>
<p>This is the main index which you see on the <a href="/">main page</a>. Even though it is not an index by tag, I need to make use of the tags in order to list under each post title what tags apply to that post.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; index ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> index tags <span class="fu">=</span> create [<span class="st">&quot;index.html&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> indexCompiler tags <span class="st">&quot;posts/*&quot;</span> indexContext</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The rule is pretty simple – I create a page, <code>index.html</code>, which runs the <code>indexCompiler</code> over all files in the <code>posts</code> directory. Since I’m creating the file from scratch, rather than converting from some source format, I don’t need to perform any transformation on the filename so I can just use <code>idRoute</code>.</p>
<p>As always with Hakyll, we make use of a <code>Compiler</code> to give the conversion/generation steps for a resource and a <code>Context</code>to supply the fields. The <code>Context</code> in this case is as follows:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; indexContext ::</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexContext </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> bodyField     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;body&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ metadataField </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;url&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ pathField     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;path&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ missingField  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>These fields can then be used in the index template.</p>
<p>What about the <code>Compiler</code>? Well, let’s start by looking at its type signature.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexCompiler </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Tags</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Pattern</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Context</span> <span class="dt">String</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>There are quite a few parameters here. As mentioned, we need the <code>Tags</code>, and the <code>Pattern</code> allows us to specify how to find the posts. We could have just used <code>indexContext</code> directly here rather than pass it in, but as we’ll see if we pass it in we can re-use this <code>Compiler</code> when we generate our tag-specific indices by passing in a different <code>Context</code>. Finally, the function returns our <code>Compiler</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexCompiler tags pattern baseCtx <span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ctx <span class="ot">←</span> mkCtx baseCtx <span class="fu">&lt;$&gt;</span> postList tags pattern recentFirst</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeItem <span class="st">&quot;&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/archive.html&quot;</span> ctx</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> relativizeUrls</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> withItemBody removeIndexHtml</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> mkCtx base list <span class="fu">=</span> constField <span class="st">&quot;posts&quot;</span> list ⊕ base</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The compiler is fairly standard, except perhaps for that first line – what’s going on there? Well, in order to generate our index, we first need to generate our list of posts, and that’s the job of <code>postList</code>. We then add that to our <code>Context</code>, and use this augmented <code>Context</code> to generate the index page as a whole.</p>
<p>That is actually where most of the work happens – if you think about it, the <code>index</code> page itself is just a skeleton around the main thing we’re trying to display – the list of posts. That being the case, let’s take a look at how that’s generated.</p>
<h2 id="the-list-of-posts">The list of posts</h2>
<p>OK, so we want a thing, it’s Hakyll, what do we need? A <code>Context</code> and a <code>Compiler</code>, of course! We define the <code>Context</code> required to generate a single item in the list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; itemCtx ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> itemCtx tags </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> tagsField <span class="st">&quot;tags&quot;</span> tags</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%e %B, %Y&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField <span class="st">&quot;url&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ defaultContext</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>In other words, to display a single item, we need the post’s tags, its date and URL, and the default context, which will give us its title.</p>
<p>Given this <code>Context</code>, Hakyll provides a function called <code>applyTemplateList</code> which allows us to apply a template over each <code>Item</code> in a list, turning a <code>Compiler</code> for a list of <code>Item</code>s into a <code>Compiler</code> for a single <code>Item</code> representing the whole list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postList </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Tags</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Pattern</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">([<span class="dt">Item</span> <span class="dt">String</span>] <span class="ot">→</span> <span class="dt">Compiler</span> [<span class="dt">Item</span> <span class="dt">String</span>])</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Compiler</span> <span class="dt">String</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postList tags pattern sortFilter <span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ps      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> sortFilter <span class="fu">=</span>≪ loadAll (pattern <span class="fu">.&amp;&amp;.</span> hasNoVersion)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   itemTpl </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> loadBody <span class="st">&quot;templates/post-item.html&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   applyTemplateList itemTpl (itemCtx tags) ps</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> removeIndexHtml</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>sortFilter</code> parameter to this function allows us to order the <code>Item</code>s based on their <code>Context</code>. As you can see in the call to <code>postList</code> in <code>indexCompiler</code> above, we pass in <code>recentFirst</code> to sort the posts by date.</p>
<h2 id="dealing-with-tags">Dealing with tags</h2>
<p>Extending our system to deal with tags is easy – we just write another set of <code>Rules</code> similar to <code>index</code> which generates a page for each tag.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagIndex ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagIndex tags <span class="fu">=</span> tagsRules tags <span class="fu">$</span> \_ pattern <span class="ot">→</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> gsubRoute <span class="st">&quot;.html&quot;</span> (const <span class="st">&quot;/index.html&quot;</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> indexCompiler tags pattern defaultContext</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The default <code>tagsRules</code> provided by Hakyll put the tags in a file called <code>tagname.html</code>, so we use <code>gsubRoute</code> here to rename that to <code>tagname/index.html</code> and get a prettier URL.</p>
<p>As an added bonus and to give us a way to browse all tags in the site, let’s generate a <a href="/tags">tag cloud</a>. This is a bit of an easter egg as I haven’t linked to it anywhere on the site except in this post, but you can always access it by going to <a href="http://dpwright.com/tags" class="uri">http://dpwright.com/tags</a>.</p>
<p>First we define our context.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagCloudContext ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagCloudContext tags </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> cloud</code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ bodyField     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;body&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;url&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ pathField     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;path&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ missingField  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cloud   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> tagCloudField <span class="st">&quot;tagCloud&quot;</span> <span class="dv">100</span> <span class="dv">500</span> <span class="fu">$</span> shuffle tags</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     shuffle </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sortTagsBy ∘ comparing <span class="fu">$</span> hash ∘ fst</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Most of the legwork here is done by <code>tagCloudField</code>, which is provided by Hakyll. As mentioned earlier, we sort the tags by the hash of their name, which gives us a random-looking, but in fact predictable, order for the tags. It is important that this ordering is deterministic and not random, otherwise I’d have to regenerate the tags page even when no changes had been made to the site!</p>
<p>Finally we describe the <code>Rules</code> for the <code>tagCloud</code> itself. I’ve written the <code>Compiler</code> inline here as we don’t need to make use of it elsewhere and that keeps things simple.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagCloud ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagCloud tags <span class="fu">=</span> create [<span class="st">&quot;tags/index.html&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> tagsCtx <span class="fu">=</span> tagCloudContext tags</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> makeItem <span class="st">&quot;&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/tags.html&quot;</span>    tagsCtx</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> tagsCtx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> relativizeUrls</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> withItemBody removeIndexHtml</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>And that’s it! The site is now fully indexed, with a single main index on the front page an an index per-tag as well.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Updating git branches you're not on</title>
    <link href="http://dpwright.com/posts/2015-01-27-updating-git-branches-youre-not-on.html" />
    <id>http://dpwright.com/posts/2015-01-27-updating-git-branches-youre-not-on.html</id>
    <published>2015-01-27T18:12:23Z</published>
    <updated>2015-01-27T18:12:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">27 January, 2015</div>



<p>Do you use <code>git</code>?</p>
<p>Have you ever been on a feature branch and wanted to pull all the upstream changes into your <code>master</code> branch before rebasing onto that? Of course you have.</p>
<p>If you’re sick of doing this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git checkout master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git pull</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>$ git checkout feature-branch</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Add the following lines to your <code>.gitconfig</code>:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[alias]</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    remote-for-branch </span><span class="ot">=</span><span class="st"> &quot;!f() { git for-each-ref --format=&#39;%(upstream:short)&#39; `for b in $@</span><span class="co">; do echo refs/heads/$b; done` | sed &#39;s:/.*$::&#39;; }; f&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    sync </span><span class="ot">=</span><span class="st"> &quot;!f() { for b in $@</span><span class="co">; do git fetch `git remote-for-branch $b` $b:$b; done }; f&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Now you can do this!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git sync master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Thanks to <a href="http://stackoverflow.com/a/9753364/1004609">this Stack Overflow answer</a> for the technique, which I just wrapped up in an alias to make it easier to use.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/git/index.html">git</a>, <a href="/tags/alias/index.html">alias</a></div>
]]></summary>
</entry>
<entry>
    <title>Updating git branches you're not on</title>
    <link href="http://dpwright.com/posts/2015-01-27-updating-git-branches-youre-not-on/index.html" />
    <id>http://dpwright.com/posts/2015-01-27-updating-git-branches-youre-not-on/index.html</id>
    <published>2015-01-27T18:12:23Z</published>
    <updated>2015-01-27T18:12:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">27 January, 2015</div>



<p>Do you use <code>git</code>?</p>
<p>Have you ever been on a feature branch and wanted to pull all the upstream changes into your <code>master</code> branch before rebasing onto that? Of course you have.</p>
<p>If you’re sick of doing this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git checkout master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git pull</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>$ git checkout feature-branch</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Add the following lines to your <code>.gitconfig</code>:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[alias]</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    remote-for-branch </span><span class="ot">=</span><span class="st"> &quot;!f() { git for-each-ref --format=&#39;%(upstream:short)&#39; `for b in $@</span><span class="co">; do echo refs/heads/$b; done` | sed &#39;s:/.*$::&#39;; }; f&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    sync </span><span class="ot">=</span><span class="st"> &quot;!f() { for b in $@</span><span class="co">; do git fetch `git remote-for-branch $b` $b:$b; done }; f&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Now you can do this!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git sync master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Thanks to <a href="http://stackoverflow.com/a/9753364/1004609">this Stack Overflow answer</a> for the technique, which I just wrapped up in an alias to make it easier to use.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/git/index.html">git</a>, <a href="/tags/alias/index.html">alias</a></div>
]]></summary>
</entry>
<entry>
    <title>あけましておめでとうございます</title>
    <link href="http://dpwright.com/posts/2015-01-01-%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99.html" />
    <id>http://dpwright.com/posts/2015-01-01-%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99.html</id>
    <published>2015-01-01T00:00:00Z</published>
    <updated>2015-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 1 January, 2015</div>



<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/nengajou.png" title="明けましておめでとうございます" />
</center>
<h2 id="年賀状をhaskellで">年賀状をHaskellで</h2>
<p>上の画像が今年の僕達の年賀状です。</p>
<p>実は、妻が最初アプリでデザインを考えていたのですが、 画像のダウンロードができず、Pixelmatorで作りなおそうという話がでました。 でも、これってHaskellでできるんじゃないの…？と思い、 試しにやってみることにしました。</p>
<p>５分の仕事が結局２日になったけど（笑）… 面白かったので、やり方を公開します。</p>
<h2 id="概要">概要</h2>
<p>まず、上の画像をみて、デザインを考えます。</p>
<p>最初は、下記のやりかたでやろうと思っていました。</p>
<ol style="list-style-type: decimal">
<li>写真の上に、真っ白のレイヤーを載せる。</li>
<li>その白いレイヤーから３つの三角形を切って、下の写真が見えるようになる。</li>
<li>最後にメッセージを追加する。</li>
</ol>
<p>ただ、diagramsでは、レイヤーを作って、そのレイヤーから切る機能がなかった （というか、あるかもしれないけど、僕が分からなかったので）。</p>
<p>結局、「上の白いレイヤーから切る」という方法ではなく、 「そのまま５つの三角形を描く」という方法でやりました。</p>
<p>文章ではちょっと分かりづらいと思うので、絵で説明します。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この下にメッセージをつけます。</p>
<p>では、実際にどう作ったか振り返ります。</p>
<h2 id="依存関係">依存関係</h2>
<p>まず、Haskellのライブラリをインストールします。</p>
<p>下記の<code>cabal</code>設定でインストールしました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>executable nengajou2015</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>  main-is:          </code></pre></td>
<td align="left"><pre><code>2015-01-01-happy-new-year.lhs</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>  build-depends:    </code></pre></td>
<td align="left"><pre><code>base                </code></pre></td>
<td align="left"><pre><code>&gt;= 4.7 &amp;&amp; &lt;4.8,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams            </code></pre></td>
<td align="left"><pre><code>== 1.2,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-lib        </code></pre></td>
<td align="left"><pre><code>== 1.2.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-rasterific </code></pre></td>
<td align="left"><pre><code>== 0.1.0.1,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>text                </code></pre></td>
<td align="left"><pre><code>== 1.1.1.3,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>directory           </code></pre></td>
<td align="left"><pre><code>== 1.2.1.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>filepath            </code></pre></td>
<td align="left"><pre><code>== 1.3.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>process             </code></pre></td>
<td align="left"><pre><code>== 1.2.0.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>SVGFonts            </code></pre></td>
<td align="left"><pre><code>== 1.4.0.3</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>  default-language: </code></pre></td>
<td align="left"><pre><code>Haskell2010</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>arithmoi</code>は最近<code>llvm</code>のバージョンによってエラーになるときがあります。 その場合は、下記のコマンドで<code>cabal install</code>してください。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ cabal install --constrain &quot;arithmoi -llvm&quot;</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントを<code>svg</code>に変換するため、<code>fontforge</code>が必要です。 Macを使ってたので、まず<a href="https://xquartz.macosforge.org/">XQuartz</a>をインストールしました。 それから、Homebrewで、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ brew install fontforge</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>を入力して、インストールします。</p>
<h2 id="予備">予備</h2>
<p><code>LANGUAGE</code>プラグマは、意外と多くなりました。 まず、いつもの<code>OverloadedStrings</code>と、 diagramsのドキュメンテーションに推奨される<code>NoMonomorphismRestriction</code>。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE NoMonomorphismRestriction #-}</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>NoMonomorphismRestriction</code>は使った方がいいと書いてあったので 入れましたが必要なかったので、結果的に使いませんでした。</p>
<p>フォントを設定するためのデータ構造では、 <code>Functor</code>と<code>Traversable</code>の関数を使いたいと思いました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFunctor #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFoldable #-}</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveTraversable #-}</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>よっし！diagramsをインポートしよ！</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Prelude</span> <span class="kw">hiding</span> ((&lt;.&gt;))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Backend.Rasterific.CmdLine</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あ、テキストも書きたいからSVGFontsも必要になるね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts.ReadFont</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>でも、SVGFontsを使うため、フォントをttfからsvgに変換しないと…</p>
<p>そのため、システム的なモジュールも必要だね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Directory</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.FilePath</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Process</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Exit</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あ、きっとそのsvgファイルを調整しないとダメだろー</p>
<p><code>Data.Text</code>を使った方が最適…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.IO</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">TIO</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>え、さっき<code>Traversable</code>って言わなかった？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Foldable</span> (<span class="dt">Foldable</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Traversable</span> <span class="kw">as</span> <span class="dt">TV</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Arrow</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Char</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>終わり。</p>
<h2 id="型定義">型定義</h2>
<p>今回のプロジェクトは殆どの型はdiagramsで定義されています。</p>
<p>自分で定義をしたのは一つだけです。それは、フォントを設定するための型です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Fonts</span> a </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Fonts</span></code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">} <span class="kw">deriving</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Functor</span>, <span class="dt">Foldable</span>, <span class="dt">Traversable</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ多相型で定義する必要があるの？」と思うかもしれませんが、 フォントは自動的に<code>.ttf</code>から<code>.svg</code>に変換できるようにしたいので、 同じストラクチャーで、ロードする前のファイル名と、 準備ができた使える状態のフォントを入れたいと思います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">newtype</span> <span class="dt">PreparedFont</span> <span class="fu">=</span> <span class="dt">PreparedFont</span> {<span class="ot"> fromPF ::</span> <span class="dt">String</span> }</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>このnewtypeを使って、「フォントが変換された」と、型安全的に証明します。 （因みに最新版のSVGFontsでは<code>PreparedFont</code>は既に定義されているので、 最新版がHackageにアップされたらこれは必要なくなります。）</p>
<p>それでは、コード自体を始めましょう。</p>
<h2 id="二等辺三角形">二等辺三角形</h2>
<p>もう一度下の画像を見てみましょう。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この５つの三角形は全部二等辺三角形です！ diagramsは正三角形を作る関数が定義されていますが、 二等辺三角形はないため、自分で定義する必要があります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isosceles ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isosceles θ a <span class="fu">=</span> polygon (with <span class="fu">&amp;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   polyType <span class="fu">.~</span> <span class="dt">PolySides</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ (<span class="dv">180</span> <span class="fu">@@</span> deg) <span class="fu">^-^</span> θ ]</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ legLength, legLength ]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ) <span class="kw">where</span> legLength <span class="fu">=</span> a <span class="fu">/</span> cosA (θ<span class="fu">^/</span><span class="dv">2</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>θ</code>は頂角、<code>a</code>は高度（altitude）です。</p>
<p><code>(^-^)</code>、<code>(^/)</code>は<a href="https://hackage.haskell.org/package/vector-space">vector-space</a>というパッケージで定義され、 角度やベクトル等を引算、割算ができるような関数です。 意味が分からないときは<code>^</code>を消してみたら、だいたいの意味が見えてきます （<code>(^-^)</code> → <code>(-)</code>、<code>(^/)</code> → <code>(/)</code>)。</p>
<p><code>(&amp;)</code>、<code>(.~)</code>は<a href="https://hackage.haskell.org/package/lens">lens</a>のオペレーターです。 今からlensの説明しようとすると話が終わらないので、今日は省きます。</p>
<p>画像のレイアウトをするため、底辺の長さが必要なときがあります。 それを計算するために下記のユーティリティ関数を使います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isoscelesBase ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isoscelesBase θ a <span class="fu">=</span> <span class="dv">2</span> <span class="fu">*</span> tanA (θ<span class="fu">^/</span><span class="dv">2</span>) <span class="fu">*</span> a</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="レイアウト">レイアウト</h2>
<p>簡単に言うと、このデザインは「上に画像があって、その下にメッセージ」と説明できます。</p>
<p>とりあえず、フォントや写真はもう既にロードされていると見なしましょう。 そうすると、下記のようになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; nengajou ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> nengajou fs photo <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">topImage θ photoShiftedRight <span class="st"># inViewport</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">===</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">message fs imageWidth (photoHeight <span class="fu">/</span> <span class="dv">3</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>(===)</code>は、２つの<em><code>Diagram</code></em>を上から下に並べる関数です。</p>
<p>分かりやすいでしょう！ <code>topImage</code>は上の画像、<code>message</code>は下のメッセージ。 並べると、年賀状になると。</p>
<p>あとは、ここで使った値を定義するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     θ                 </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">50</span> <span class="fu">@@</span> deg</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoHeight       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">height photo</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     imageWidth        </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">isoscelesBase θ photoHeight</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>まずは、写真や画像についての変数です。<code>θ</code>の値を変更したら、三角形の形を変えられます。 <code>photoHeight</code>は写真全体の高さですが、 <code>imageWidth</code>はできた画像（緑のメイン三角形）の幅となります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoShiftedRight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">photo <span class="st"># translateX 40</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>実はもとの写真では人物は真ん中ではなかったので、 細かいことになりますが、これで調整しています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inViewport <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">view </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(p2 ((<span class="fu">-</span>imageWidth) <span class="fu">/</span> <span class="dv">2</span>, (<span class="fu">-</span>photoHeight) <span class="fu">/</span> <span class="dv">2</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(r2 (imageWidth, photoHeight))</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>色が付いている三角形の画像をみると、ちょっと外側が汚いので、 <code>inViewport</code>で、外の部分を消す関数を用意しました。</p>
<h2 id="画像">画像</h2>
<p>画像自体も簡単に説明できます。まず、５つの三角形と合わせるため、 写真を切る必要があります。その切った写真の上に、三角形を載せていきます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; topImage ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> topImage θ photo <span class="fu">=</span> triangles <span class="fu">&lt;&gt;</span> clippedPhoto <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>切るサイズは、写真の元の高さ✕緑の三角形の底辺の長さです。 それではちょっと幅が見えてしまうので、あと２ピクセルずつ、念の為に切ります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   clippedPhoto </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> photo <span class="st"># clipBy (rect </span></code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(centralTriangleBase <span class="fu">-</span> <span class="dv">2</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(photoHeight <span class="fu">-</span> <span class="dv">2</span>))</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photoHeight         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> height photo</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangleBase </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isoscelesBase θ photoHeight</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>triangles</code>は、左から右に言うと、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   triangles </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> mconcat</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ edgeTriangleLeft</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleLeft</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, centralTriangle</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleRight</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, edgeTriangleRight</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>になります。この画像では順番は関係ないけれど、 場合によっては必要になりますね。 <em><code>Diagram</code></em>を連結すると、 上から下の順番になります（<code>edgeTriangleLeft</code>の下に <code>bottomTriangleLeft</code>を描いて、その下に <code>centralTriangle</code>を描く…という形）。</p>
<p>この画像の三角形を見ると２種類があります。 まずは、真ん中の３つの三角形。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/outline-triangles.png" title="Picture of 3 central triangles goes here" />
</center>
<p>輪郭のみを描いて、下にある写真が見える三角形ですね。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   outlineTriangle a </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ a</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lc white</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw ultraThick</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ<code>centerXY</code>が必要か？」ですが、Diagramsはデフォルトでは 原点は高度から見る真ん中ではなく、重心に設定してあります。 二等辺三角形を鏡映すると、ずれてしまう。 <code>centerXY</code>をしたら、簡単に鏡映できるようになります。</p>
<p>次は左と右の、真っ白の三角形です。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/edge-triangles.png" title="Picture of 2 edge triangles goes here" />
</center>
<p>この三角形の頂角は真ん中の三角形の反対角度になっています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   θ<span class="ch">&#39; = (180 @@ deg) ^-^ θ</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>高度は下の三角形の底辺の半分です。 この値はまた使うので変数に保存しておきましょう。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleHalfBase </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> centralTriangleBase <span class="fu">/</span> <span class="dv">4</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あとは色と90°の回転です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangle </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ<span class="ch">&#39; bottomTriangleHalfBase</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw none</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># fc white</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># rotate (90 @@ deg)</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>outlineTriangle</code>と<code>edgeTriangle</code>の２種類を定義できました。 これで５つの三角形が描けます。まずは真ん中の三角形です。 高度は写真と一緒です。その三角形を、<em>y</em> 軸に鏡映します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangle   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle photoHeight <span class="st"># reflectY</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あとは右側の下の三角形と真っ白の三角形。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleRight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle (photoHeight <span class="fu">/</span> <span class="dv">2</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateY (-(photoHeight / 4))</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX bottomTriangleHalfBase</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleRight   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> edgeTriangle</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX (bottomTriangleHalfBase * 3 / 2)</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>最後は左側です。右側を、<em>x</em> 軸に鏡映するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleLeft </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX bottomTriangleRight</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleLeft   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX edgeTriangleRight</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>画像の分はここまでです。</p>
<h2 id="メッセージ">メッセージ</h2>
<p>最初に「型は<em><code>Fonts</code></em>以外は定義しない」と言いましたが、 実は、メッセージを定義するため、今回下記のユーティリティー型を定義しました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MessagePart</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgText</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalWidth  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">font               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">PreparedFont</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">outline            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Measure</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">msgText            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">String</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">|</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgSpace</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>この型はメッセージのDiagramを定義するための、一瞬の型なので、 絶対必要とは言えません。 正直、もともとこのプログラムを書いたときはこの型は使わず作りました。 ただ、あった方が絶対分かりやすいと思って、 ブログのためにちょっとリファクタリングしてみました。</p>
<p><em><code>MessagePart</code></em>はメッセージの一行です。 その一行はメッセージのテキスト（<em><code>MsgText</code></em>)か、 何も表記しない、ただスペース開けるため（<em><code>MsgSpace</code></em>）です。</p>
<p>この型について一つポイントがあります。 <code>proportionalHeight</code>と<code>proportionalWidth</code>は、「高さ」と「幅」の割合を意味します。 ただ、表記の仕方はそれぞれ違います。 <code>proportionalWidth</code>の方は、全体の幅に対しての割合ー 例えば、幅の半分としたいなら<code>1/2</code>と表記します。 一方、<code>proportionalHeight</code>は、表記スペースに対して一行の大きさを決るため、表記スペースに対するの「割合の分子」のみ表記します。 分母は、全部のメッセージの<code>proportionalHeight</code>の合計になるはずです。 結果、<em><code>MessagePart</code></em>を並べれば、スペースを１００％と使えていることになります。</p>
<p>この型があったらメッセージ自体は、ただ<em><code>MessagePart</code></em>のリストになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; messageParts ::</span> [<span class="dt">MessagePart</span>]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> messageParts <span class="fu">=</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ <span class="dt">MsgSpace</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">10</span> (<span class="dv">9</span> <span class="fu">/</span> <span class="dv">10</span>) english thin</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(map toUpper <span class="st">&quot;Happy New Year&quot;</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span> (<span class="dv">1</span> <span class="fu">/</span> <span class="dv">6</span>) numbers none <span class="st">&quot;2015&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) japanese none</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;昨年はお世話になりました　今年もよろしくお願いします&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) english none</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Wishing you a fantastic New Year, from Aki &amp; Dani&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>では、このメッセージをどうやって<em><code>Diagram</code></em>に変換しましょう？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; message ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> message fs w h <span class="fu">=</span> center messageText <span class="kw">where</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   messageText  <span class="fu">=</span> foldr1 (<span class="fu">===</span>) <span class="fu">.</span> map drawMsgPart <span class="fu">$</span> messageParts</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MessagePart</code></em>を一つ一つ<code>drawMsgPart</code>で描いて、 それから<code>foldr1 (===)</code>で上から下まで並べます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgSpace</span> ph)        </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> strut <span class="fu">$</span> r2 (<span class="dv">0</span>, getRealHeight ph)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgText</span> ph pw f o t) </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> text&#39; (w <span class="fu">*</span> pw, getRealHeight ph) f o t</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MsgSpace</code></em>だったら、ただ<em>y</em> 軸にスペースを開けます。 <em><code>MsgText</code></em>だったら<code>text'</code>としてレンダーします。</p>
<p><code>getRealHeight</code>は、割合の分子から、実際の高さに変換する関数です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   getRealHeight ph </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> h <span class="fu">*</span> ph <span class="fu">/</span> totalHeight</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   totalHeight  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sum <span class="fu">$</span> map proportionalHeight messageParts</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>text'</code>は、SVGFontsを使ってテキストをレンダーします。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   text&#39; (a, d) f o t </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> stroke (textPath t f a d)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw o # fc black &lt;&gt; strutY d</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   textPath t f a d </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> textSVG&#39; <span class="fu">$</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">TextOpts</span> t (outlMap <span class="fu">.</span> fromPF <span class="fu">$</span> f fs)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">INSIDE_WH</span> <span class="dt">KERN</span> <span class="dt">False</span> a d</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="不純なところ">不純なところ</h2>
<p>今までの関数は純粋的に定義しました。 これからは、実世界と繋がっている<code>IO</code>モナドを使って、 写真やフォントを準備するための関数を定義します。</p>
<p>写真は簡単です。Diagramsの<code>loadImageEmb</code>関数を呼んで、 エラーが返されたらそのまま出力して停止します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; loadPhoto ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> loadPhoto fp <span class="fu">=</span> either reportError (return <span class="fu">.</span> image) <span class="fu">=&lt;&lt;</span> loadImageEmb fp</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> reportError err <span class="fu">=</span> putStrLn err <span class="fu">&gt;&gt;</span> exitWith (<span class="dt">ExitFailure</span> <span class="dv">1</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントはもうちょっと複雑なんです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; prepareFonts ::</span> <span class="dt">Fonts</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Fonts</span> <span class="dt">PreparedFont</span>)</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> prepareFonts fs <span class="fu">=</span> <span class="kw">do</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">makeDirectory</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">TV.sequence (fmap prepareFont fs) <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントは<code>.ttf</code>から<code>.svg</code>に変換しないと使えないんです。 変換されたフォントは<code>svg-fonts</code>というディレクトリーに出力します。 まず、そのディレクトリーがない場合は作成しないとダメです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontDir        </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;svg-fonts&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeDirectory  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dirExists <span class="ot">&lt;-</span> doesDirectoryExist fontDir</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless dirExists <span class="fu">$</span> createDirectory fontDir</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>変換自体はfontforgeを使って行います。 もしもう既に変換されたフォントがあるならまた変換する必要はありません。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontforge f f&#39; </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> unwords [<span class="st">&quot;fontforge --lang=ff -c &#39;Open($1); Generate($2)&#39;&quot;</span>, f, f&#39;]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   prepareFont f  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">let</span> f&#39; <span class="fu">=</span> fontDir <span class="fu">&lt;/&gt;</span> filter (<span class="fu">/=</span> <span class="ch">&#39; &#39;</span>) (takeBaseName f) <span class="fu">&lt;.&gt;</span> <span class="st">&quot;svg&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     fontAlreadyConverted <span class="ot">&lt;-</span> doesFileExist f&#39;</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless fontAlreadyConverted <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       system <span class="fu">$</span> fontforge f f&#39;</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       stripNamespaceLineFrom f&#39;</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     return <span class="fu">$</span> <span class="dt">PreparedFont</span> f&#39;</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>fontforgeが出すXMLはネームスペースに入っていますが、 SVGFontsがネームスペース無しのXMLしかサポートされていません。 下記の関数はネームスペース宣言を外します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; stripNamespaceLineFrom ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> stripNamespaceLineFrom f <span class="fu">=</span> TIO.readFile f <span class="fu">&gt;&gt;=</span> go</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> go </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span>   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.words</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">filter (not <span class="fu">.</span> T.isInfixOf <span class="st">&quot;xmlns&quot;</span>)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.unwords</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">TIO.writeFile f</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="main関数"><code>main</code>関数</h2>
<p>最後に、上記の関数を結んでいく<code>main</code>関数です。</p>
<p>写真とフォントの準備をし、<code>nengajou</code>の関数に渡して<em><code>Diagram</code></em>を作成します。 <code>pad</code>を使って枠を作ります。それから背景を白にしましょう。 最終、Diagramsの<code>mainWith</code>関数を使ってコマンドラインインターフェースが出来上がります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photo <span class="ot">&lt;-</span> loadPhoto <span class="st">&quot;static/posts/2015-01-01-あけましておめでとうございます/beach-club.png&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fonts <span class="ot">&lt;-</span> prepareFonts <span class="dt">Fonts</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Garamond&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Calisto MT&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/ＤＦＰ教科書体W3&quot;</span> }</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mainWith <span class="fu">$</span> nengajou fonts photo <span class="st"># pad 1.1 # bg black</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>さあ、これで今年の年賀状が完成しました！</p>
<p>今年も楽しみながら、関数型言語で面白いものを作って行きましょう！</p>

<div class="tagsinfo">Tagged with: <a href="/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/index.html">日本語</a>, <a href="/tags/functional-programming/index.html">functional-programming</a>, <a href="/tags/haskell/index.html">haskell</a>, <a href="/tags/%E3%81%8A%E6%AD%A3%E6%9C%88/index.html">お正月</a>, <a href="/tags/new%20year/index.html">new year</a>, <a href="/tags/%E5%B9%B4%E8%B3%80%E7%8A%B6/index.html">年賀状</a></div>
]]></summary>
</entry>
<entry>
    <title>あけましておめでとうございます</title>
    <link href="http://dpwright.com/posts/2015-01-01-%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/index.html" />
    <id>http://dpwright.com/posts/2015-01-01-%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/index.html</id>
    <published>2015-01-01T00:00:00Z</published>
    <updated>2015-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 1 January, 2015</div>



<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/nengajou.png" title="明けましておめでとうございます" />
</center>
<h2 id="年賀状をhaskellで">年賀状をHaskellで</h2>
<p>上の画像が今年の僕達の年賀状です。</p>
<p>実は、妻が最初アプリでデザインを考えていたのですが、 画像のダウンロードができず、Pixelmatorで作りなおそうという話がでました。 でも、これってHaskellでできるんじゃないの…？と思い、 試しにやってみることにしました。</p>
<p>５分の仕事が結局２日になったけど（笑）… 面白かったので、やり方を公開します。</p>
<h2 id="概要">概要</h2>
<p>まず、上の画像をみて、デザインを考えます。</p>
<p>最初は、下記のやりかたでやろうと思っていました。</p>
<ol style="list-style-type: decimal">
<li>写真の上に、真っ白のレイヤーを載せる。</li>
<li>その白いレイヤーから３つの三角形を切って、下の写真が見えるようになる。</li>
<li>最後にメッセージを追加する。</li>
</ol>
<p>ただ、diagramsでは、レイヤーを作って、そのレイヤーから切る機能がなかった （というか、あるかもしれないけど、僕が分からなかったので）。</p>
<p>結局、「上の白いレイヤーから切る」という方法ではなく、 「そのまま５つの三角形を描く」という方法でやりました。</p>
<p>文章ではちょっと分かりづらいと思うので、絵で説明します。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この下にメッセージをつけます。</p>
<p>では、実際にどう作ったか振り返ります。</p>
<h2 id="依存関係">依存関係</h2>
<p>まず、Haskellのライブラリをインストールします。</p>
<p>下記の<code>cabal</code>設定でインストールしました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>executable nengajou2015</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>  main-is:          </code></pre></td>
<td align="left"><pre><code>2015-01-01-happy-new-year.lhs</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>  build-depends:    </code></pre></td>
<td align="left"><pre><code>base                </code></pre></td>
<td align="left"><pre><code>&gt;= 4.7 &amp;&amp; &lt;4.8,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams            </code></pre></td>
<td align="left"><pre><code>== 1.2,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-lib        </code></pre></td>
<td align="left"><pre><code>== 1.2.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-rasterific </code></pre></td>
<td align="left"><pre><code>== 0.1.0.1,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>text                </code></pre></td>
<td align="left"><pre><code>== 1.1.1.3,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>directory           </code></pre></td>
<td align="left"><pre><code>== 1.2.1.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>filepath            </code></pre></td>
<td align="left"><pre><code>== 1.3.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>process             </code></pre></td>
<td align="left"><pre><code>== 1.2.0.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>SVGFonts            </code></pre></td>
<td align="left"><pre><code>== 1.4.0.3</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>  default-language: </code></pre></td>
<td align="left"><pre><code>Haskell2010</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>arithmoi</code>は最近<code>llvm</code>のバージョンによってエラーになるときがあります。 その場合は、下記のコマンドで<code>cabal install</code>してください。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ cabal install --constrain &quot;arithmoi -llvm&quot;</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントを<code>svg</code>に変換するため、<code>fontforge</code>が必要です。 Macを使ってたので、まず<a href="https://xquartz.macosforge.org/">XQuartz</a>をインストールしました。 それから、Homebrewで、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ brew install fontforge</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>を入力して、インストールします。</p>
<h2 id="予備">予備</h2>
<p><code>LANGUAGE</code>プラグマは、意外と多くなりました。 まず、いつもの<code>OverloadedStrings</code>と、 diagramsのドキュメンテーションに推奨される<code>NoMonomorphismRestriction</code>。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE NoMonomorphismRestriction #-}</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>NoMonomorphismRestriction</code>は使った方がいいと書いてあったので 入れましたが必要なかったので、結果的に使いませんでした。</p>
<p>フォントを設定するためのデータ構造では、 <code>Functor</code>と<code>Traversable</code>の関数を使いたいと思いました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFunctor #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFoldable #-}</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveTraversable #-}</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>よっし！diagramsをインポートしよ！</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Prelude</span> <span class="kw">hiding</span> ((&lt;.&gt;))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Backend.Rasterific.CmdLine</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あ、テキストも書きたいからSVGFontsも必要になるね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts.ReadFont</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>でも、SVGFontsを使うため、フォントをttfからsvgに変換しないと…</p>
<p>そのため、システム的なモジュールも必要だね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Directory</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.FilePath</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Process</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Exit</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あ、きっとそのsvgファイルを調整しないとダメだろー</p>
<p><code>Data.Text</code>を使った方が最適…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.IO</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">TIO</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>え、さっき<code>Traversable</code>って言わなかった？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Foldable</span> (<span class="dt">Foldable</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Traversable</span> <span class="kw">as</span> <span class="dt">TV</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Arrow</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Char</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>終わり。</p>
<h2 id="型定義">型定義</h2>
<p>今回のプロジェクトは殆どの型はdiagramsで定義されています。</p>
<p>自分で定義をしたのは一つだけです。それは、フォントを設定するための型です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Fonts</span> a </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Fonts</span></code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">} <span class="kw">deriving</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Functor</span>, <span class="dt">Foldable</span>, <span class="dt">Traversable</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ多相型で定義する必要があるの？」と思うかもしれませんが、 フォントは自動的に<code>.ttf</code>から<code>.svg</code>に変換できるようにしたいので、 同じストラクチャーで、ロードする前のファイル名と、 準備ができた使える状態のフォントを入れたいと思います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">newtype</span> <span class="dt">PreparedFont</span> <span class="fu">=</span> <span class="dt">PreparedFont</span> {<span class="ot"> fromPF ::</span> <span class="dt">String</span> }</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>このnewtypeを使って、「フォントが変換された」と、型安全的に証明します。 （因みに最新版のSVGFontsでは<code>PreparedFont</code>は既に定義されているので、 最新版がHackageにアップされたらこれは必要なくなります。）</p>
<p>それでは、コード自体を始めましょう。</p>
<h2 id="二等辺三角形">二等辺三角形</h2>
<p>もう一度下の画像を見てみましょう。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この５つの三角形は全部二等辺三角形です！ diagramsは正三角形を作る関数が定義されていますが、 二等辺三角形はないため、自分で定義する必要があります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isosceles ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isosceles θ a <span class="fu">=</span> polygon (with <span class="fu">&amp;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   polyType <span class="fu">.~</span> <span class="dt">PolySides</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ (<span class="dv">180</span> <span class="fu">@@</span> deg) <span class="fu">^-^</span> θ ]</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ legLength, legLength ]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ) <span class="kw">where</span> legLength <span class="fu">=</span> a <span class="fu">/</span> cosA (θ<span class="fu">^/</span><span class="dv">2</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>θ</code>は頂角、<code>a</code>は高度（altitude）です。</p>
<p><code>(^-^)</code>、<code>(^/)</code>は<a href="https://hackage.haskell.org/package/vector-space">vector-space</a>というパッケージで定義され、 角度やベクトル等を引算、割算ができるような関数です。 意味が分からないときは<code>^</code>を消してみたら、だいたいの意味が見えてきます （<code>(^-^)</code> → <code>(-)</code>、<code>(^/)</code> → <code>(/)</code>)。</p>
<p><code>(&amp;)</code>、<code>(.~)</code>は<a href="https://hackage.haskell.org/package/lens">lens</a>のオペレーターです。 今からlensの説明しようとすると話が終わらないので、今日は省きます。</p>
<p>画像のレイアウトをするため、底辺の長さが必要なときがあります。 それを計算するために下記のユーティリティ関数を使います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isoscelesBase ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isoscelesBase θ a <span class="fu">=</span> <span class="dv">2</span> <span class="fu">*</span> tanA (θ<span class="fu">^/</span><span class="dv">2</span>) <span class="fu">*</span> a</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="レイアウト">レイアウト</h2>
<p>簡単に言うと、このデザインは「上に画像があって、その下にメッセージ」と説明できます。</p>
<p>とりあえず、フォントや写真はもう既にロードされていると見なしましょう。 そうすると、下記のようになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; nengajou ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> nengajou fs photo <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">topImage θ photoShiftedRight <span class="st"># inViewport</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">===</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">message fs imageWidth (photoHeight <span class="fu">/</span> <span class="dv">3</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>(===)</code>は、２つの<em><code>Diagram</code></em>を上から下に並べる関数です。</p>
<p>分かりやすいでしょう！ <code>topImage</code>は上の画像、<code>message</code>は下のメッセージ。 並べると、年賀状になると。</p>
<p>あとは、ここで使った値を定義するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     θ                 </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">50</span> <span class="fu">@@</span> deg</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoHeight       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">height photo</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     imageWidth        </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">isoscelesBase θ photoHeight</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>まずは、写真や画像についての変数です。<code>θ</code>の値を変更したら、三角形の形を変えられます。 <code>photoHeight</code>は写真全体の高さですが、 <code>imageWidth</code>はできた画像（緑のメイン三角形）の幅となります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoShiftedRight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">photo <span class="st"># translateX 40</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>実はもとの写真では人物は真ん中ではなかったので、 細かいことになりますが、これで調整しています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inViewport <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">view </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(p2 ((<span class="fu">-</span>imageWidth) <span class="fu">/</span> <span class="dv">2</span>, (<span class="fu">-</span>photoHeight) <span class="fu">/</span> <span class="dv">2</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(r2 (imageWidth, photoHeight))</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>色が付いている三角形の画像をみると、ちょっと外側が汚いので、 <code>inViewport</code>で、外の部分を消す関数を用意しました。</p>
<h2 id="画像">画像</h2>
<p>画像自体も簡単に説明できます。まず、５つの三角形と合わせるため、 写真を切る必要があります。その切った写真の上に、三角形を載せていきます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; topImage ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> topImage θ photo <span class="fu">=</span> triangles <span class="fu">&lt;&gt;</span> clippedPhoto <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>切るサイズは、写真の元の高さ✕緑の三角形の底辺の長さです。 それではちょっと幅が見えてしまうので、あと２ピクセルずつ、念の為に切ります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   clippedPhoto </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> photo <span class="st"># clipBy (rect </span></code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(centralTriangleBase <span class="fu">-</span> <span class="dv">2</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(photoHeight <span class="fu">-</span> <span class="dv">2</span>))</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photoHeight         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> height photo</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangleBase </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isoscelesBase θ photoHeight</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>triangles</code>は、左から右に言うと、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   triangles </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> mconcat</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ edgeTriangleLeft</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleLeft</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, centralTriangle</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleRight</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, edgeTriangleRight</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>になります。この画像では順番は関係ないけれど、 場合によっては必要になりますね。 <em><code>Diagram</code></em>を連結すると、 上から下の順番になります（<code>edgeTriangleLeft</code>の下に <code>bottomTriangleLeft</code>を描いて、その下に <code>centralTriangle</code>を描く…という形）。</p>
<p>この画像の三角形を見ると２種類があります。 まずは、真ん中の３つの三角形。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/outline-triangles.png" title="Picture of 3 central triangles goes here" />
</center>
<p>輪郭のみを描いて、下にある写真が見える三角形ですね。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   outlineTriangle a </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ a</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lc white</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw ultraThick</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ<code>centerXY</code>が必要か？」ですが、Diagramsはデフォルトでは 原点は高度から見る真ん中ではなく、重心に設定してあります。 二等辺三角形を鏡映すると、ずれてしまう。 <code>centerXY</code>をしたら、簡単に鏡映できるようになります。</p>
<p>次は左と右の、真っ白の三角形です。</p>
<center>
<img src="/posts/2015-01-01-あけましておめでとうございます/edge-triangles.png" title="Picture of 2 edge triangles goes here" />
</center>
<p>この三角形の頂角は真ん中の三角形の反対角度になっています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   θ<span class="ch">&#39; = (180 @@ deg) ^-^ θ</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>高度は下の三角形の底辺の半分です。 この値はまた使うので変数に保存しておきましょう。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleHalfBase </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> centralTriangleBase <span class="fu">/</span> <span class="dv">4</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あとは色と90°の回転です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangle </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ<span class="ch">&#39; bottomTriangleHalfBase</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw none</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># fc white</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># rotate (90 @@ deg)</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>outlineTriangle</code>と<code>edgeTriangle</code>の２種類を定義できました。 これで５つの三角形が描けます。まずは真ん中の三角形です。 高度は写真と一緒です。その三角形を、<em>y</em> 軸に鏡映します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangle   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle photoHeight <span class="st"># reflectY</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>あとは右側の下の三角形と真っ白の三角形。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleRight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle (photoHeight <span class="fu">/</span> <span class="dv">2</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateY (-(photoHeight / 4))</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX bottomTriangleHalfBase</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleRight   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> edgeTriangle</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX (bottomTriangleHalfBase * 3 / 2)</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>最後は左側です。右側を、<em>x</em> 軸に鏡映するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleLeft </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX bottomTriangleRight</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleLeft   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX edgeTriangleRight</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>画像の分はここまでです。</p>
<h2 id="メッセージ">メッセージ</h2>
<p>最初に「型は<em><code>Fonts</code></em>以外は定義しない」と言いましたが、 実は、メッセージを定義するため、今回下記のユーティリティー型を定義しました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MessagePart</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgText</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalWidth  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">font               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">PreparedFont</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">outline            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Measure</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">msgText            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">String</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">|</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgSpace</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>この型はメッセージのDiagramを定義するための、一瞬の型なので、 絶対必要とは言えません。 正直、もともとこのプログラムを書いたときはこの型は使わず作りました。 ただ、あった方が絶対分かりやすいと思って、 ブログのためにちょっとリファクタリングしてみました。</p>
<p><em><code>MessagePart</code></em>はメッセージの一行です。 その一行はメッセージのテキスト（<em><code>MsgText</code></em>)か、 何も表記しない、ただスペース開けるため（<em><code>MsgSpace</code></em>）です。</p>
<p>この型について一つポイントがあります。 <code>proportionalHeight</code>と<code>proportionalWidth</code>は、「高さ」と「幅」の割合を意味します。 ただ、表記の仕方はそれぞれ違います。 <code>proportionalWidth</code>の方は、全体の幅に対しての割合ー 例えば、幅の半分としたいなら<code>1/2</code>と表記します。 一方、<code>proportionalHeight</code>は、表記スペースに対して一行の大きさを決るため、表記スペースに対するの「割合の分子」のみ表記します。 分母は、全部のメッセージの<code>proportionalHeight</code>の合計になるはずです。 結果、<em><code>MessagePart</code></em>を並べれば、スペースを１００％と使えていることになります。</p>
<p>この型があったらメッセージ自体は、ただ<em><code>MessagePart</code></em>のリストになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; messageParts ::</span> [<span class="dt">MessagePart</span>]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> messageParts <span class="fu">=</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ <span class="dt">MsgSpace</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">10</span> (<span class="dv">9</span> <span class="fu">/</span> <span class="dv">10</span>) english thin</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(map toUpper <span class="st">&quot;Happy New Year&quot;</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span> (<span class="dv">1</span> <span class="fu">/</span> <span class="dv">6</span>) numbers none <span class="st">&quot;2015&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) japanese none</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;昨年はお世話になりました　今年もよろしくお願いします&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) english none</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Wishing you a fantastic New Year, from Aki &amp; Dani&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>では、このメッセージをどうやって<em><code>Diagram</code></em>に変換しましょう？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; message ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> message fs w h <span class="fu">=</span> center messageText <span class="kw">where</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   messageText  <span class="fu">=</span> foldr1 (<span class="fu">===</span>) <span class="fu">.</span> map drawMsgPart <span class="fu">$</span> messageParts</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MessagePart</code></em>を一つ一つ<code>drawMsgPart</code>で描いて、 それから<code>foldr1 (===)</code>で上から下まで並べます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgSpace</span> ph)        </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> strut <span class="fu">$</span> r2 (<span class="dv">0</span>, getRealHeight ph)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgText</span> ph pw f o t) </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> text&#39; (w <span class="fu">*</span> pw, getRealHeight ph) f o t</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MsgSpace</code></em>だったら、ただ<em>y</em> 軸にスペースを開けます。 <em><code>MsgText</code></em>だったら<code>text'</code>としてレンダーします。</p>
<p><code>getRealHeight</code>は、割合の分子から、実際の高さに変換する関数です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   getRealHeight ph </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> h <span class="fu">*</span> ph <span class="fu">/</span> totalHeight</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   totalHeight  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sum <span class="fu">$</span> map proportionalHeight messageParts</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>text'</code>は、SVGFontsを使ってテキストをレンダーします。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   text&#39; (a, d) f o t </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> stroke (textPath t f a d)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw o # fc black &lt;&gt; strutY d</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   textPath t f a d </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> textSVG&#39; <span class="fu">$</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">TextOpts</span> t (outlMap <span class="fu">.</span> fromPF <span class="fu">$</span> f fs)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">             </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">INSIDE_WH</span> <span class="dt">KERN</span> <span class="dt">False</span> a d</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="不純なところ">不純なところ</h2>
<p>今までの関数は純粋的に定義しました。 これからは、実世界と繋がっている<code>IO</code>モナドを使って、 写真やフォントを準備するための関数を定義します。</p>
<p>写真は簡単です。Diagramsの<code>loadImageEmb</code>関数を呼んで、 エラーが返されたらそのまま出力して停止します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; loadPhoto ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> loadPhoto fp <span class="fu">=</span> either reportError (return <span class="fu">.</span> image) <span class="fu">=&lt;&lt;</span> loadImageEmb fp</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> reportError err <span class="fu">=</span> putStrLn err <span class="fu">&gt;&gt;</span> exitWith (<span class="dt">ExitFailure</span> <span class="dv">1</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントはもうちょっと複雑なんです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; prepareFonts ::</span> <span class="dt">Fonts</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Fonts</span> <span class="dt">PreparedFont</span>)</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> prepareFonts fs <span class="fu">=</span> <span class="kw">do</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">makeDirectory</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">TV.sequence (fmap prepareFont fs) <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントは<code>.ttf</code>から<code>.svg</code>に変換しないと使えないんです。 変換されたフォントは<code>svg-fonts</code>というディレクトリーに出力します。 まず、そのディレクトリーがない場合は作成しないとダメです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontDir        </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;svg-fonts&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeDirectory  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dirExists <span class="ot">&lt;-</span> doesDirectoryExist fontDir</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless dirExists <span class="fu">$</span> createDirectory fontDir</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>変換自体はfontforgeを使って行います。 もしもう既に変換されたフォントがあるならまた変換する必要はありません。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontforge f f&#39; </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> unwords [<span class="st">&quot;fontforge --lang=ff -c &#39;Open($1); Generate($2)&#39;&quot;</span>, f, f&#39;]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   prepareFont f  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">let</span> f&#39; <span class="fu">=</span> fontDir <span class="fu">&lt;/&gt;</span> filter (<span class="fu">/=</span> <span class="ch">&#39; &#39;</span>) (takeBaseName f) <span class="fu">&lt;.&gt;</span> <span class="st">&quot;svg&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     fontAlreadyConverted <span class="ot">&lt;-</span> doesFileExist f&#39;</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless fontAlreadyConverted <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       system <span class="fu">$</span> fontforge f f&#39;</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       stripNamespaceLineFrom f&#39;</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     return <span class="fu">$</span> <span class="dt">PreparedFont</span> f&#39;</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>fontforgeが出すXMLはネームスペースに入っていますが、 SVGFontsがネームスペース無しのXMLしかサポートされていません。 下記の関数はネームスペース宣言を外します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; stripNamespaceLineFrom ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> stripNamespaceLineFrom f <span class="fu">=</span> TIO.readFile f <span class="fu">&gt;&gt;=</span> go</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> go </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span>   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.words</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">filter (not <span class="fu">.</span> T.isInfixOf <span class="st">&quot;xmlns&quot;</span>)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.unwords</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">TIO.writeFile f</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="main関数"><code>main</code>関数</h2>
<p>最後に、上記の関数を結んでいく<code>main</code>関数です。</p>
<p>写真とフォントの準備をし、<code>nengajou</code>の関数に渡して<em><code>Diagram</code></em>を作成します。 <code>pad</code>を使って枠を作ります。それから背景を白にしましょう。 最終、Diagramsの<code>mainWith</code>関数を使ってコマンドラインインターフェースが出来上がります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photo <span class="ot">&lt;-</span> loadPhoto <span class="st">&quot;static/posts/2015-01-01-あけましておめでとうございます/beach-club.png&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fonts <span class="ot">&lt;-</span> prepareFonts <span class="dt">Fonts</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Garamond&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Calisto MT&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/ＤＦＰ教科書体W3&quot;</span> }</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mainWith <span class="fu">$</span> nengajou fonts photo <span class="st"># pad 1.1 # bg black</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>さあ、これで今年の年賀状が完成しました！</p>
<p>今年も楽しみながら、関数型言語で面白いものを作って行きましょう！</p>

<div class="tagsinfo">Tagged with: <a href="/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/index.html">日本語</a>, <a href="/tags/functional-programming/index.html">functional-programming</a>, <a href="/tags/haskell/index.html">haskell</a>, <a href="/tags/%E3%81%8A%E6%AD%A3%E6%9C%88/index.html">お正月</a>, <a href="/tags/new%20year/index.html">new year</a>, <a href="/tags/%E5%B9%B4%E8%B3%80%E7%8A%B6/index.html">年賀状</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 2: Posts</title>
    <link href="http://dpwright.com/posts/2014-09-29-generating-this-website-part-2-posts.html" />
    <id>http://dpwright.com/posts/2014-09-29-generating-this-website-part-2-posts.html</id>
    <published>2014-09-29T09:57:39Z</published>
    <updated>2014-09-29T09:57:39Z</updated>
    <summary type="html"><![CDATA[<div class="info">29 September, 2014</div>



<div class="sidenote">
<p>This is part two of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>OK, time to dive into arguably the most important part of the website generator – generating the posts themselves! Really, this is what it all comes down to; any other features like tags, rss feeds, crossposting and so on are just window dressing. Generating posts is not actually that hard, but you’ll find it’s one of the most often-tweaked part of your Hakyll setup as most changes you want to make affect posts in some way. Let’s get started!</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>We start with our usual <code>OverloadedStrings</code> definition and <code>Hakyll</code> import. Because we’re developing a module now, rather than the main entry point of our program, we also need a module header. This was missing from the last post but will be present in all the remaining modules in this series.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Posts</span> <span class="kw">where</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Note that since the module is called <code>Posts</code>, the file itself must also be called <code>Posts.hs</code>, or rather <code>Posts.lhs</code> as it is a literate Haskell document. This has a bit of a knock-on effect, as Hakyll’s default behaviour is to expect that all files will follow a <code>date-title</code> convention for their filenames, so already we will have to do some extra work to get it to draw that information from the Pandoc header instead of the filename.</p>
<p>The following imports give us some extra helper functions which we’ll use throughout our program. These functions (particularly the operators) are so common I almost wish they were part of the standard prelude, but they aren’t so we’ll have to live with a longish import list. I won’t go into too much detail here but as I’ve used explicit imports you can see exactly which functions I’m importing from where.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;&gt;</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Maybe</span>          </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromMaybe)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.List</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(intercalate, isInfixOf)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Char</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(toLower, isAlphaNum)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;$&gt;</span>), (<span class="fu">&lt;*&gt;</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span>       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(msum)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>I’m going to be making use of a few system/date related functions to handle the date specified in the header and rename the file appropriately.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.FilePath</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(replaceBaseName, takeDirectory,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> takeBaseName, splitFileName, (<span class="fu">&lt;/&gt;</span>))</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Locale</span>       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(defaultTimeLocale)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time.Clock</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">UTCTime</span> (<span class="fu">..</span>))</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time.Format</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(formatTime, parseTime)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>Map</code> and <code>Set</code> data structures export function names that clash with those from the standard prelude for working with lists, so I’ll import those qualified here. In fact, I only make use of one function from each (<code>lookup</code> and <code>union</code> respectively), so I could have just imported those functions and had done with it, but it’s common form to import data structures like this qualified, so I’m in the habit of it. It’s also nice to be able to look at code called <code>M.lookup</code> and know straight away that it’s looking up the value in a map and not an association list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Finally some more specific imports. I’ll be overriding some of Pandoc’s default options so I’ll need to bring those into scope.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Definition</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Pandoc</span>(<span class="fu">..</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Options</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">ReaderOptions</span>(<span class="fu">..</span>),</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">WriterOptions</span> (<span class="fu">..</span>),</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">Extension</span> (<span class="fu">..</span>),</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">HTMLMathMethod</span>(<span class="fu">..</span>), def)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>As well as that, I’m going to import the <code>Crossposting</code> and <code>ElasticTabstops</code> modules which we’ll cover later in the series.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Crossposting</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">ElasticTabstops</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>After all that, we can actually get on with writing some code! If you’re new to Haskell, don’t worry too much about all these imports – in general you just add them as you come across functionality you need to use which is defined in another module, so you don’t really need to think too much about them ahead of time. Because Haskell encourages breaking things down into small, reusable components, import lists can get quite long. This is a good thing!</p>
<h2 id="pandoc-options">Pandoc options</h2>
<p>To begin with, I’m going to define the custom version of the Pandoc compiler we’ll use to generate the posts. Hakyll comes with some reasonable defaults, but I’d like to tweak it a little to allow support for features specific to my needs here – in particular, I want support for:</p>
<ul>
<li>Literate Haskell (or you wouldn’t be reading this!)</li>
<li>MathJax</li>
<li>Syntax Highlighting</li>
<li>Smart Parsing (conversion of <code>--</code> to –, and so forth)</li>
</ul>
<p>The compiler itself is just a standard compiler with different reader and writer options, and some pandoc-level transformations:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; customCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> customCompiler <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">pandocCompilerWithTransform</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   readerOptions writerOptions pandocTransforms</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Those options are defined in terms of Pandoc’s defaults, provided by the <code>Default</code> typeclass, which allows you to specify a default definition <code>def</code> for any type. First we tell the reader to add <code>readerSmart</code> to its options:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; readerOptions ::</span> <span class="dt">ReaderOptions</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> readerOptions <span class="fu">=</span> def { readerSmart <span class="fu">=</span> <span class="dt">True</span> }</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The writer options are manipulated in a similar way, adding MathJax support, syntax highlighting, and literate Haskell.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; writerOptions ::</span> <span class="dt">WriterOptions</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> writerOptions <span class="fu">=</span> def</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { writerHTMLMathMethod <span class="fu">=</span> <span class="dt">MathJax</span> <span class="st">&quot;&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , writerHighlight      <span class="fu">=</span> <span class="dt">True</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , writerExtensions     <span class="fu">=</span> extensions</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> extensions </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> writerExtensions def <span class="ot">`S.union`</span> S.fromList</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ <span class="dt">Ext_literate_haskell</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>MathJax</code> constructor takes a string to supply the URL to <code>mathjax.js</code>, so that it can embed it in the output HTML, however in this case Hakyll overrides Pandoc’s default HTML output to insert our templates, and it is there that we import <code>mathjax.js</code>, so we can just pass the empty string here.</p>
<p>Defining <code>extensions</code> as a union of the default extensions with a single-member set may seem like overkill, and for only one item it is, but doing it this way means that if I ever want to add an extension I can just add it to the list.</p>
<p>Finally, we define <code>pandocTransform</code>, for our post-processing needs. This is just the composition of any pandoc-level filters we want to apply – see the posts for those individual filters for more information.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pandocTransforms ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pandocTransforms <span class="fu">=</span> elasticTabstops</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="generating-posts">Generating posts</h2>
<p>Here begins a pattern that you will see a lot of. In Hakyll, the way you generate anything is by defining a <code>Compiler</code>. Usually, that <code>Compiler</code> is paired with a <code>Context</code> which provides all the variables you may want to make use of in your template. Finally, we tie that <code>Compiler</code> to a specific set of inputs using <code>Rules</code>, which we covered in the previous post. Often, people write all their <code>Rules</code> inline in one big <code>main</code> function, but to make breaking the configuration over a number of blog posts easier, I’ve elected to define each set of <code>Rules</code> as an independent function which I call from <code>main</code> in the first post.</p>
<p>First, then, the <code>Context</code>, which simply extracts data from the metadata header at the top of the file.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; postCtx ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postCtx tags </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">=</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%e %B, %Y&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">tagsField <span class="st">&quot;tags&quot;</span> tags</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">crosspostField <span class="st">&quot;xp&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">defaultContext</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>As well as the <code>defaultContext</code>, which gives us some common fields such as <code>title</code>, we make use of the <code>date</code>, <code>tags</code>, and <code>xp</code> fields. The first two ought to be fairly self-explanatory – the date is displayed at the top of this page and the tags are listed at the bottom.</p>
<p><code>crosspostField</code> will be defined in a later post in this series. It is there for the case where a post on this blog is also posted on another blog – usually I’ve written it for the other blog but received permission to reproduce it here. In that case, I want to include a header at the top of the file giving a link to the original blog post.</p>
<div id="sidenote">
I also make use of Hakyll to allow me to write the post here in markdown and have it automatically uploaded to both my blog and the one where I’m guesting – at least if the latter is a Wordpress blog and I have posting rights there. But we’ll talk about that later.
</div>
<p>The <code>Compiler</code> follows standard conventions: run the Pandoc compiler (in this case our <code>customCompiler</code> defined above), apply templates, and fix up the URLs.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; postCompiler ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postCompiler tags <span class="fu">=</span> customCompiler</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    ctx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> withItemBody removeIndexHtml</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> ctx <span class="fu">=</span> postCtx tags</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Hang on, what’s that <code>saveSnapshot</code> in the middle there? I never mentioned that! Well, that allows us to save a snapshot of our page <em>as it currently stands</em> at that point in the compilation. This is handy, because we’ll want to include the content of the post in RSS feeds and the like, but at that point we only want the content, not the header, footer, and navigation. It is useful, then, to be able to save out a copy at the point where that is all we have and re-use it later, rather than having to recompile the whole thing again when generating feeds.</p>
<p>Finally, our <code>Rules</code> tell Hakyll where to get posts from, how to compile them, and where to put them.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; posts ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> posts tags <span class="fu">=</span> match (<span class="st">&quot;posts/*&quot;</span> <span class="fu">.||.</span> <span class="st">&quot;pending-posts/*&quot;</span>) <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">metadataRoute dateAndTitle <span class="ot">`composeRoutes`</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">customRoute simplifyURL</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> postCompiler tags</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This is mostly pretty simple. You can see we generate posts from both the <code>posts</code> and <code>pending-posts</code> directories (the latter are generated, but not included in the index, so I can preview them because I know the URL but they’re not “published” as such). We use the <code>date</code> and <code>title</code> metadata fields to generate a filename and then from that create a simplified URL. Finally we compile it with the <code>postCompiler</code> we defined above.</p>
<p>I took the idea (and the code) for the simplified URL route from <a href="http://yannesposito.com/Scratch/en/blog/Hakyll-setup/">Yann Esposito’s Hakyll setup</a>. Instead of <code>post-name.html</code>, it outputs a file to <code>post-name/index.html</code>, allowing us to drop the <code>.html</code> part when visiting the page in the browser. It is defined as follows.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; simplifyURL ::</span> <span class="dt">Identifier</span> <span class="ot">-&gt;</span> FilePath</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> simplifyURL ident <span class="fu">=</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   takeDirectory p <span class="fu">&lt;/&gt;</span> takeBaseName p <span class="fu">&lt;/&gt;</span> <span class="st">&quot;index.html&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> p <span class="fu">=</span> toFilePath ident</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This works nicely, but as Yann points out in his post it leaves a lot of links with <code>index.html</code> at the end of them floating around. We basically never want this, so Yann suggests the following code to strip <code>index.html</code> from the end of all links (I’ve modified it slightly to work with <code>String</code>s instead of <code>Item</code>s).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; removeIndexHtml ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> removeIndexHtml body <span class="fu">=</span> return <span class="fu">$</span> withUrls removeIndexStr body</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     removeIndexStr url <span class="fu">=</span> <span class="kw">case</span> splitFileName url <span class="kw">of</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       (dir, <span class="st">&quot;index.html&quot;</span>) <span class="fu">|</span> isLocal dir </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">-&gt;</span> init dir</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       _                                 </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">-&gt;</span> url</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     isLocal uri <span class="fu">=</span> not <span class="fu">$</span> <span class="st">&quot;://&quot;</span> <span class="ot">`isInfixOf`</span> uri</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>That all fits together quite nicely. There’s just one snag… that <code>dateAndTitle</code> function passed to <code>metadataRoute</code> doesn’t actually exist! We’re going to have to write it.</p>
<h2 id="extracting-the-date-and-title-from-metadata">Extracting the date and title from metadata</h2>
<p>As mentioned, Hakyll by default expects the date and title to be included in the filename and as such it can just change the extension and have done with it. Because we might be naming files after the modules they define (in the case of Literate Haskell files), a post such as this one would end up with a URL looking like <a href="http://dpwright.com/posts/Posts.html" class="uri">http://dpwright.com/posts/Posts.html</a>, which would be very odd. Even without this, it’s quite easy to write a post which accidentally has a subtly different title to its filename, which would be confusing.</p>
<p>Because of this, we’d much rather pull the <code>date</code> and <code>title</code> fields out of the post’s metadata, which ensures consistency and reduces repetition. Unfortunately, Hakyll provides no clear way to do this natively, so we have to make use of its generic functionality for routing based on metadata. We do this using the <code>metadataRoute</code> function, above, which takes as its parameter a function taking a posts <code>Metadata</code> and returning the <code>Routes</code> associated with that metadata, and returns <code>Routes</code> which can be used by the <code>Rules</code> to which is it passed. Its type signature looks like this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">metadataRoute ::</span> (<span class="dt">Metadata</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span>) <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The function we passed to <code>metadataRoute</code> above was <code>dateAndTitle</code>, which we’ll define here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; dateAndTitle ::</span> <span class="dt">Metadata</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> dateAndTitle meta <span class="fu">=</span> fromMaybe idRoute <span class="fu">$</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mkName <span class="fu">&lt;$&gt;</span> getField <span class="st">&quot;title&quot;</span> <span class="fu">&lt;*&gt;</span> getField <span class="st">&quot;date&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">mkName t d </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">setBaseName <span class="fu">$</span> date d <span class="fu">++</span> <span class="st">&quot;-&quot;</span> <span class="fu">++</span> title t</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">getField   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="ot">`M.lookup`</span> meta)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">date       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">formatTime defaultTimeLocale</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;%Y-%m-%d&quot;</span> <span class="fu">.</span> readTime</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">title      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">map toLower <span class="fu">.</span> intercalate <span class="st">&quot;-&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">map (filter isAlphaNum) <span class="fu">.</span> words</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>There’s a lot going on in this definition so we’ll go through it carefully.</p>
<ul>
<li>We begin with a call to <code>fromMaybe</code> passing <code>idRoute</code> as the fallback. This means that what follows might fail, and should it fail we’ll just use the filename as-is (falling back on Hakyll’s default behaviour).</li>
<li><code>mkName</code> is called in applicative style, passing two calls to <code>getField</code> (defined locally). We know that <code>Maybe</code> forms an <code>Applicative</code>, and that we are expecting a <code>Maybe</code> here as the second parameter to <code>fromMaybe</code>. So we can infer what will happen here: it will try to get the <code>title</code> and <code>date</code> fields, and if either of them fail it will return <code>Nothing</code>, otherwise it will pass them both to <code>mkName</code>.
<ul>
<li>If you are familiar with applicative style this will have been immediately obvious. If not, it is worth reading through the previous bullet-point and associated code a few times until you get a feeling for what’s happening. We’ve reduced what would have been a lot of sanity checking and nested <code>if</code> statements into a single line of code which, when you are used to this style, reads extremely clearly. It’s a very powerful technique.</li>
</ul></li>
<li>Moving onto the local definitions: <code>getField</code> is simply a shortcut for calling <code>Map</code>’s <code>lookup</code> function in order to get the respective fields out of the passed <code>Metadata</code>.</li>
<li><code>mkName</code> takes the title and the date as parameters, calls the <code>date</code> and <code>title</code> functions in order to turn them into strings, and then sticks them together with a <code>-</code>. Finally it calls <code>setBaseName</code> (defined below), which works similarly to Hakyll’s native <code>setExtension</code> except that, obviously, it sets the basename.</li>
<li><code>date</code> normalises the <code>date</code> field to the simple <code>YYYY-mm-dd</code> format we want to use for our filenames. This means you can write the date in any of Hakyll’s supported date formats and the filename will turn out OK.</li>
<li><code>title</code> splits the title up into words, filters out any strange symbols using <code>isAlphaNum</code> (which, thankfully, is Unicode-friendly so that Japanese titles aren’t considered “strange symbols”), and then joins those words back up with <code>-</code> dashes so that we don’t have to worry about <code>%20</code>s appearing all over our URLs. Finally, it makes the whole thing lower-case.</li>
</ul>
<p>Function definitions like the one above are part of the reason I love Haskell and others might hate it. There’s so much functionality packed into so little code there, you do have to slow down a little bit and read it carefully to follow it, at least until you are used to code written in the style used (in this case, some applicative style and a little bit of point-free notation thrown in for good measure). Add to this the expressivity of Haskell which allows for a number of different styles, so that even once you’ve got used to the style used here you may open another codebase and find that the style employed there is completely different! There is a not-unreasonable argument that this is problematic; that encouraging a very particular style at the language level (as Python does, for example) makes it a lot easier to read unfamiliar code.</p>
<p>I am sympathetic to this argument up to a point. It does make sense, especially if you are dealing with large numbers of programmers relatively inexperienced in the language (thus not exposed to the various styles of programming available), who regularly have to jump into different codebases (thus run into these different styles frequently). However, I do think the benefits outweight the disadvantages. Firstly, inexperienced programmers are likely to be limited to relatively isolated areas of the code, so they will have time to get used to whatever style is employed there before moving on and learning some new style along with the next codebase. Secondly, <em>once you have learnt</em> the style, it is actually dramatically <em>faster</em> to read succinct code like this than trudging through reams of <code>if</code> statements and manual <code>for</code>-style loops. It’s also harder to make mistakes, as the code fits more closely with the thing it’s trying to do.</p>
<p>So there is a learning curve, and learning curves cost time and money when training programmers. But when the initial hump is traversed<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, the increase in productivity is well worth the effort.</p>
<p>OK, after that little detour, let’s get back to it! The <code>dateAndTitle</code> function above made use of two helper functions which haven’t actually been defined. The first is <code>readTime</code>, which we use to normalise the date format. It takes a date string and converts it to a <code>UTCTime</code> which we can manipulate.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; readTime ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">UTCTime</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> readTime t <span class="fu">=</span> fromMaybe empty&#39; <span class="fu">.</span> msum <span class="fu">$</span> attempts <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   attempts </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> [parseTime defaultTimeLocale fmt t <span class="fu">|</span> fmt <span class="ot">&lt;-</span> formats]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   empty&#39;   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> error <span class="fu">$</span> <span class="st">&quot;Could not parse date field: &quot;</span> <span class="fu">++</span> t</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   formats  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> [ <span class="st">&quot;%a, %d %b %Y %H:%M:%S %Z&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%dT%H:%M:%S%Z&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d %H:%M:%S%Z&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d %H:%M&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%B %e, %Y %l:%M %p&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%B %e, %Y&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%b %d, %Y&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  ]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The basic idea for the implementation is taken from Hakyll itself, from its <code>getItemUTC</code> which is defined in <a href="https://hackage.haskell.org/package/hakyll-4.2.2.0/docs/src/Hakyll-Web-Template-Context.html"><code>Hakyll.Web.Template.Context</code></a>. Unfortunately, the type signature for that function is quite a lot more complicated than we need, so I’ve extracted the parts we need into a simple <code>String -&gt; UTCTime</code> function here. If the date doesn’t match any of the supported formats <code>readTime</code> will simply crash with an error – not the best error handling but since we’re always going to be running this interactively it doesn’t really matter.</p>
<p><code>setBaseName</code> turns a string into a <code>FilePath</code>, which it can then manipulate using Haskell’s native <code>replaceBaseName</code> functionality.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; setBaseName ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> setBaseName basename <span class="fu">=</span> customRoute <span class="fu">$</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   (<span class="ot">`replaceBaseName`</span> basename) <span class="fu">.</span> toFilePath</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="pages">Pages</h2>
<p>Another form of content on this blog is that of “pages”, which are basically posts except that they don’t have a date or tags associated with them and they are not indexed or included in feeds. As a result they are super-simple – we don’t need to save a snapshot, or to parse the date or change the filename. Instead I can just compile it with a template designed for the purpose and set the extension. We’ll use the same <code>customCompiler</code> as posts for consistency, but we’ll just pass the <code>defaultContext</code> as we don’t need any of the extra metadata posts use.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pageCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pageCompiler <span class="fu">=</span> customCompiler</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/page.html&quot;</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">ctx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">ctx</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> ctx <span class="fu">=</span> defaultContext</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The rules for pages are equally simple – just grab anything from the <code>pages</code> folder, compile it using the <code>pageCompiler</code> and set its extension to <code>html</code>. This is expressed below.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pages ::</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pages <span class="fu">=</span> match <span class="st">&quot;pages/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> customRoute simplifyURL</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile pageCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>That’s about it for compiling posts! This is <em>almost</em> all you need to get a Hakyll site up and running – the only problem is since we still don’t have post indexing you have to know the URL of the post you want to read before you read it! This is about as complicated as it gets with Hakyll though – if you’ve followed this post, the rest should be easy! We’ll cover indexing next, after which we’ll go about adding special features one at a time.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Anybody who’s read code using the <code>Lens</code> library will get the joke.<a href="#fnref1">↩</a></p></li>
</ol>
</div>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 2: Posts</title>
    <link href="http://dpwright.com/posts/2014-09-29-generating-this-website-part-2-posts/index.html" />
    <id>http://dpwright.com/posts/2014-09-29-generating-this-website-part-2-posts/index.html</id>
    <published>2014-09-29T09:57:39Z</published>
    <updated>2014-09-29T09:57:39Z</updated>
    <summary type="html"><![CDATA[<div class="info">29 September, 2014</div>



<div class="sidenote">
<p>This is part two of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>OK, time to dive into arguably the most important part of the website generator – generating the posts themselves! Really, this is what it all comes down to; any other features like tags, rss feeds, crossposting and so on are just window dressing. Generating posts is not actually that hard, but you’ll find it’s one of the most often-tweaked part of your Hakyll setup as most changes you want to make affect posts in some way. Let’s get started!</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>We start with our usual <code>OverloadedStrings</code> definition and <code>Hakyll</code> import. Because we’re developing a module now, rather than the main entry point of our program, we also need a module header. This was missing from the last post but will be present in all the remaining modules in this series.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Posts</span> <span class="kw">where</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Note that since the module is called <code>Posts</code>, the file itself must also be called <code>Posts.hs</code>, or rather <code>Posts.lhs</code> as it is a literate Haskell document. This has a bit of a knock-on effect, as Hakyll’s default behaviour is to expect that all files will follow a <code>date-title</code> convention for their filenames, so already we will have to do some extra work to get it to draw that information from the Pandoc header instead of the filename.</p>
<p>The following imports give us some extra helper functions which we’ll use throughout our program. These functions (particularly the operators) are so common I almost wish they were part of the standard prelude, but they aren’t so we’ll have to live with a longish import list. I won’t go into too much detail here but as I’ve used explicit imports you can see exactly which functions I’m importing from where.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;&gt;</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Maybe</span>          </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromMaybe)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.List</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(intercalate, isInfixOf)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Char</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(toLower, isAlphaNum)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;$&gt;</span>), (<span class="fu">&lt;*&gt;</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span>       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(msum)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>I’m going to be making use of a few system/date related functions to handle the date specified in the header and rename the file appropriately.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.FilePath</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(replaceBaseName, takeDirectory,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> takeBaseName, splitFileName, (<span class="fu">&lt;/&gt;</span>))</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Locale</span>       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(defaultTimeLocale)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time.Clock</span>     </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">UTCTime</span> (<span class="fu">..</span>))</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time.Format</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(formatTime, parseTime)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>Map</code> and <code>Set</code> data structures export function names that clash with those from the standard prelude for working with lists, so I’ll import those qualified here. In fact, I only make use of one function from each (<code>lookup</code> and <code>union</code> respectively), so I could have just imported those functions and had done with it, but it’s common form to import data structures like this qualified, so I’m in the habit of it. It’s also nice to be able to look at code called <code>M.lookup</code> and know straight away that it’s looking up the value in a map and not an association list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Finally some more specific imports. I’ll be overriding some of Pandoc’s default options so I’ll need to bring those into scope.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Definition</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Pandoc</span>(<span class="fu">..</span>))</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Options</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">ReaderOptions</span>(<span class="fu">..</span>),</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">WriterOptions</span> (<span class="fu">..</span>),</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">Extension</span> (<span class="fu">..</span>),</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">HTMLMathMethod</span>(<span class="fu">..</span>), def)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>As well as that, I’m going to import the <code>Crossposting</code> and <code>ElasticTabstops</code> modules which we’ll cover later in the series.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Crossposting</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">ElasticTabstops</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>After all that, we can actually get on with writing some code! If you’re new to Haskell, don’t worry too much about all these imports – in general you just add them as you come across functionality you need to use which is defined in another module, so you don’t really need to think too much about them ahead of time. Because Haskell encourages breaking things down into small, reusable components, import lists can get quite long. This is a good thing!</p>
<h2 id="pandoc-options">Pandoc options</h2>
<p>To begin with, I’m going to define the custom version of the Pandoc compiler we’ll use to generate the posts. Hakyll comes with some reasonable defaults, but I’d like to tweak it a little to allow support for features specific to my needs here – in particular, I want support for:</p>
<ul>
<li>Literate Haskell (or you wouldn’t be reading this!)</li>
<li>MathJax</li>
<li>Syntax Highlighting</li>
<li>Smart Parsing (conversion of <code>--</code> to –, and so forth)</li>
</ul>
<p>The compiler itself is just a standard compiler with different reader and writer options, and some pandoc-level transformations:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; customCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> customCompiler <span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">pandocCompilerWithTransform</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   readerOptions writerOptions pandocTransforms</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Those options are defined in terms of Pandoc’s defaults, provided by the <code>Default</code> typeclass, which allows you to specify a default definition <code>def</code> for any type. First we tell the reader to add <code>readerSmart</code> to its options:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; readerOptions ::</span> <span class="dt">ReaderOptions</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> readerOptions <span class="fu">=</span> def { readerSmart <span class="fu">=</span> <span class="dt">True</span> }</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The writer options are manipulated in a similar way, adding MathJax support, syntax highlighting, and literate Haskell.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; writerOptions ::</span> <span class="dt">WriterOptions</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> writerOptions <span class="fu">=</span> def</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { writerHTMLMathMethod <span class="fu">=</span> <span class="dt">MathJax</span> <span class="st">&quot;&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , writerHighlight      <span class="fu">=</span> <span class="dt">True</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , writerExtensions     <span class="fu">=</span> extensions</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> extensions </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> writerExtensions def <span class="ot">`S.union`</span> S.fromList</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ <span class="dt">Ext_literate_haskell</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>MathJax</code> constructor takes a string to supply the URL to <code>mathjax.js</code>, so that it can embed it in the output HTML, however in this case Hakyll overrides Pandoc’s default HTML output to insert our templates, and it is there that we import <code>mathjax.js</code>, so we can just pass the empty string here.</p>
<p>Defining <code>extensions</code> as a union of the default extensions with a single-member set may seem like overkill, and for only one item it is, but doing it this way means that if I ever want to add an extension I can just add it to the list.</p>
<p>Finally, we define <code>pandocTransform</code>, for our post-processing needs. This is just the composition of any pandoc-level filters we want to apply – see the posts for those individual filters for more information.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pandocTransforms ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pandocTransforms <span class="fu">=</span> elasticTabstops</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="generating-posts">Generating posts</h2>
<p>Here begins a pattern that you will see a lot of. In Hakyll, the way you generate anything is by defining a <code>Compiler</code>. Usually, that <code>Compiler</code> is paired with a <code>Context</code> which provides all the variables you may want to make use of in your template. Finally, we tie that <code>Compiler</code> to a specific set of inputs using <code>Rules</code>, which we covered in the previous post. Often, people write all their <code>Rules</code> inline in one big <code>main</code> function, but to make breaking the configuration over a number of blog posts easier, I’ve elected to define each set of <code>Rules</code> as an independent function which I call from <code>main</code> in the first post.</p>
<p>First, then, the <code>Context</code>, which simply extracts data from the metadata header at the top of the file.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; postCtx ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postCtx tags </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">=</span>  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%e %B, %Y&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">tagsField <span class="st">&quot;tags&quot;</span> tags</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">crosspostField <span class="st">&quot;xp&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">defaultContext</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>As well as the <code>defaultContext</code>, which gives us some common fields such as <code>title</code>, we make use of the <code>date</code>, <code>tags</code>, and <code>xp</code> fields. The first two ought to be fairly self-explanatory – the date is displayed at the top of this page and the tags are listed at the bottom.</p>
<p><code>crosspostField</code> will be defined in a later post in this series. It is there for the case where a post on this blog is also posted on another blog – usually I’ve written it for the other blog but received permission to reproduce it here. In that case, I want to include a header at the top of the file giving a link to the original blog post.</p>
<div id="sidenote">
I also make use of Hakyll to allow me to write the post here in markdown and have it automatically uploaded to both my blog and the one where I’m guesting – at least if the latter is a Wordpress blog and I have posting rights there. But we’ll talk about that later.
</div>
<p>The <code>Compiler</code> follows standard conventions: run the Pandoc compiler (in this case our <code>customCompiler</code> defined above), apply templates, and fix up the URLs.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; postCompiler ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postCompiler tags <span class="fu">=</span> customCompiler</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    ctx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> withItemBody removeIndexHtml</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> ctx <span class="fu">=</span> postCtx tags</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Hang on, what’s that <code>saveSnapshot</code> in the middle there? I never mentioned that! Well, that allows us to save a snapshot of our page <em>as it currently stands</em> at that point in the compilation. This is handy, because we’ll want to include the content of the post in RSS feeds and the like, but at that point we only want the content, not the header, footer, and navigation. It is useful, then, to be able to save out a copy at the point where that is all we have and re-use it later, rather than having to recompile the whole thing again when generating feeds.</p>
<p>Finally, our <code>Rules</code> tell Hakyll where to get posts from, how to compile them, and where to put them.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; posts ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> posts tags <span class="fu">=</span> match (<span class="st">&quot;posts/*&quot;</span> <span class="fu">.||.</span> <span class="st">&quot;pending-posts/*&quot;</span>) <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">metadataRoute dateAndTitle <span class="ot">`composeRoutes`</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">customRoute simplifyURL</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> postCompiler tags</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This is mostly pretty simple. You can see we generate posts from both the <code>posts</code> and <code>pending-posts</code> directories (the latter are generated, but not included in the index, so I can preview them because I know the URL but they’re not “published” as such). We use the <code>date</code> and <code>title</code> metadata fields to generate a filename and then from that create a simplified URL. Finally we compile it with the <code>postCompiler</code> we defined above.</p>
<p>I took the idea (and the code) for the simplified URL route from <a href="http://yannesposito.com/Scratch/en/blog/Hakyll-setup/">Yann Esposito’s Hakyll setup</a>. Instead of <code>post-name.html</code>, it outputs a file to <code>post-name/index.html</code>, allowing us to drop the <code>.html</code> part when visiting the page in the browser. It is defined as follows.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; simplifyURL ::</span> <span class="dt">Identifier</span> <span class="ot">-&gt;</span> FilePath</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> simplifyURL ident <span class="fu">=</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   takeDirectory p <span class="fu">&lt;/&gt;</span> takeBaseName p <span class="fu">&lt;/&gt;</span> <span class="st">&quot;index.html&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> p <span class="fu">=</span> toFilePath ident</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This works nicely, but as Yann points out in his post it leaves a lot of links with <code>index.html</code> at the end of them floating around. We basically never want this, so Yann suggests the following code to strip <code>index.html</code> from the end of all links (I’ve modified it slightly to work with <code>String</code>s instead of <code>Item</code>s).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; removeIndexHtml ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> removeIndexHtml body <span class="fu">=</span> return <span class="fu">$</span> withUrls removeIndexStr body</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     removeIndexStr url <span class="fu">=</span> <span class="kw">case</span> splitFileName url <span class="kw">of</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       (dir, <span class="st">&quot;index.html&quot;</span>) <span class="fu">|</span> isLocal dir </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">-&gt;</span> init dir</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       _                                 </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">-&gt;</span> url</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     isLocal uri <span class="fu">=</span> not <span class="fu">$</span> <span class="st">&quot;://&quot;</span> <span class="ot">`isInfixOf`</span> uri</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>That all fits together quite nicely. There’s just one snag… that <code>dateAndTitle</code> function passed to <code>metadataRoute</code> doesn’t actually exist! We’re going to have to write it.</p>
<h2 id="extracting-the-date-and-title-from-metadata">Extracting the date and title from metadata</h2>
<p>As mentioned, Hakyll by default expects the date and title to be included in the filename and as such it can just change the extension and have done with it. Because we might be naming files after the modules they define (in the case of Literate Haskell files), a post such as this one would end up with a URL looking like <a href="http://dpwright.com/posts/Posts.html" class="uri">http://dpwright.com/posts/Posts.html</a>, which would be very odd. Even without this, it’s quite easy to write a post which accidentally has a subtly different title to its filename, which would be confusing.</p>
<p>Because of this, we’d much rather pull the <code>date</code> and <code>title</code> fields out of the post’s metadata, which ensures consistency and reduces repetition. Unfortunately, Hakyll provides no clear way to do this natively, so we have to make use of its generic functionality for routing based on metadata. We do this using the <code>metadataRoute</code> function, above, which takes as its parameter a function taking a posts <code>Metadata</code> and returning the <code>Routes</code> associated with that metadata, and returns <code>Routes</code> which can be used by the <code>Rules</code> to which is it passed. Its type signature looks like this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">metadataRoute ::</span> (<span class="dt">Metadata</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span>) <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The function we passed to <code>metadataRoute</code> above was <code>dateAndTitle</code>, which we’ll define here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; dateAndTitle ::</span> <span class="dt">Metadata</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> dateAndTitle meta <span class="fu">=</span> fromMaybe idRoute <span class="fu">$</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mkName <span class="fu">&lt;$&gt;</span> getField <span class="st">&quot;title&quot;</span> <span class="fu">&lt;*&gt;</span> getField <span class="st">&quot;date&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">mkName t d </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">setBaseName <span class="fu">$</span> date d <span class="fu">++</span> <span class="st">&quot;-&quot;</span> <span class="fu">++</span> title t</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">getField   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="ot">`M.lookup`</span> meta)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">date       </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">formatTime defaultTimeLocale</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;%Y-%m-%d&quot;</span> <span class="fu">.</span> readTime</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">title      </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">map toLower <span class="fu">.</span> intercalate <span class="st">&quot;-&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">           </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">map (filter isAlphaNum) <span class="fu">.</span> words</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>There’s a lot going on in this definition so we’ll go through it carefully.</p>
<ul>
<li>We begin with a call to <code>fromMaybe</code> passing <code>idRoute</code> as the fallback. This means that what follows might fail, and should it fail we’ll just use the filename as-is (falling back on Hakyll’s default behaviour).</li>
<li><code>mkName</code> is called in applicative style, passing two calls to <code>getField</code> (defined locally). We know that <code>Maybe</code> forms an <code>Applicative</code>, and that we are expecting a <code>Maybe</code> here as the second parameter to <code>fromMaybe</code>. So we can infer what will happen here: it will try to get the <code>title</code> and <code>date</code> fields, and if either of them fail it will return <code>Nothing</code>, otherwise it will pass them both to <code>mkName</code>.
<ul>
<li>If you are familiar with applicative style this will have been immediately obvious. If not, it is worth reading through the previous bullet-point and associated code a few times until you get a feeling for what’s happening. We’ve reduced what would have been a lot of sanity checking and nested <code>if</code> statements into a single line of code which, when you are used to this style, reads extremely clearly. It’s a very powerful technique.</li>
</ul></li>
<li>Moving onto the local definitions: <code>getField</code> is simply a shortcut for calling <code>Map</code>’s <code>lookup</code> function in order to get the respective fields out of the passed <code>Metadata</code>.</li>
<li><code>mkName</code> takes the title and the date as parameters, calls the <code>date</code> and <code>title</code> functions in order to turn them into strings, and then sticks them together with a <code>-</code>. Finally it calls <code>setBaseName</code> (defined below), which works similarly to Hakyll’s native <code>setExtension</code> except that, obviously, it sets the basename.</li>
<li><code>date</code> normalises the <code>date</code> field to the simple <code>YYYY-mm-dd</code> format we want to use for our filenames. This means you can write the date in any of Hakyll’s supported date formats and the filename will turn out OK.</li>
<li><code>title</code> splits the title up into words, filters out any strange symbols using <code>isAlphaNum</code> (which, thankfully, is Unicode-friendly so that Japanese titles aren’t considered “strange symbols”), and then joins those words back up with <code>-</code> dashes so that we don’t have to worry about <code>%20</code>s appearing all over our URLs. Finally, it makes the whole thing lower-case.</li>
</ul>
<p>Function definitions like the one above are part of the reason I love Haskell and others might hate it. There’s so much functionality packed into so little code there, you do have to slow down a little bit and read it carefully to follow it, at least until you are used to code written in the style used (in this case, some applicative style and a little bit of point-free notation thrown in for good measure). Add to this the expressivity of Haskell which allows for a number of different styles, so that even once you’ve got used to the style used here you may open another codebase and find that the style employed there is completely different! There is a not-unreasonable argument that this is problematic; that encouraging a very particular style at the language level (as Python does, for example) makes it a lot easier to read unfamiliar code.</p>
<p>I am sympathetic to this argument up to a point. It does make sense, especially if you are dealing with large numbers of programmers relatively inexperienced in the language (thus not exposed to the various styles of programming available), who regularly have to jump into different codebases (thus run into these different styles frequently). However, I do think the benefits outweight the disadvantages. Firstly, inexperienced programmers are likely to be limited to relatively isolated areas of the code, so they will have time to get used to whatever style is employed there before moving on and learning some new style along with the next codebase. Secondly, <em>once you have learnt</em> the style, it is actually dramatically <em>faster</em> to read succinct code like this than trudging through reams of <code>if</code> statements and manual <code>for</code>-style loops. It’s also harder to make mistakes, as the code fits more closely with the thing it’s trying to do.</p>
<p>So there is a learning curve, and learning curves cost time and money when training programmers. But when the initial hump is traversed<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, the increase in productivity is well worth the effort.</p>
<p>OK, after that little detour, let’s get back to it! The <code>dateAndTitle</code> function above made use of two helper functions which haven’t actually been defined. The first is <code>readTime</code>, which we use to normalise the date format. It takes a date string and converts it to a <code>UTCTime</code> which we can manipulate.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; readTime ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">UTCTime</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> readTime t <span class="fu">=</span> fromMaybe empty&#39; <span class="fu">.</span> msum <span class="fu">$</span> attempts <span class="kw">where</span></code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   attempts </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> [parseTime defaultTimeLocale fmt t <span class="fu">|</span> fmt <span class="ot">&lt;-</span> formats]</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   empty&#39;   </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> error <span class="fu">$</span> <span class="st">&quot;Could not parse date field: &quot;</span> <span class="fu">++</span> t</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   formats  </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> [ <span class="st">&quot;%a, %d %b %Y %H:%M:%S %Z&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%dT%H:%M:%S%Z&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d %H:%M:%S%Z&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d %H:%M&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%B %e, %Y %l:%M %p&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%B %e, %Y&quot;</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%b %d, %Y&quot;</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  ]</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The basic idea for the implementation is taken from Hakyll itself, from its <code>getItemUTC</code> which is defined in <a href="https://hackage.haskell.org/package/hakyll-4.2.2.0/docs/src/Hakyll-Web-Template-Context.html"><code>Hakyll.Web.Template.Context</code></a>. Unfortunately, the type signature for that function is quite a lot more complicated than we need, so I’ve extracted the parts we need into a simple <code>String -&gt; UTCTime</code> function here. If the date doesn’t match any of the supported formats <code>readTime</code> will simply crash with an error – not the best error handling but since we’re always going to be running this interactively it doesn’t really matter.</p>
<p><code>setBaseName</code> turns a string into a <code>FilePath</code>, which it can then manipulate using Haskell’s native <code>replaceBaseName</code> functionality.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; setBaseName ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> setBaseName basename <span class="fu">=</span> customRoute <span class="fu">$</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   (<span class="ot">`replaceBaseName`</span> basename) <span class="fu">.</span> toFilePath</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="pages">Pages</h2>
<p>Another form of content on this blog is that of “pages”, which are basically posts except that they don’t have a date or tags associated with them and they are not indexed or included in feeds. As a result they are super-simple – we don’t need to save a snapshot, or to parse the date or change the filename. Instead I can just compile it with a template designed for the purpose and set the extension. We’ll use the same <code>customCompiler</code> as posts for consistency, but we’ll just pass the <code>defaultContext</code> as we don’t need any of the extra metadata posts use.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pageCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pageCompiler <span class="fu">=</span> customCompiler</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/page.html&quot;</span>    </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">ctx</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> </code></pre></td>
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">ctx</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> ctx <span class="fu">=</span> defaultContext</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The rules for pages are equally simple – just grab anything from the <code>pages</code> folder, compile it using the <code>pageCompiler</code> and set its extension to <code>html</code>. This is expressed below.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pages ::</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pages <span class="fu">=</span> match <span class="st">&quot;pages/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> customRoute simplifyURL</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile pageCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>That’s about it for compiling posts! This is <em>almost</em> all you need to get a Hakyll site up and running – the only problem is since we still don’t have post indexing you have to know the URL of the post you want to read before you read it! This is about as complicated as it gets with Hakyll though – if you’ve followed this post, the rest should be easy! We’ll cover indexing next, after which we’ll go about adding special features one at a time.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Anybody who’s read code using the <code>Lens</code> library will get the joke.<a href="#fnref1">↩</a></p></li>
</ol>
</div>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 1: Introduction</title>
    <link href="http://dpwright.com/posts/2014-08-04-generating-this-website-part-1-introduction.html" />
    <id>http://dpwright.com/posts/2014-08-04-generating-this-website-part-1-introduction.html</id>
    <published>2014-08-04T08:38:23Z</published>
    <updated>2014-08-04T08:38:23Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 4 August, 2014</div>



<div class="sidenote">
<p>This is part one of the “generating this website” series. To read the rest of the series, go to the series index <a href="/tags/generating%20this%20website">here</a></p>
</div>
<p>I’ve recently migrated this website to a new server, and while I was at it I thought I’d have another shot at giving it a reboot and actually keeping it up-to-date this time. I’m much more experienced in both Haskell and literate programming than I was when last I updated it, so when I was modifying my configuration it suddenly occurred to me that since this site is generated using Haskell, and since Haskell supports literate programming natively, I could very easily make the site “self-hosting” by writing up the configuration itself as a series of blog posts!</p>
<p>Thus begins this series, unimaginatively named <a href="/tags/generating%20this%20website">Generating this Website</a>. To recap, the site is generated using <a href="http://jaspervdj.be/hakyll">Hakyll</a>, a Haskell library for generating static websites. I will write this series assuming basic Haskell knowledge; you should be familiar with standard typeclasses like <code>Monoid</code> and <code>Applicative</code>. Specific knowledge of Hakyll is not required, and if an idiom feels at all obscure I will attempt to explain it as I go. If there’s anything you don’t get, you can always drop me a tweet @<a href="http://twitter.com/danielpwright">danielpwright</a>!</p>
<p>This post will just cover the basics – for details of the generation of actual posts, the index pages, and so on, check back for future posts! I will update this post with links as I write them.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>To begin with, a couple of lines which will grow familiar as this series progresses:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>OverloadedStrings</code> LANGUAGE pragma is especially convenient and to be honest I wish it was just defined by default, since I end up including it in nearly any file I write. You can set this in the <code>cabal</code> file for your project, but if I’m going to make use of LANGUAGE pragmas I’d rather be explicit so I’ll just include them in every file. After that, of course, is the Hakyll import. I’m importing this unqualified in order to make use of the EDSL Hakyll supplies.</p>
<p>I’m also going to import <code>liftA2</code> from <code>Control.Applicative</code> here. I use this as a convenience later.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> (liftA2)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, I’ll import the other posts in this series. These supply much of the actual functionality.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Indexing</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Feed</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Slides</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">OutdatedURLs</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="some-simple-rules">Some simple rules</h2>
<p>The main entry point to Hakyll takes a set of <a href="http://jaspervdj.be/hakyll/reference/Hakyll-Core-Rules.html#t:Rules"><code>Rules</code></a> and returns an <code>IO</code> action which generates the site. <code>Rules</code> themselves form a monad, so assuming we have some simple rules:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> templates, images, css,<span class="ot"> static ::</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>We can put them together by simply listing them using <code>do</code>-notation.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; simpleRules ::</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> simpleRules <span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   templates</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   images</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   static</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   pages</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   css</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   slideshows</code></pre></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
Note: the <code>slideshows</code> rule above will be defined in future blog posts
</div>
<p>The rules themselves govern the compilation and generation of files. Perhaps the simplest of these is <code>templates</code>, which compiles all files found in the <code>templates</code> directory and any subdirectories, but doesn’t actually need to output those files anywhere – instead it keeps the compiled versions around for other pages using that template.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> templates <span class="fu">=</span> match <span class="st">&quot;templates/**&quot;</span> <span class="fu">$</span> compile templateCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Hakyll provides a <a href="http://jaspervdj.be/hakyll/reference/Hakyll-Core-Identifier-Pattern.html#t:Pattern"><code>Pattern</code></a> type which, conveniently, implements <code>IsString</code> so our <code>OverloadedStrings</code> pragma takes care of the conversion for us. The <code>**</code> pattern searches in that directory and all subdirectories.</p>
<p>Next up come the images. These are also very simple – simply take the full path of the images, and copy them to the same place in the output directory.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> images <span class="fu">=</span> match <span class="st">&quot;images/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route   idRoute</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile copyFileCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>route</code> rule defines the output filename. <code>idRoute</code>, as the name implies, sets the output filename to match the input filename. Any rule which generates output requires a <code>route</code> – any rule without a <code>route</code> will be run, but won’t generate any output (like the <code>templates</code> rule above).</p>
<p>For CSS files, Hakyll provides a compressor to speed download times.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> css <span class="fu">=</span> match <span class="st">&quot;css/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route   idRoute</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile compressCssCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Of course, the <code>copyFileCompiler</code> would work just as well, but we might as well compress the CSS while we’re at it.</p>
<p>Occasionally, I just want to put some static files up that don’t fit the structure of the rest of the blog. This is particularly useful when I want to upload slides from a talk I’ve given, for example the <a href="/gits-guts">git talk</a> I gave a couple of months ago. The talk itself is maintained in a different repository, so it’s convenient if I can just include that as a submodule and have its files copied automatically. I do this by storing all such content in the <code>static</code> directory, and then copying it when generating the site, stripping the initial <code>static/</code> from the output path.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> static <span class="fu">=</span> match <span class="st">&quot;static/**&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> gsubRoute <span class="st">&quot;static/&quot;</span> (const <span class="st">&quot;&quot;</span>)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile copyFileCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>gsubRoute</code> is actually quite powerful, allowing us to change our substitution based on the matched input, but in this case we just want to substitute for the empty string every time, so we use <code>const</code> to drop the argument.</p>
<h2 id="tags-and-the-rules-which-require-them">Tags, and the <code>Rules</code> which require them</h2>
<p>The remaining rules are complicated by the fact that they need access to the tags for various reasons – the tag index pages obviously need to list all posts matching a certain tag, while the posts themselves and the Atom feed list the tags for a particular post at the bottom of the post.</p>
<p>In order to do this, we first need to generate the tags for the site, and then we need to pass these into those <code>Rules</code> that make use of them. Generating the tags is quite easy:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; generateTags ::</span> <span class="dt">Rules</span> <span class="dt">Tags</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> generateTags <span class="fu">=</span> buildTags <span class="st">&quot;posts/*&quot;</span> <span class="fu">$</span> fromCapture <span class="st">&quot;tags/*.html&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Here I use <code>buildTags</code> to get the tags from all files in the <code>posts</code> directory. The default method of tagging posts is just to include a <code>tags</code> field in the post’s metadata, but if I wanted to do it some other way I could use <code>buildTagsWith</code> instead.</p>
<p><code>fromCapture</code> acts sort of like a <code>Pattern</code> in reverse; it fills in the capture (The <code>*</code> in <code>tags/*.html</code> in this case) with a given string. We use that to say, “for every tag read from the posts’ metadata, create an index page at ‘tags/TAGNAME.html’”.</p>
<p>Having generated the tags, we need to pass them into any rules that need them. We could use <code>do</code>-notation as we did for <code>simpleRules</code> and simply pass the <code>tags</code> parameter to each entry, but here I’m going to use a little <code>Applicative</code> trick which allows me to keep the function point-free, and I think makes it read a little more declaratively.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; taggedRules ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> taggedRules <span class="fu">=</span> posts <span class="fu">&amp;</span> outdatedURLs <span class="fu">&amp;</span> index <span class="fu">&amp;</span> tagIndex <span class="fu">&amp;</span> tagCloud <span class="fu">&amp;</span> feed</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> (<span class="fu">&amp;</span>) <span class="fu">=</span> liftA2 (<span class="fu">&gt;&gt;</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This trick exploits the fact that <code>(-&gt;)</code>, the type of functions, implements <code>Applicative</code> (in fact being applicative is rather their <em>raison d’être</em> when you think about it), so if we lift the Monadic <code>(&gt;&gt;)</code> operator to act on <em>applications of functions returning a Monad</em> instead of just Monads, we can pass the parameter to the function in once and it will be distributed to each of those functions. In other words:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">posts tags <span class="fu">&gt;&gt;</span> tagIndex tags <span class="fu">&gt;&gt;</span> feed tags ≡ (posts <span class="fu">&amp;</span> tagIndex <span class="fu">&amp;</span> feed) tags</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">where</span> (<span class="fu">&amp;</span>) <span class="fu">=</span> liftA2 (<span class="fu">&gt;&gt;</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Because of Haskell’s function currying and η-reduction, we can then drop the <code>tags</code> parameter and the brackets entirely and we’re left with the definition for <code>taggedRules</code> above.</p>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Finally we define the entry point to the application. This simply calls Hakyll’s own <code>hakyll</code> function, passing in the rules defined above. First we call the simple, self-standing rules, then we generate the tags and pass them to the tagged rules.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> hakyll <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   simpleRules</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   generateTags <span class="fu">&gt;&gt;=</span> taggedRules</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This concludes the introduction to Hakyll and the entry point for the generation code for this website. Stay tuned for the next entry, where we’ll add the configuration to actually create the posts themselves!</p>

<div class="tagsinfo">Tagged with: <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 1: Introduction</title>
    <link href="http://dpwright.com/posts/2014-08-04-generating-this-website-part-1-introduction/index.html" />
    <id>http://dpwright.com/posts/2014-08-04-generating-this-website-part-1-introduction/index.html</id>
    <published>2014-08-04T08:38:23Z</published>
    <updated>2014-08-04T08:38:23Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 4 August, 2014</div>



<div class="sidenote">
<p>This is part one of the “generating this website” series. To read the rest of the series, go to the series index <a href="/tags/generating%20this%20website">here</a></p>
</div>
<p>I’ve recently migrated this website to a new server, and while I was at it I thought I’d have another shot at giving it a reboot and actually keeping it up-to-date this time. I’m much more experienced in both Haskell and literate programming than I was when last I updated it, so when I was modifying my configuration it suddenly occurred to me that since this site is generated using Haskell, and since Haskell supports literate programming natively, I could very easily make the site “self-hosting” by writing up the configuration itself as a series of blog posts!</p>
<p>Thus begins this series, unimaginatively named <a href="/tags/generating%20this%20website">Generating this Website</a>. To recap, the site is generated using <a href="http://jaspervdj.be/hakyll">Hakyll</a>, a Haskell library for generating static websites. I will write this series assuming basic Haskell knowledge; you should be familiar with standard typeclasses like <code>Monoid</code> and <code>Applicative</code>. Specific knowledge of Hakyll is not required, and if an idiom feels at all obscure I will attempt to explain it as I go. If there’s anything you don’t get, you can always drop me a tweet @<a href="http://twitter.com/danielpwright">danielpwright</a>!</p>
<p>This post will just cover the basics – for details of the generation of actual posts, the index pages, and so on, check back for future posts! I will update this post with links as I write them.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>To begin with, a couple of lines which will grow familiar as this series progresses:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>OverloadedStrings</code> LANGUAGE pragma is especially convenient and to be honest I wish it was just defined by default, since I end up including it in nearly any file I write. You can set this in the <code>cabal</code> file for your project, but if I’m going to make use of LANGUAGE pragmas I’d rather be explicit so I’ll just include them in every file. After that, of course, is the Hakyll import. I’m importing this unqualified in order to make use of the EDSL Hakyll supplies.</p>
<p>I’m also going to import <code>liftA2</code> from <code>Control.Applicative</code> here. I use this as a convenience later.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> (liftA2)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, I’ll import the other posts in this series. These supply much of the actual functionality.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Indexing</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Feed</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Slides</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">OutdatedURLs</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<h2 id="some-simple-rules">Some simple rules</h2>
<p>The main entry point to Hakyll takes a set of <a href="http://jaspervdj.be/hakyll/reference/Hakyll-Core-Rules.html#t:Rules"><code>Rules</code></a> and returns an <code>IO</code> action which generates the site. <code>Rules</code> themselves form a monad, so assuming we have some simple rules:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> templates, images, css,<span class="ot"> static ::</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>We can put them together by simply listing them using <code>do</code>-notation.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; simpleRules ::</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> simpleRules <span class="fu">=</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   templates</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   images</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   static</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   pages</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   css</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   slideshows</code></pre></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
Note: the <code>slideshows</code> rule above will be defined in future blog posts
</div>
<p>The rules themselves govern the compilation and generation of files. Perhaps the simplest of these is <code>templates</code>, which compiles all files found in the <code>templates</code> directory and any subdirectories, but doesn’t actually need to output those files anywhere – instead it keeps the compiled versions around for other pages using that template.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> templates <span class="fu">=</span> match <span class="st">&quot;templates/**&quot;</span> <span class="fu">$</span> compile templateCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Hakyll provides a <a href="http://jaspervdj.be/hakyll/reference/Hakyll-Core-Identifier-Pattern.html#t:Pattern"><code>Pattern</code></a> type which, conveniently, implements <code>IsString</code> so our <code>OverloadedStrings</code> pragma takes care of the conversion for us. The <code>**</code> pattern searches in that directory and all subdirectories.</p>
<p>Next up come the images. These are also very simple – simply take the full path of the images, and copy them to the same place in the output directory.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> images <span class="fu">=</span> match <span class="st">&quot;images/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route   idRoute</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile copyFileCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>route</code> rule defines the output filename. <code>idRoute</code>, as the name implies, sets the output filename to match the input filename. Any rule which generates output requires a <code>route</code> – any rule without a <code>route</code> will be run, but won’t generate any output (like the <code>templates</code> rule above).</p>
<p>For CSS files, Hakyll provides a compressor to speed download times.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> css <span class="fu">=</span> match <span class="st">&quot;css/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route   idRoute</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile compressCssCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Of course, the <code>copyFileCompiler</code> would work just as well, but we might as well compress the CSS while we’re at it.</p>
<p>Occasionally, I just want to put some static files up that don’t fit the structure of the rest of the blog. This is particularly useful when I want to upload slides from a talk I’ve given, for example the <a href="/gits-guts">git talk</a> I gave a couple of months ago. The talk itself is maintained in a different repository, so it’s convenient if I can just include that as a submodule and have its files copied automatically. I do this by storing all such content in the <code>static</code> directory, and then copying it when generating the site, stripping the initial <code>static/</code> from the output path.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> static <span class="fu">=</span> match <span class="st">&quot;static/**&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> gsubRoute <span class="st">&quot;static/&quot;</span> (const <span class="st">&quot;&quot;</span>)</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile copyFileCompiler</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>gsubRoute</code> is actually quite powerful, allowing us to change our substitution based on the matched input, but in this case we just want to substitute for the empty string every time, so we use <code>const</code> to drop the argument.</p>
<h2 id="tags-and-the-rules-which-require-them">Tags, and the <code>Rules</code> which require them</h2>
<p>The remaining rules are complicated by the fact that they need access to the tags for various reasons – the tag index pages obviously need to list all posts matching a certain tag, while the posts themselves and the Atom feed list the tags for a particular post at the bottom of the post.</p>
<p>In order to do this, we first need to generate the tags for the site, and then we need to pass these into those <code>Rules</code> that make use of them. Generating the tags is quite easy:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; generateTags ::</span> <span class="dt">Rules</span> <span class="dt">Tags</span></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> generateTags <span class="fu">=</span> buildTags <span class="st">&quot;posts/*&quot;</span> <span class="fu">$</span> fromCapture <span class="st">&quot;tags/*.html&quot;</span></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Here I use <code>buildTags</code> to get the tags from all files in the <code>posts</code> directory. The default method of tagging posts is just to include a <code>tags</code> field in the post’s metadata, but if I wanted to do it some other way I could use <code>buildTagsWith</code> instead.</p>
<p><code>fromCapture</code> acts sort of like a <code>Pattern</code> in reverse; it fills in the capture (The <code>*</code> in <code>tags/*.html</code> in this case) with a given string. We use that to say, “for every tag read from the posts’ metadata, create an index page at ‘tags/TAGNAME.html’”.</p>
<p>Having generated the tags, we need to pass them into any rules that need them. We could use <code>do</code>-notation as we did for <code>simpleRules</code> and simply pass the <code>tags</code> parameter to each entry, but here I’m going to use a little <code>Applicative</code> trick which allows me to keep the function point-free, and I think makes it read a little more declaratively.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; taggedRules ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> taggedRules <span class="fu">=</span> posts <span class="fu">&amp;</span> outdatedURLs <span class="fu">&amp;</span> index <span class="fu">&amp;</span> tagIndex <span class="fu">&amp;</span> tagCloud <span class="fu">&amp;</span> feed</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> (<span class="fu">&amp;</span>) <span class="fu">=</span> liftA2 (<span class="fu">&gt;&gt;</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This trick exploits the fact that <code>(-&gt;)</code>, the type of functions, implements <code>Applicative</code> (in fact being applicative is rather their <em>raison d’être</em> when you think about it), so if we lift the Monadic <code>(&gt;&gt;)</code> operator to act on <em>applications of functions returning a Monad</em> instead of just Monads, we can pass the parameter to the function in once and it will be distributed to each of those functions. In other words:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">posts tags <span class="fu">&gt;&gt;</span> tagIndex tags <span class="fu">&gt;&gt;</span> feed tags ≡ (posts <span class="fu">&amp;</span> tagIndex <span class="fu">&amp;</span> feed) tags</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">where</span> (<span class="fu">&amp;</span>) <span class="fu">=</span> liftA2 (<span class="fu">&gt;&gt;</span>)</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Because of Haskell’s function currying and η-reduction, we can then drop the <code>tags</code> parameter and the brackets entirely and we’re left with the definition for <code>taggedRules</code> above.</p>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>Finally we define the entry point to the application. This simply calls Hakyll’s own <code>hakyll</code> function, passing in the rules defined above. First we call the simple, self-standing rules, then we generate the tags and pass them to the tagged rules.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> hakyll <span class="fu">$</span> <span class="kw">do</span></code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   simpleRules</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   generateTags <span class="fu">&gt;&gt;=</span> taggedRules</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>This concludes the introduction to Hakyll and the entry point for the generation code for this website. Stay tuned for the next entry, where we’ll add the configuration to actually create the posts themselves!</p>

<div class="tagsinfo">Tagged with: <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Git's Guts: gitの内側を探検しましょう！</title>
    <link href="http://dpwright.com/posts/2014-07-22-gits-guts-git%E3%81%AE%E5%86%85%E5%81%B4%E3%82%92%E6%8E%A2%E6%A4%9C%E3%81%97%E3%81%BE%E3%81%97%E3%82%87%E3%81%86.html" />
    <id>http://dpwright.com/posts/2014-07-22-gits-guts-git%E3%81%AE%E5%86%85%E5%81%B4%E3%82%92%E6%8E%A2%E6%A4%9C%E3%81%97%E3%81%BE%E3%81%97%E3%82%87%E3%81%86.html</id>
    <published>2014-07-22T02:32:05Z</published>
    <updated>2014-07-22T02:32:05Z</updated>
    <summary type="html"><![CDATA[<div class="info">22 July, 2014</div>



<p>この前５月に京都の「<a href="http://vshtc.doorkeeper.jp/events/11099">今日から始めるGit &amp; GitHub入門（リバイバル＋α）</a>」イベントに登壇しました。うちのトークはちょっと高級向きで心配してたが、gitの経験者もいたし、初心者でも「わき分からんかったけどおもろい」と言ってくれたからよかったです。</p>
<p>大分遅くなってしまったが、<a href="http://dpwright.com/gits-guts">スライドをアップしました</a>。スライドで「ｐ」を押せばノートが出てきます（ちょっと適当に書いたけど何となく言ったことが分かります）。</p>
<p>（絵を描くことはすごい下手なんで、図表は同僚の大久保佳尚さんに描いて頂きました。感謝します！）</p>

<div class="tagsinfo">Tagged with: <a href="/tags/git/index.html">git</a>, <a href="/tags/talks/index.html">talks</a>, <a href="/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/index.html">日本語</a></div>
]]></summary>
</entry>

</feed>
