<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Wright Access</title>
    <link href="http://dpwright.com/atom.xml" rel="self" />
    <link href="http://dpwright.com" />
    <id>http://dpwright.com/atom.xml</id>
    <author>
        <name>Daniel P. Wright</name>
        <email>dani@dpwright.com</email>
    </author>
    <updated>2015-05-02T22:02:26Z</updated>
    <entry>
    <title>Generating this website part 6: Elastic Tabstops</title>
    <link href="http://dpwright.com/posts/2015/05/02/generating-this-website-part-6-elastic-tabstops/index.html" />
    <id>http://dpwright.com/posts/2015/05/02/generating-this-website-part-6-elastic-tabstops/index.html</id>
    <published>2015-05-02T22:02:26Z</published>
    <updated>2015-05-02T22:02:26Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 2 May, 2015</div>



<div class="sidenote">
<p>This is part six of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>Over the New Year holidays this year I redesigned the site, incorporating a number of changes which (I hope) make it easier to read and nicer-looking to boot. These changes include:</p>
<ul>
<li>Removing most of the “link clutter” from the header, replacing it with just the title and a single <i class="fa fa-question-circle"></i> link, which takes you to an “about” page.</li>
<li>Pulling in the margins, putting the body of the article in a single, narrower column, which is easier for the readers’ eyes to track.</li>
<li>Changing the typefaces using a pair of fonts from Donald Knuth’s beautiful <span class="math">\(\LaTeX\)</span> typesetting system: <a href="http://en.wikipedia.org/wiki/Computer_Modern">Computer Modern</a> for the body and <a href="http://en.wikipedia.org/wiki/Concrete_Roman"><code>Concrete Roman</code></a> for preformatted/code blocks. The webfont versions of these fonts were downloaded from <a href="http://checkmyworking.com/cm-web-fonts/">this site</a>.</li>
</ul>
<p>The particularly perspicacious amongst you might have noticed an issue with this choice of typefaces, however. That is, <code>Concrete Roman</code> uses proportional spacing – it is <em>not</em> a monospaced font! And yet, all the code samples are aligned nicely. What dark magic is this?</p>
<h2 id="elastic-tabstops">Elastic tabstops</h2>
<p><a href="http://nickgravgaard.com/elastic-tabstops/">Elastic tabstops</a> were invented by Nick Gravgaard with the twin goals of ending the interminable tabs/spaces argument and allowing code to be lined up nicely even when using proportional fonts. The basic idea is simple – treat tabs not as a simple “jump to the next multiple of N” shortcut, but more as the delimiter of a table whose columns represent the layout you want your code to take. This animated GIF, taken from <a href="http://nickgravgaard.com/elastic-tabstops/">his website</a>, demonstrates the idea neatly:</p>
<center>
<img src="columnblocks_coloured.gif" title="Elastic tabstops demonstration" />
</center>
<p>Gravgaard had live editing in mind when he invented the concept, and has written plugins for a number of popular editors, however it applies just as well to static <em>display</em> of code, such as on a website. The implementation here simply does literally what the simple description of elastic tabstops says: it walks a Pandoc document looking for code blocks, and turns them into tables delimited by the tab.</p>
<p>Incidentally, there is nothing Hakyll-specific about this implementation – it is a post-process transformation on the Pandoc document. So it should support any of Pandoc’s output formats, in case you want to do something similar with your next LaTeX paper!</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>The standard opening:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">ElasticTabstops</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note I didn’t need to import <em><code>Hakyll</code></em>. We don’t use it here; this is pure Pandoc. We do need that though:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Definition</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Walk</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’re also going to be doing some fiddling with lists, so we’ll import some utilities from <em><code>Data.List</code></em> and <em><code>Data.List.Split</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.List</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(delete)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.List.Split</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(splitOn)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="code-overview">Code overview</h2>
<p>We’re looking for a <em><code>Pandoc</code></em> <code>→</code> <em><code>Pandoc</code></em> transformation, which will walk through the tree and, if it finds a code block, “elasticate” it by transforming tabs into table columns. Seems simple enough:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; elasticTabstops ::</span> <span class="dt">Pandoc</span> <span class="ot">→</span> <span class="dt">Pandoc</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> elasticTabstops <span class="fu">=</span> walk <span class="fu">$</span> ifCodeBlock elasticate</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>walk</code> actually expects a function which takes a <em><code>Block</code></em> and returns the transformed <em><code>Block</code></em>, so we define <code>ifCodeBlock</code> to run our function if the block is a <em><code>CodeBlock</code></em>, and just return it unmodified otherwise.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; ifCodeBlock ::</span> (<span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Block</span>) <span class="ot">→</span> <span class="dt">Block</span> <span class="ot">→</span> <span class="dt">Block</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> ifCodeBlock f (<span class="dt">CodeBlock</span> a s) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> f a s</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> ifCodeBlock _ b               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> b</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>elasticate</code> function, then, will take an <em><code>Attr</code></em> – the id, classes, and key-value pairs associated with a block – and a <em><code>String</code></em> representing the code itself, and return a new <em><code>Block</code></em>. We’ll wrap the generated “tables of code” in a <em><code>Div</code></em> with class <code>elastic-tabstops</code> in case we want to do any styling on it, or any further post-processing.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; elasticate ::</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Block</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> elasticate a s <span class="fu">=</span> <span class="dt">Div</span> ([], [<span class="st">&quot;elastic-tabstops&quot;</span>], []) <span class="fu">$</span> codeTables a s</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="grouping-the-code">Grouping the code</h2>
<p>Why “tables of code”, plural? Because in order to line the code up sensibly, we actually need to split it up into groups, and generate a separate table for each group. To see what I mean, take another look at the GIF above. If that code was all in one table, as the purple column got longer, the cyan column length would get longer with it! This would push the innermost block (<code>if (isPrime(i))</code> etc.) way further to the right than it needs to be.</p>
<p>To counteract this problem, we group the code based on the number of tabs in the line – consecutive lines containing the same number of tabs will be grouped together. We begin by defining a utility function to tell us the number of tabs in a line:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; countNumTabs ::</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Int</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> countNumTabs <span class="fu">=</span> length ∘ filter (<span class="fu">==</span> <span class="ch">&#39;\t&#39;</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We can consider a “group” to be a simple tuple containing the number of tabs in the lines in that group, and a list of the lines themselves:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">type</span> <span class="dt">CodeGroup</span> <span class="fu">=</span> (<span class="dt">Int</span>, [<span class="dt">String</span>])</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Our <code>group</code> function, then, is a simple fold over the lines in the code block, returning a list of these <em><code>CodeGroup</code></em>s.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; group ::</span> <span class="dt">String</span> <span class="ot">→</span> [<span class="dt">CodeGroup</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> group s <span class="fu">=</span> foldr groupMaker [] <span class="fu">$</span> lines s</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Given the definition of <code>foldr</code>, it is clear what the type of our <code>groupMaker</code> function needs to be. Because <code>foldr</code> associates to the right, you can consider it as if it’s working from the bottom of the code block upward. It’ll take the current line being processed, and the <em><code>CodeGroups</code></em> that have been identified so far, and return a new set of <em><code>CodeGroups</code></em> with the new line added appropriately.</p>
<p>What does “added appropriately” mean in this case? Well, there are two possibilities:</p>
<ul>
<li><em>If</em> there is a group already in the list (we are not on the first line), <em>and</em> the line under consideration has the same number of tabs as that group, add the line to that group.</li>
<li>Otherwise, create a new group containing only that line, and cons it to the list.</li>
</ul>
<p>This can be represented in Haskell thus:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; groupMaker ::</span> <span class="dt">String</span> <span class="ot">→</span> [<span class="dt">CodeGroup</span>] <span class="ot">→</span> [<span class="dt">CodeGroup</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> groupMaker l <span class="fu">=</span> go <span class="fu">$</span> countNumTabs l <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   go n ((n&#39;, ls)<span class="fu">:</span>gs) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">|</span> n <span class="fu">==</span> n&#39; </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> (n, l<span class="fu">:</span>ls)<span class="fu">:</span>gs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   go n gs            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> (n, [l])<span class="fu">:</span>gs</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="generating-the-tables-themselves">Generating the tables themselves</h2>
<p>Now we have all we need to split the code into groups, we can use those to construct the tables themselves. Before we start, we’ll set up a couple of utilities which will help set up the table.</p>
<p>Firstly, we want all columns to be left-aligned. We can do this by generating a list of <em><code>AlignLeft</code></em> of length one greater than the number of tabs. The tab character is the delimiter, so the number of columns will always be one greater than this.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; allLeft ::</span> <span class="dt">Int</span> <span class="ot">→</span> [<span class="dt">Alignment</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> allLeft n <span class="fu">=</span> replicate (n<span class="fu">+</span><span class="dv">1</span>) <span class="dt">AlignLeft</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Similarly, we need to specify the widths of the columns. We don’t need to be precise about this, and in fact it would be very complicated to try and work them out, and would require hard-coding the choice of typeface in here, which would be unfortunate. But we do need to specify <em>something</em>, otherwise the layout won’t be as predictable as we need it to be.</p>
<p>The trick is that we always want the right-most column to fill any excess space. This will force other columns to be as narrow as they can be, while still fitting the contained code. We can represent this as follows:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; columnWidths ::</span> <span class="dt">Int</span> <span class="ot">→</span> [<span class="dt">Double</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> columnWidths n <span class="fu">=</span> replicate (n) <span class="dv">0</span> <span class="fu">++</span> [<span class="dv">1</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Where a value of <code>0</code> means 0% and <code>1</code> means 100%.</p>
<p>Finally, we define <code>removeClass</code>, a utility to remove a certain class from a <em><code>Block</code></em>. Pandoc defines the <code>literate</code> class on Literate Haskell code blocks, which puts the leading <code>&gt;</code> at the beginning of lines – obviously we only want this in the first column of the table, so we need to remove <code>literate</code> from the attributes of subsequent columns.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; removeClass ::</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">Attr</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> removeClass c (i, cs, kvs) <span class="fu">=</span> (i, delete c cs, kvs)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We are now ready to generate the actual tables. We begin by splitting the code into groups and making a table for each of those groups.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; codeTables ::</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">String</span> <span class="ot">→</span> [<span class="dt">Block</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> codeTables a <span class="fu">=</span> map (makeTable a) ∘ group</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>“Making a table” is itself a question of making a row for each line of code in the group, and wrapping that up in a Pandoc <em><code>Table</code></em> construct.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; makeTable ::</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">CodeGroup</span> <span class="ot">→</span> <span class="dt">Block</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> makeTable a (n, g) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> constructTable <span class="fu">$</span> map makeRow g <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   constructTable   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Table</span> [] (allLeft n) (columnWidths n) []</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>To make a row, then, we split the line up based on the tab delimiter, then wrap it in a <em><code>CodeBlock</code></em> constructor. <em><code>CodeBlock</code></em> expects a set of attributes, so we pass the attributes of the original <em><code>CodeBlock</code></em> unchanged in the first column, and then pass a version with the <code>literate</code> class removed for all other columns. Finally we wrap the whole thing in a list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeRow </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> map (<span class="fu">:</span>[]) ∘ zipWith (<span class="fu">$</span>) codeRow ∘ splitOn <span class="st">&quot;\t&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   codeRow </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> map <span class="dt">CodeBlock</span> <span class="fu">$</span> a<span class="fu">:</span>removeLiterates (repeat a)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   removeLiterates <span class="fu">=</span> map <span class="fu">$</span> removeClass <span class="st">&quot;literate&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And that’s it! Beautifully aligned code, using a proportional font.</p>
<h2 id="epilogue">Epilogue</h2>
<p>There are a couple of issues with using elastic tabstops on this website.</p>
<p>Firstly, while Nick Gravgaard has written plugins for a number of editors, neither of the editors I use regularly (vim and emacs) are supported. This is for the very good reason that they <em>can’t</em> be – both of them use characters as their fundamental building block in terms of layout, so you can’t modify the layout by an arbitrary number of pixels.</p>
<p>As a result, I use a monospaced font when editing the posts and insert the tabs as I think appropriate. To see how that will actually affect the layout, I have to open the page in the browser, which is somewhat inconvenient. As well as that, I have apparently-superfluous tabs all over my file!</p>
<p>I have found that I get pretty good results by setting the tabstop length to 1, and making tabs visible. That way I can use spaces to align as usual, but use a tab as the last “space”. This way it will look good in my editor but also on the site, and I can also see what’s going on thanks to the visible tabs.</p>
<p>Another issue is the way post previews come up in RSS feeds. The reader that I use, feedly, renders the tables representing my code quite badly – I end up with single-character columns with all the code written vertically! I think the solution to this is not to do the elastic tabstops transformation when generating the RSS feed, but I haven’t got around to this yet.</p>
<p>All in all, though, I’m pleased with the way it looks – and it’s a testament both to Haskell and to Pandoc’s design that it was so easy to add as a post-process to my site. There’s something lovely about the fact that the entry point to this entire blog post is a pure function with type <em><code>Pandoc</code></em> <code>→</code> <em><code>Pandoc</code></em>. No missiles being launched here!</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 5: Outdated URLs</title>
    <link href="http://dpwright.com/posts/2015/04/13/generating-this-website-part-5-outdated-urls/index.html" />
    <id>http://dpwright.com/posts/2015/04/13/generating-this-website-part-5-outdated-urls/index.html</id>
    <published>2015-04-13T07:57:17Z</published>
    <updated>2015-04-13T07:57:17Z</updated>
    <summary type="html"><![CDATA[<div class="info">13 April, 2015</div>



<div class="sidenote">
<p>This is part five of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>On February 1st, 2015, I decided to change the URL scheme for this site, such that instead of outputting pages to <code>post-name.html</code> it would output to <code>post-name/index.html</code>. Unfortunately, this breaks any existing links to the original pages that might be out there. This module keeps those links active by generating any posts prior to that date at the original URL.</p>
<h2 id="imports">Imports</h2>
<p>Let’s get the obvious out the way…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">OutdatedURLs</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll also import <em><code>Posts</code></em>, since for the most part we want to generate these posts exactly like their correctly-addressed counterparts.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, we import <code>Map</code> to look up metadata, and <code>Data.Time</code> so that we can check the dates. Note we hide <code>readTime</code> because we’re going to use the version from the <code>Posts</code> module.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time</span> <span class="kw">hiding</span> (readTime)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="setting-up-the-rules">Setting up the rules</h2>
<p>First we define the cut-off date, before which an old-style <code>.html</code> page will be created. This applies to any posts made prior to midnight, February 1st, 2015.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; cutoffDate ::</span> <span class="dt">UTCTime</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> cutoffDate <span class="fu">=</span> <span class="dt">UTCTime</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromGregorian <span class="dv">2015</span> <span class="dv">02</span> <span class="dv">01</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(secondsToDiffTime <span class="dv">0</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>Rules</code> managing these posts are similar to those for <a href="/posts/2014/09/29/generating-this-website-part-2-posts">standard <code>Posts</code></a>. We make use of the recently-added <code>matchMetadata</code> to compare the <code>date</code> field of the posts with our <code>cutoffDate</code>, and we tag the rule with the version “outdated” to avoid them showing up in the index. And of course we use <code>setExtension</code> rather than <code>simplifyURL</code>, since that’s the whole point of the exercise!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; outdatedURLs ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> outdatedURLs tags <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   matchMetadata <span class="st">&quot;posts/*&quot;</span> isOutdated ∘ version <span class="st">&quot;outdated&quot;</span> <span class="fu">$</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">do</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">route   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">metadataRoute dateAndTitle <span class="ot">`composeRoutes`</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">setExtension <span class="st">&quot;.html&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">compile </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">postCompiler tags</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     isOutdated </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> maybe <span class="dt">False</span> checkDate ∘ M.lookup <span class="st">&quot;date&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     checkDate  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> (<span class="fu">&gt;</span> <span class="dv">0</span>) ∘ diffUTCTime cutoffDate ∘ readTime</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="thats-it">That’s it!</h2>
<p>With just a small amount of effort, we’ve managed to completely change our URL scheme without breaking any old links. I wouldn’t want to make a habit of this sort of thing, but it’s good to know it can be resolved fairly easily should the need arise!</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>The Haskell gl package</title>
    <link href="http://dpwright.com/posts/2015/03/25/the-haskell-gl-package/index.html" />
    <id>http://dpwright.com/posts/2015/03/25/the-haskell-gl-package/index.html</id>
    <published>2015-03-25T08:41:23Z</published>
    <updated>2015-03-25T08:41:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">25 March, 2015</div>



<p>This post demonstrates how to get to a useful, working foundation for an OpenGL application using the recent <a href="https://hackage.haskell.org/package/gl"><code>gl</code> package</a> with the minimum of fuss. By the end of the post, this is what we’ll have:</p>
<center>
<img src="/posts/2015/03/25/getting-up-and-running-with-gl/spinningCube.gif" title="A spinning cube" />
</center>
<p>Which is to say:</p>
<ul>
<li>A window, created and managed by <a href="https://hackage.haskell.org/package/GLFW-b"><code>GLFW-b</code></a>.</li>
<li>A cube mesh, with positions, colours, normals, and <em>uv</em> co-ordinates.</li>
<li>A single directional light, calculated using the fragment shader.</li>
<li>A texture, alpha blended with the underlying colours.</li>
<li>Some very simple animation (the cube spins).</li>
</ul>
<p>When trying to get set up with OpenGL, I’ve found that while there are a lot of resources out there, I’ve often had to piece together various blog posts in order to get a working application that I can build off. Many of these blog posts also make use of immediate mode, which may be quick and easy to learn, but is quite outdated and ultimately sets you down the wrong path if you want to learn modern OpenGL programming. This post aims to give you a solid jumping-off point to start on the interesting stuff straight away.</p>
<p>As well as that, this post is an opportunity for me to try the <a href="https://hackage.haskell.org/package/gl">gl package</a>, introduced relatively recently by Edward Kmett and others. <code>gl</code> attempts to be a low-level but <em>complete</em> set of bindings to the OpenGL API – as opposed to the rather more longstanding <a href="https://hackage.haskell.org/package/OpenGL">OpenGL package</a>, which tries to be a bit more “Haskelly” but at the cost of certain missing parts of the OpenGL specification.</p>
<div class="sidenote">
<p><a href="https://hackage.haskell.org/package/OpenGL">OpenGL</a> is built on the <a href="https://hackage.haskell.org/package/OpenGLRaw">OpenGLRaw</a> package, which as the name implies is supposed to be a “raw” binding for OpenGL much as <a href="https://hackage.haskell.org/package/gl">gl</a> is. As I understand it, the problems with this package are as follows:</p>
<ul>
<li>It doesn’t work well as an “escape hatch” for the higher-level OpenGL package because many of the abstractions don’t translate between the two libraries.</li>
<li>It is not as complete as <a href="https://hackage.haskell.org/package/gl">gl</a> in terms of the number of extensions it supports.</li>
<li>Because it is part of the Haskell Platform, fixes to the above issues can take a year to make their way into the library.</li>
</ul>
<p>For more information about the reasons behind the creation of the <a href="https://hackage.haskell.org/package/gl">gl</a> package, <a href="https://www.youtube.com/watch?v=yFXzuCFeRGM&amp;t=1h36m55s">this video</a> makes for interesting viewing.</p>
</div>
<p>To me, though, the greatest advantage of the <a href="https://hackage.haskell.org/package/gl">gl</a> package is that <em>you can google it</em>. Because it is machine-generated from the actual OpenGL API, all the symbol names match, and you use them in the same way as you would in C. The <em>vast</em> majority of OpenGL tutorials on the internet are written in C or C++, so having a common vocabulary with them is immensely useful.</p>
<h2 id="setting-up-the-project">Setting up the project</h2>
<p>In case you want to follow along, here is the relevant part of my cabal file:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="cabal"><code>executable glTutorial</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>  main-is: 2015-03-25-the-haskell-gl-package.lhs</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="cabal"><code>  build-depends:    </code></pre></td>
<td align="left"><pre class="cabal"><code>base                 </code></pre></td>
<td align="left"><pre class="cabal"><code>&gt;= 4.7 &amp;&amp; &lt;4.8,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>base-unicode-symbols</code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.2.2.4,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>transformers         </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.4.3.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>vector               </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.10.12.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>text                 </code></pre></td>
<td align="left"><pre class="cabal"><code>== 1.2.0.3,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>gl                   </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.7.2.4,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>GLFW-b               </code></pre></td>
<td align="left"><pre class="cabal"><code>== 1.4.7.1,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>linear               </code></pre></td>
<td align="left"><pre class="cabal"><code>== 1.18.0.1,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>distributive         </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.4.4,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>lens                 </code></pre></td>
<td align="left"><pre class="cabal"><code>== 4.6.0.1,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>JuicyPixels          </code></pre></td>
<td align="left"><pre class="cabal"><code>== 3.2.3</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>  default-language: </code></pre></td>
<td align="left"><pre class="cabal"><code>Haskell2010</code></pre></td>
<td align="left"><pre class="cabal"><code></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>I am including absolute version numbers here so that you can see exactly what I was working with, but you could probably be a lot more lenient with your own projects.</p>
<p>This post is a literate Haskell file – lines preceded by <code>&gt;</code> are executable code, so you should be able to run and test the file directly.</p>
<h2 id="breakdown-of-tasks">Breakdown of tasks</h2>
<p>This post is, by necessity, quite long. There is a lot that needs to be set up in order to get a spinning cube on the screen! This is basically how I’ve started every games/graphics project I’ve done in the last ten years, and <em>every time</em> I spend the majority of my time staring into the abyss of a bright pink window with nothing rendering in it, wondering which trivial step I’ve forgotten in my initial setup which is <strong>breaking everything</strong>. By collecting all the steps together in this one, massive blog post, I hope to save others (as well as my future self) from this pain.</p>
<p>To help navigate, here’s a breakdown of what we’re going to be doing:</p>
<ul>
<li><a href="#preliminaries">Set up language pragmas / import the required modules</a></li>
<li><a href="#error-handling-utilities">Set up some handy error handling utilities</a></li>
<li><a href="#setting-up-the-window">Create a window and associate it with our GL context</a></li>
<li><a href="#constructing-our-cube-mesh">Define the mesh for our cube</a></li>
<li><a href="#resource-loading">Load Resources:</a>
<ul>
<li><a href="#load-texture">Load in the texture and upload it to the GPU</a></li>
<li><a href="#load-shader">Compile and link the shader, and retrieve its uniform and attribute locations</a></li>
<li><a href="#load-mesh">Convert our mesh definition to GL buffer objects</a></li>
</ul></li>
<li><a href="#setting-up-gl">Initialise OpenGL</a></li>
<li><a href="#handling-state">Update state every frame to rotate the cube</a></li>
<li><a href="#actually-drawing-things">Actually render the scene</a></li>
<li><a href="#resource-cleanup">Cleanup</a></li>
</ul>
<p>Let’s get started!</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>We start with language pragmas. We will overload both string and list syntax to provide us with convenient access to Haskell’s faster <code>Text</code> and <code>Vector</code> containers.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedLists #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The gl package makes quite heavy use of pattern synonyms to reproduce GL’s native enums.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE PatternSynonyms #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’m also going to make use of Unicode symbols in this file.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Obviously we’ll begin by importing the <code>Graphics.GL</code> namespace exposed by the <code>gl</code> package. This package follows the GL C API convention of prefixing its function names with <code>gl</code>, so I won’t bother with a qualified import; for all other modules I will either import them qualified or explicitly name the imported symbols, so that you can see where they’re coming from.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.GL</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>To make things easier, I’m going to make use of GLFW to deal with opening the window and getting keypresses. This will allow us to concentrate on the GL side of things.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Graphics.UI.GLFW</span> <span class="kw">as</span> <span class="dt">GLFW</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Edward Kmett’s <a href="https://hackage.haskell.org/package/linear">linear</a> library is a nice, flexible library for vector and matrix maths, and the <em><code>Storable</code></em> instances it supplies for everything make it a good fit for working with GL.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Linear</span> (</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V2</span>(<span class="fu">..</span>), <span class="dt">V3</span>(<span class="fu">..</span>), <span class="dt">M44</span>, <span class="dt">Quaternion</span>,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">perspective, lookAt, axisAngle,</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">mkTransformation, (<span class="fu">!*!</span>), inv33,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">column, _xyz, negated, identity)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The following two functions also come in handy when working with Linear. <code>distribute</code> gives you the transpose of a matrix, and <code>(^.)</code> will give you access to certain fields which are expressed as lenses.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Distributive</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(distribute)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Lens</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">^.</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’m going to use the <a href="https://hackage.haskell.org/package/JuicyPixels">JuicyPixels</a> library for loading texture data.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Codec.Picture</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(readPng, <span class="dt">Image</span>(<span class="dt">Image</span>),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">DynamicImage</span>(<span class="dt">ImageRGBA8</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>After this we import some standard libraries which we’ll be making use of later.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">void, when, unless, liftM2)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="fu">&lt;$&gt;</span>), (<span class="fu">&lt;*&gt;</span>), pure)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.IO</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">hSetBuffering, stdout,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">BufferMode</span>(<span class="dt">LineBuffering</span>))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.IORef</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IORef</span>, newIORef,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">writeIORef, readIORef)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Bits</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="fu">.|.</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll be working with strings a little bit to load our shaders and send them into GL, so we’ll need <code>Data.Text</code> and the <code>Data.Text.Foreign</code> utilities for communicating with C. We’ll also include <code>Data.Vector</code> while we’re at it.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.IO</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.Foreign</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Vector</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">V</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Because <code>gl</code> works at quite a low level, you have to do quite a lot of marshalling between Haskell and C. Haskell provides a number of convenient utilities for doing this within the <em><code>Foreign</code></em> hierarchy. <code>Data.Vector.Storable</code> also gives us a directly serializable form of <em><code>Vector</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Vector.Storable</span> <span class="kw">as</span> <span class="dt">SV</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Marshal.Alloc</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(alloca, allocaBytes)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Marshal.Array</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(allocaArray, peekArray)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Marshal.Utils</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(with)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Storable</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(peek, sizeOf)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Ptr</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Ptr</span>, nullPtr, castPtr, wordPtrToPtr)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, some monad transformers which will ease some of the boilerplate.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Trans.Maybe</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">MaybeT</span>(<span class="fu">..</span>))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Trans.Cont</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">ContT</span>(<span class="fu">..</span>), evalContT)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Trans.Class</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(lift)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(liftIO)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="error-handling-utilities">Error-handling utilities</h2>
<p>I don’t actually make use of these functions anywhere within this post, but you can bet I used them while I was writing it! Debugging graphical issues can be extremely frustrating as the GPU doesn’t have anything akin to a <code>printf</code>, and GL itself is basically a gigantic state machine where subtle mistakes can lead to strange errors down the line. Sometimes it can be useful to take a scattergun approach and just sprinkle error-checking facilities throughout your code in the hope of getting a clue as to what might be the problem. These functions help you do that.</p>
<p>First, <code>getErrors</code> collects all the errors GL is currently reporting. Since GL allows certain operations to be performed concurrently, it holds multiple error registers, and a single call to <code>glGetError</code> just gives you the value from one of them. Here, we keep calling it until there are no errors left, at which point we return all the available errors as a list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; getErrors ::</span> <span class="dt">IO</span> [<span class="dt">GLuint</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> getErrors <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   err <span class="ot">←</span> glGetError</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">if</span> err <span class="fu">==</span> <span class="dt">GL_NO_ERROR</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      <span class="kw">then</span> return []</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      <span class="kw">else</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        errs <span class="ot">←</span> getErrors</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        return <span class="fu">$</span> err<span class="fu">:</span>errs</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The errors themselves are, like most things in GL, just a <code>GLuint</code> that maps to some enumerated value. <a href="https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetError.xml">The documentation for <code>glGetError</code></a> gives us a clue as to what values might be returned, so we can use that to convert the errors to a more useful <em><code>String</code></em> value.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; showError ::</span> <span class="dt">GLuint</span> <span class="ot">→</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_ENUM</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_ENUM&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_VALUE</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_VALUE&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_OPERATION</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_OPERATION&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_FRAMEBUFFER_OPERATION</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_FRAMEBUFFER_OPERATION&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_OUT_OF_MEMORY</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_OUT_OF_MEMORY&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_STACK_UNDERFLOW</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_STACK_UNDERFLOW&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_STACK_OVERFLOW</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_STACK_OVERFLOW&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError x <span class="fu">=</span> <span class="st">&quot;GL Error &quot;</span> <span class="fu">++</span> show x</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, <code>printErrors</code> is the function we’ll actually use. It uses the above two functions to collect the errors and output them. I found it useful just to crash straight away at these point, so I report the errors using <code>error</code>. If you wanted to try and continue despite the errors you could use <code>putStrLn</code> instead.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; printErrors ::</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> printErrors prefix <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   es <span class="ot">←</span> map showError <span class="fu">&lt;$&gt;</span> getErrors</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   when (not <span class="fu">$</span> null es) <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     error (prefix <span class="fu">++</span> <span class="st">&quot;: &quot;</span> <span class="fu">++</span> show es)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note the <code>prefix</code> parameter, which just lets you put in a little string describing where in the code the error occurred. Armed with this function, you can scatter error checks all over the place to help narrow down the cause of a problem to specific regions of code.</p>
<h2 id="setting-up-the-window">Setting up the window</h2>
<p>The <code>main</code> function of our application begins by setting up the window using GLFW and binding it to our current GL context. Once that’s done, it can hand off to our initialisation and main loop to do the bulk of the work.</p>
<p>Because I want to keep the distinction between GLFW and OpenGL quite strong, I’ve chosen not to mix them up in this post. This section, which deals with window setup and initialisation, uses GLFW exclusively and makes no direct GL calls at all. Once this section is over, we won’t touch GLFW again and it will be pure GL from then on.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   hSetBuffering stdout <span class="dt">LineBuffering</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Not strictly necessary, but I begin here by setting <code>stdout</code> to use LineBuffering. This means any output will be flushed on every newline, which can be invaluable for debugging.</p>
<p>Next, we need to initialise GLFW.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   success <span class="ot">←</span> GLFW.init</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">if</span> not success</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">then</span> void <span class="fu">$</span> putStrLn <span class="st">&quot;Failed to initialise GLFW&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">else</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If GLFW won’t initialise we might as well give up, otherwise we can continue on into our program.</p>
<p>We need to provide GLFW with some hints to tell it how to set up the window. These will vary depending on the architecture you want to support.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     mapM_ GLFW.windowHint</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       [ <span class="dt">GLFW.WindowHint&#39;ClientAPI</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">GLFW.ClientAPI&#39;OpenGL</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;OpenGLProfile</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">GLFW.OpenGLProfile&#39;Core</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;OpenGLForwardCompat</span> <span class="dt">True</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;ContextVersionMajor</span> <span class="dv">3</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;ContextVersionMinor</span> <span class="dv">2</span> ]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’ve rather arbitrarily opted for OpenGL 3.2 here, which is not outrageously out-of-date but is still widely supported. More information about the available window hints can be found in the <a href="http://www.glfw.org/docs/latest/window.html#window_hints">GLFW documentation</a>.</p>
<p>We’re now ready to make the window. Again, it’s possible this may fail, so we’ll just drop out with an error if that happens.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     w <span class="ot">←</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">GLFW.createWindow <span class="dv">480</span> <span class="dv">320</span> <span class="st">&quot;Haskell GL&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Nothing</span> <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">case</span> w <span class="kw">of</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="dt">Nothing</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> putStrLn <span class="st">&quot;Failed to create window&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="dt">Just</span> win </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>OK, we have a window! First things first, let’s associate the current GL context with this window so that any GL calls we make from now on will apply to it.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.makeContextCurrent w</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The next step is to hook into GLFW’s callbacks. In reality, I don’t think the GLFW design of responding to callbacks fits the Haskell mindset very well as you necessarily have to have callbacks modify some sort of global state, but since we’re using GLFW we’re stuck with it. For a serious game project I would probably just do the window handling myself and take a different approach.</p>
<p>So, we start off by setting up handling of the “close” button. We create an <code>IORef</code> to tell us whether the window has been closed, which we set to <code>True</code> when the close button is pressed. That way we can check at any time during our game loop whether we need to shut down. We could also close the window on a keypress simply by setting the same <code>IORef</code> value. It’s quick and dirty, but it works:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         closed <span class="ot">←</span> newIORef <span class="dt">False</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.setWindowCloseCallback win <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">Just</span> (const <span class="fu">$</span> writeIORef closed <span class="dt">True</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll also want to hook into GLFW’s <code>WindowSizeCallback</code> to avoid our image getting stretched when we resize the window. Again, we’ll make use of an <code>IORef</code> to store the calculated projection matrix so that we can access it from the render loop. We’ll cover <code>calculateProjectionMatrix</code> later; for now on just assume it’s a function which takes a tuple of <code>(width, height)</code> and returns the projection matrix we need for that aspect ratio.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         dims <span class="ot">←</span> GLFW.getWindowSize win</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         projectionMatrix <span class="ot">←</span> newIORef <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           calculateProjectionMatrix dims</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll look into the details of what <code>resize</code> does later, but for now we just tell GLFW to call it when the window is resized. Since I don’t want to have any GLFW-specific code in the main portion of this demo, I drop the <code>GLFW.Window</code> parameter using <code>const</code> (I actually did the same for the <code>WindowCloseCallback</code> above, too).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.setWindowSizeCallback win <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">Just</span> (const <span class="fu">$</span> resize projectionMatrix)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Let’s also make a quick helper function which swaps the draw buffers for the current window, so we don’t have to expose <code>win</code> to the rest of the program. We also put in a call to <code>GLFW.pollEvents</code> while we’re at it, so that window events and keypresses (if there were any) are handled properly.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         <span class="kw">let</span> swapper <span class="fu">=</span> GLFW.swapBuffers win ≫ GLFW.pollEvents</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>That pretty much covers it for GLFW’s setup – we’re now ready to initialise and run our demo. We’ll have our main function just drop out when it’s done, so we can terminate once it’s complete.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         initialise ≫<span class="fu">=</span> runDemo closed projectionMatrix swapper</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.terminate</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>One last thing before I leave GLFW aside entirely – I’ll want to be able to access the time delta within my main loop. GLFW provides us with a convenient way to query this in a platform-agnostic manner.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; getDeltaTime ::</span> <span class="dt">IO</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> getDeltaTime <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   t <span class="ot">←</span> GLFW.getTime</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   GLFW.setTime <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   return <span class="fu">$</span> maybe <span class="dv">0</span> (fromRational ∘ toRational) t</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This very simple implementation obviously assumes we will only be querying the delta time once per frame.</p>
<p>We now have a window set up and all the platform-specific stuff we might want handled. There’s just one more thing we need to get out of the way before we can begin looking at the actual GL side of things and the <code>gl</code> package in particular.</p>
<h2 id="constructing-our-cube-mesh">Constructing our cube mesh</h2>
<p>We’re going to construct our mesh in code to avoid having to worry about model formats and so forth. This section has little to do with actual GL code, so if you’re keen to see the <code>gl</code> library in action you can safely skip it.</p>
<p>A mesh can be thought of as simply a collection of vertex data, and a set of indices into that data. For this demo, the information we need about each vertex is:</p>
<ol style="list-style-type: decimal">
<li>Its position relative to the model</li>
<li>Its colour</li>
<li>Its texture co-ordinates (Called <em>UV Co-ordinates</em>)</li>
<li>Its normal vector</li>
</ol>
<p>We can store these in a structure with a <code>Vector</code> for each piece of data, along with an index <code>Vector</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MeshSpec</span> <span class="fu">=</span> <span class="dt">MeshSpec</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { specPositions </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specColours   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specNormals   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specUVs       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V2</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specIndices   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">GLuint</span>, <span class="dt">GLuint</span>, <span class="dt">GLuint</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’re going to be defining a lot of these values all at once. Unfortunately, this starts to look pretty ugly in Haskell because negative numbers have to be wrapped in brackets, so that the vector <span class="math">\((0, -1, 0)\)</span> is expressed <code>V3 0 (-1) 0</code>. To try and ease the pain here, let’s define an alternate constructor for <em><code>V3</code></em> values which takes a tuple instead of three parameters.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; v3 ::</span> (a, a, a) <span class="ot">→</span> <span class="dt">V3</span> a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> v3 (x, y, z) <span class="fu">=</span> <span class="dt">V3</span> x y z</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This allows us to define a function to generate a cuboid of any dimension. The function will take the dimensions of the cuboid and fill a <em><code>MeshSpec</code></em> with the required data.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; cuboid ::</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">MeshSpec</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> cuboid l&#39; h&#39; d&#39; <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="dt">MeshSpec</span> positions colours normals uvs indices <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     l <span class="fu">=</span> l&#39; <span class="fu">*</span> <span class="fl">0.5</span>; d <span class="fu">=</span> d&#39; <span class="fu">*</span> <span class="fl">0.5</span>; h <span class="fu">=</span> h&#39; <span class="fu">*</span> <span class="fl">0.5</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I named my input parameters <code>l'</code>, <code>h'</code>, and <code>d'</code> because although I take the length, height, and depth as input, I generally want to use these values halved, so that I can treat them as an offset from the origin in the centre of the cuboid. These halved values, then, I give the more accessible names of <code>l</code>, <code>h</code>, and <code>d</code>. Here’s how I use them to define a quad for each face of the cube:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     positions <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       [v3 ( l, h, d), v3 ( l,<span class="fu">-</span>h, d), v3 ( l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 ( l, h,<span class="fu">-</span>d),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 ( l, h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l, h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l, h, d), v3 ( l, h, d),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 (<span class="fu">-</span>l, h, d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h, d), v3 ( l,<span class="fu">-</span>h, d), v3 ( l, h, d),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 (<span class="fu">-</span>l, h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h, d), v3 (<span class="fu">-</span>l, h, d),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 ( l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 ( l,<span class="fu">-</span>h, d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h, d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h,<span class="fu">-</span>d),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 ( l, h,<span class="fu">-</span>d), v3 ( l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l, h,<span class="fu">-</span>d)]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Each line here is a single face: The right, top, front, left, bottom and back faces respectively. I’m going to colour them so that the <span class="math">\((r, g, b)\)</span> values are mapped to the (normalised) <span class="math">\((x, y, z)\)</span> values. So the left, bottom, back point <span class="math">\((-l, -h, -d)\)</span> is black, the right, bottom, back point <span class="math">\((l, -h, -d)\)</span> is red, the right, top, front point <span class="math">\((l, h, d)\)</span> is white… and so forth. This can be done by saying that for a particular point <span class="math">\((x, y, z)\)</span> its RGB value can be calculated thus:</p>
<p><span class="math">\[
\left(\frac{x + l}{l&#39;}, \frac{y + h}{h&#39;}, \frac{z + d}{d&#39;}\right)
\]</span></p>
<p>This can be expressed quite succinctly in Haskell.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     colours <span class="fu">=</span> V.map ((<span class="fu">/</span> <span class="dt">V3</span> l&#39; h&#39; d&#39;) ∘ (<span class="fu">+</span> <span class="dt">V3</span> l h d)) positions</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>For the normals, we can simply take the normal vector for each axis, and the negations of those vectors. Since each face is composed of four vertices, and we want to share the same normal vector across the face, we replicate each normal four times – one for each vertex.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     normals <span class="fu">=</span> V.concat ∘ map (V.replicate <span class="dv">4</span>) <span class="fu">$</span> ns <span class="fu">++</span> negated ns</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="kw">where</span> ns <span class="fu">=</span> [<span class="dt">V3</span> <span class="dv">1</span> <span class="dv">0</span> <span class="dv">0</span>, <span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>, <span class="dt">V3</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The texture co-ordinates for this shape are quite simple – they simply stretch from <span class="math">\((0, 0)\)</span> in the bottom-left corner to <span class="math">\((1, 1)\)</span> in the top-right. We want the same set of co-ordinates across each face, which again we can do using <code>replicate</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     uvs <span class="fu">=</span> V.concat ∘ replicate <span class="dv">6</span> <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       [<span class="dt">V2</span> <span class="dv">0</span> <span class="dv">0</span>, <span class="dt">V2</span> <span class="dv">0</span> <span class="dv">1</span>, <span class="dt">V2</span> <span class="dv">1</span> <span class="dv">1</span>, <span class="dt">V2</span> <span class="dv">1</span> <span class="dv">0</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally we set up the indices for our shape. The quads we defined in <code>positions</code> above follow a regular pattern: <span class="math">\((0, 1, 2, 3)\)</span>, <span class="math">\((4, 5, 6, 7)\)</span>… essentially we just make a 4-tuple of incrementing numbers from an offset of <span class="math">\(faceIndex \times 4\)</span>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     indices <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       quads ∘ V.zipWith forFace [<span class="dv">0</span><span class="fu">..</span>] ∘ V.replicate <span class="dv">6</span> <span class="fu">$</span> (<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">forFace i (a, b, c, d) <span class="fu">=</span> (a <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>, b <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>, c <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>, d <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>OpenGL doesn’t work with quads, though, it uses triangles. The <code>quads</code> function we just used takes the quads and splits them up into triangles.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">quads                    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">V.concatMap triangulate</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">triangulate (a, b, c, d) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[(a, b, c), (c, d, a)]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>…and that gives us the <em><code>MeshSpec</code></em> for our cube!</p>
<p>Considering each of these sets of vertex data separately is convenient when constructing the mesh, especially when you’re hard-coding like I did here. You’ll get better performance, though, if you combine them into a single, interleaved array (at least if you’re not deforming or otherwise modifying the mesh). This would just be a flat stream of <em><code>GLfloat</code></em>s, like this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>  x1, y1, z1, r1, g1, b1, nx1, ny1, nz1, u1, v1, x2, y2, z2, r2, g2...</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The indices are also represented as a flat list, an unpacked version of the tuple representation we use in <em><code>MeshSpec</code></em> above. The following type gives a representation closer to what we’d like to feed to GL.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MeshData</span> <span class="fu">=</span> <span class="dt">MeshData</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { vertexData </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">V.Vector</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , indexData  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">V.Vector</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Unpacking the indices to fit into the above structure is reasonably simple.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> unpackIndices </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">GLuint</span>, <span class="dt">GLuint</span>, <span class="dt">GLuint</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> unpackIndices <span class="fu">=</span> V.concatMap unpack</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> unpack (a, b, c) <span class="fu">=</span> [a, b, c]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Interleaving the vertex data isn’t too much harder thanks to <code>zipWith4</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> interleave </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V2</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> interleave positions colours normals uvs <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   V.foldr (<span class="fu">V.++</span>) V.empty <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     V.zipWith4 combine positions colours normals uvs</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">combine (<span class="dt">V3</span> x y z) (<span class="dt">V3</span> r g b) (<span class="dt">V3</span> nx ny nz) (<span class="dt">V2</span> u v) <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  [x, y, z, r, g, b, nx, ny, nz, u, v]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>Be careful here, as by interleaving the vertex streams into a single array of <em><code>GLfloats</code></em> you are, of course, leaving type safety behind you. When writing this post, I had a bug where my lighting looked all wrong. It turned out I had put the normals and the <em>uv</em> co-ordinates in the wrong order in my <code>combine</code> function – a fact that would have been caught by the typechecker straight away!</p>
</div>
<p>Now we can use these functions to convert from a <em><code>MeshSpec</code></em> to a <em><code>MeshData</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; fromMeshSpec ::</span> <span class="dt">MeshSpec</span> <span class="ot">→</span> <span class="dt">MeshData</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> fromMeshSpec spec <span class="fu">=</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="dt">MeshData</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(interleave      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specPositions spec)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specColours spec)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specNormals spec)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specUVs spec))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(unpackIndices <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> specIndices spec)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This gets us from an easy-to-define “mesh specification” to the raw data that we’d like to give to GL. Here, we’ve defined the mesh in code, but you could just as well load the data from a file and read it into <em><code>MeshData</code></em> directly if you wanted.</p>
<h2 id="resource-loading">Resource loading</h2>
<p>OK, our basic setup is complete, it’s time to get down and dirty with OpenGL! First we need to load and prepare our resources.</p>
<p>Our aim here is to get a textured, spinning cube on the screen using modern OpenGL. To that end, the very least we will need is the texture, a shader program to do the rendering, and of course the mesh itself. Let’s define some datatypes to store these in.</p>
<p>First, the mesh. We use a <em>Vertex Array Object</em> to do the rendering, which contains references to all the data making up the mesh as well as settings describing the layout of the data (which parts of the stream to bind to which attributes in the shader).</p>
<p>The data itself is stored in <em>Vertex Buffer Objects</em>, which I have named <code>VBO</code> for the vertices and <code>IBO</code> for the indices. we bind these into the Vertex Array Object, so we don’t actually need them for rendering, but we keep hold of them for cleanup later.</p>
<p>More information on Vertex Buffer Objects and Vertex Array Objects can be found on the <a href="https://www.opengl.org/wiki/Vertex_Specification">OpenGL wiki</a>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Mesh</span> <span class="fu">=</span> <span class="dt">Mesh</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { meshVBO        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , meshIBO        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , meshVAO        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , meshIndexCount </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLsizei</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>For the shader, We want the ID for the shader program, and alongside that we’ll store the locations of all the constants and attributes. These will be different per-shader, but since in this case we only have one shader we can just assume they’ll always be the same.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Shader</span> <span class="fu">=</span> <span class="dt">Shader</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { shaderProgram   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , positions       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , colours         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , normals         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , uvs             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , pvmMatrix       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , viewModelMatrix </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , normalMatrix    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , diffuseColour   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , ambientColour   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specularColour  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , shininess       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , lightDirection  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , diffuseMap      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This represents all the data we need to send to our shader. Note that contained within this structure are not the actual <em>values</em> (the positions, colours, matrices, etc), but the <em>location at which the values are stored</em> in the shader program. We’ll use these locations to set the values when we draw.</p>
<p>Finally, there’s the texture, which is simple – just the ID GL uses to refer to the texture is enough.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">type</span> <span class="dt">TextureID</span> <span class="fu">=</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Packaging these two structures together , we create a <em><code>Resources</code></em> type representing all the resources this demo requires.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Resources</span> <span class="fu">=</span> <span class="dt">Resources</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { mesh    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Mesh</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , texture </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">TextureID</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , shader  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Shader</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The job of our Initialise function, then, will be to load these resources and initialise them ready for use by GL. Loading and preparing resources for usage by GL may fail at any point, so I’m going to wrap the entire process in the <em><code>MaybeT</code></em> monad transformer so it drops out early on failure.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; initialise ::</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">Resources</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> initialise <span class="fu">=</span> runMaybeT <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>For a more complex application, <em><code>EitherT</code></em>/<em><code>ErrorT</code></em> might be a better choice so that we can report <em>what</em> failed.</p>
</div>
<h3 id="load-texture">
Loading the texture
</h3>
<p>First let’s set up the texture. Here’s the texture we’re going to use; you can download it if you’re following along.</p>
<center>
<img src="/posts/2015/03/25/getting-up-and-running-with-gl/haskell.png" title="The Haskell logo" />
</center>
<p>Loading the data is very simple. As it happens, I know that this image is an <code>ImageRGBA8</code>, so that’s all I’m going to handle – in reality you may need to handle various pixel formats depending on your input data.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   png <span class="ot">←</span> liftIO <span class="fu">$</span> readPng <span class="st">&quot;haskell.png&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   (<span class="dt">Image</span> texWidth texHeight texData) <span class="ot">←</span> <span class="dt">MaybeT</span> <span class="fu">$</span> <span class="kw">case</span> png <span class="kw">of</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     (<span class="dt">Right</span> (<span class="dt">ImageRGBA8</span> i)) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> return <span class="fu">$</span> <span class="dt">Just</span> i</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     (<span class="dt">Left</span> s)               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> liftIO (print s) ≫ return <span class="dt">Nothing</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     _                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> return <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We now have the raw pixel buffer data for the texture. All that remains is to pass it to GL. First we generate the texture name which we’ll use to refer to it (although GL calls these “names”, it is just a <code>GLuint</code> ID, really).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   textureID <span class="ot">←</span> liftIO ∘ alloca <span class="fu">$</span> \texIDPtr <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGenTextures <span class="dv">1</span> texIDPtr</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     peek texIDPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The idiom of allocating a temporary variable, passing it to GL to be filled, and then returning the filled value doesn’t feel very “Haskelly”, but it is exactly what GL expects. It means that when following along with a GL tutorial intended for C, you can pretty much switch the syntax and the examples will all work.</p>
<p>Writing out these three lines does get old pretty fast though, so let’s define a utility function which simplifies it. The following function assumes that the variable to be filled is the last one passed to the function.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> fillWith f <span class="fu">=</span> liftIO ∘ alloca <span class="fu">$</span> liftM2 (≫) f peek</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we have the texture name we can use it to bind and set up the texture. We use <code>unsafeWith</code> to get access to the raw pixel data from the <code>Vector</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindTexture   <span class="dt">GL_TEXTURE_2D</span> textureID</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> (w, h) <span class="fu">=</span> (fromIntegral texWidth, fromIntegral texHeight)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO ∘ SV.unsafeWith texData <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glTexImage2D <span class="dt">GL_TEXTURE_2D</span> <span class="dv">0</span> <span class="dt">GL_RGBA</span> w h <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="dt">GL_RGBA</span> <span class="dt">GL_UNSIGNED_BYTE</span> ∘ castPtr</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_MAG_FILTER</span> <span class="dt">GL_LINEAR</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_MIN_FILTER</span> <span class="dt">GL_LINEAR</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_WRAP_S</span> <span class="dt">GL_CLAMP_TO_EDGE</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_WRAP_T</span> <span class="dt">GL_CLAMP_TO_EDGE</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>Why is <code>unsafeWith</code> unsafe? Because it gives you a pointer to the underlying memory the <em><code>Vector</code></em> is pointing to. This is potentially unsafe because the C function you pass it to could hold onto this pointer and modify it at any time, breaking referential transparency. Stored pointers like this are also not tracked by the garbage collector, so if you hold onto it and try to use it after the original <em><code>Vector</code></em> has gone out of scope the garbage collector may already have cleaned it up.</p>
<p>In this case, we know that <code>glTexImage2D</code> will upload the data to the GPU without modifying it, meaning that neither of these issues should concern us, so it is safe to use.</p>
</div>
<h3 id="load-shader">
Loading the shaders
</h3>
<p>Next up are the shaders. The shader code itself is included <a href="#appendix-shader-code">at the end of this post</a>; For now let’s just assume they are loaded into <code>vertexShader.glsl</code> and <code>fragmentShader.glsl</code> respectively.</p>
<p>Loading and compiling the two shaders is basically identical, so let’s create a utility function to help us.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> loadAndCompileShader </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GLenum</span> <span class="ot">→</span> FilePath</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">GLuint</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       loadAndCompileShader shaderType filename <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>First we request GL to create a shader object for us.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         shaderID <span class="ot">←</span> glCreateShader shaderType</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>After that we load the shader file and bind its contents to our new shader object. <code>glShaderSource</code> is looking for an array of C-style strings, or in other words a pointer to a pointer of <em><code>GLchar</code></em>, expressed in C as <code>const GLchar**</code>. This is where working at such a low level starts to get a bit fiddly in Haskell – you can certainly do it, but it’s not quite as succinct as it would be in C.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         shaderCode <span class="ot">←</span> T.readFile filename</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         T.withCStringLen shaderCode <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           \(str, len) <span class="ot">→</span> with str <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             \strPtr <span class="ot">→</span> with (fromIntegral len) <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               \lenPtr <span class="ot">→</span> glShaderSource shaderID <span class="dv">1</span> strPtr lenPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Compare the four lines starting <code>T.withCStringLen</code> with the C equivalent:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">    glShaderSource(shaderID, <span class="dv">1</span>, &amp;shaderCode, NULL);</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Admittedly this isn’t an entirely fair comparison – it assumes <code>NULL</code>-terminated strings which we weren’t using in Haskell, and of course the file loading directly preceding it would have been more arduous in C. Still, the point stands that what is a simple operator in C (<code>&amp;</code>) requires a call to <code>with</code> and a lambda function in Haskell.</p>
<div class="sidenote">
<p>Fortunately, Haskell offers a number of techniques for abstracting some of this awkwardness. One of these is the <em><code>ContT</code></em> monad, which allows you to take a series of nested callback functions such as the one above and transform it into a monad, which can be expressed very readably using <code>do</code>-notation.</p>
<p>Here’s how the above code looks using <em><code>ContT</code></em>:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    evalContT <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      (str, len) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> <span class="dt">ContT</span> (T.withCStringLen shaderCode)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      strPtr     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> <span class="dt">ContT</span> (with str)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      lenPtr     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> <span class="dt">ContT</span> (with <span class="fu">$</span> fromIntegral len)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      liftIO <span class="fu">$</span> glShaderSource shaderID <span class="dv">1</span> strPtr lenPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Given this, you could imagine that with a bit of effort and applicative notation, it might be possible to get something like,</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    glShaderSource shaderID <span class="dv">1</span> <span class="fu">&lt;$&gt;</span> str <span class="fu">&lt;*&gt;</span> len</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>which isn’t so far from the C after all!</p>
</div>
<p>Anyway, now that the shader’s loaded into memory, our utility function can compile it and check that compilation succeeded.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         glCompileShader shaderID</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         compileStatus <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           glGetShaderiv shaderID <span class="dt">GL_COMPILE_STATUS</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If compilation failed, we output the info log to tell us what happened. We have to do a little bit of marshalling between C and Haskell datatypes to access the log as a <em><code>Text</code></em> object for printing.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         when (compileStatus <span class="fu">==</span> <span class="dt">GL_FALSE</span>) <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           infoLogLength <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             glGetShaderiv shaderID <span class="dt">GL_INFO_LOG_LENGTH</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="kw">let</span> infoLogLength&#39; <span class="fu">=</span> fromIntegral infoLogLength</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           allocaBytes infoLogLength&#39; <span class="fu">$</span> \infoBuffer <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               glGetShaderInfoLog </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">shaderID infoLogLength</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">nullPtr infoBuffer</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               T.putStr <span class="fu">=</span>≪ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.peekCStringLen (</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">infoBuffer,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">infoLogLength&#39;)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Having done that, we can return the ID of our compiled shader object if compilation was successful, or <em><code>Nothing</code></em> otherwise.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         return <span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">if</span> compileStatus <span class="fu">==</span> <span class="dt">GL_TRUE</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">then</span> <span class="dt">Just</span> shaderID <span class="kw">else</span> <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Our helper function complete, let’s use it to load the vertex and fragment shaders. We wrap the calls to <code>loadAndCompileShader</code> in <em><code>MaybeT</code></em> so that this function will drop out automatically if either of them fail.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   vs </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MaybeT</span> <span class="fu">$</span> loadAndCompileShader</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="dt">GL_VERTEX_SHADER</span> <span class="st">&quot;vertexShader.glsl&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fs </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MaybeT</span> <span class="fu">$</span> loadAndCompileShader</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="dt">GL_FRAGMENT_SHADER</span> <span class="st">&quot;fragmentShader.glsl&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we need to generate our shader program and link the two shader objects into it.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   programID <span class="ot">←</span> glCreateProgram</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glAttachShader programID vs</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glAttachShader programID fs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glLinkProgram  programID</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   linkStatus <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGetProgramiv programID <span class="dt">GL_LINK_STATUS</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here again we output the log and drop out of the initialisation with <em><code>Nothing</code></em> if <code>linkStatus</code> is <code>GL_FALSE</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   when (linkStatus <span class="fu">==</span> <span class="dt">GL_FALSE</span>) ∘ <span class="dt">MaybeT</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     infoLogLength <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       glGetProgramiv programID <span class="dt">GL_INFO_LOG_LENGTH</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">let</span> infoLogLength&#39; <span class="fu">=</span> fromIntegral infoLogLength</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     allocaBytes infoLogLength&#39; <span class="fu">$</span> \infoBuffer <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       glGetProgramInfoLog </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">programID infoLogLength</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">nullPtr infoBuffer</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       T.putStr <span class="fu">=</span>≪ T.peekCStringLen (infoBuffer, infoLogLength&#39;)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     return <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Having linked the shader program, we can throw away the individual shader objects that went into it, which will make cleaning up later easier.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDeleteShader vs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDeleteShader fs</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We now know that we have a valid, correctly linked program identified by <code>programID</code>. We can query this for the locations of its attributes and constants which we’ll use to set their values later.</p>
<p>To ease the marshalling between Haskell and C I’m going to define a couple of helper functions here. The first, <code>unsign</code>, takes the C idiom of returning negative numbers on failure and converts it into the Haskell <em><code>Maybe</code></em> type.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span><span class="ot"> unsign ::</span> <span class="dt">Integral</span> a <span class="ot">⇒</span> <span class="dt">GLint</span> <span class="ot">→</span> <span class="dt">Maybe</span> a</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       unsign x </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">|</span> x <span class="fu">&lt;</span> <span class="dv">0</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Nothing</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">|</span> otherwise </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> fromIntegral x</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The second helper function deals with marshalling strings to C. I’m going to use <em><code>ContT</code></em> to reduce the reliance on callback functions. The <code>forString</code> function will take in a function expecting a program ID and a C string, along with a <em><code>Text</code></em> object with the actual string we want to use. It will transform this into an action wrapped in <em><code>ContT</code></em> and <em><code>MaybeT</code></em>, representing the fact that it is run as part of a sequence of callbacks, any of which might fail, in which case they should all fail. Since we’re always going to be querying the same shader program we’ll just refer to it directly in <code>fromString</code> so that we don’t have to pass it in every time. Finally we use <code>unsign</code> to return <em><code>Nothing</code></em> on failure.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> forString </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Integral</span> a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">⇒</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">GLuint</span> <span class="ot">→</span> <span class="dt">Ptr</span> <span class="dt">GLchar</span> <span class="ot">→</span> <span class="dt">IO</span> <span class="dt">GLint</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">T.Text</span> <span class="ot">→</span> <span class="dt">MaybeT</span> (<span class="dt">ContT</span> r <span class="dt">IO</span>) a</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       f <span class="ot">`forString`</span> x <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         (str, _) <span class="ot">←</span> lift <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">ContT</span> (T.withCStringLen <span class="fu">$</span> T.concat [x, <span class="st">&quot;\0&quot;</span>])</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         loc <span class="ot">←</span> liftIO <span class="fu">$</span> f programID str</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         <span class="dt">MaybeT</span> ∘ return <span class="fu">$</span> unsign loc</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Armed with <code>forString</code>, what would have been a tedious process of marshalling C strings through a series of callbacks can be expressed quite idiomatically:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glShader <span class="ot">←</span> <span class="dt">MaybeT</span> ∘ evalContT ∘ runMaybeT <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">Shader</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;$&gt;</span> pure programID</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;position&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;colour&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;normal&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;uv&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;pvmMatrix&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;viewModelMatrix&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;normalMatrix&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;diffuseColour&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;ambientColour&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;specularColour&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;shininess&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;lightDirection&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;diffuseMap&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>It is important that the names of the attributes and uniforms above match those that are actually used in <a href="#appendix-shader-code">the shaders</a>, otherwise they won’t be found and we’ll drop out with <em><code>Nothing</code></em> here.</p>
<div class="sidenote">
<p>Confession: I originally tried to define <code>forString</code> with the type <em><code>ContT r (MaybeT IO) GLuint</code></em> rather than the current <em><code>MaybeT (ContT r IO) GLuint</code></em>, but I couldn’t figure it out. Doing this would mean we could avoid unwrapping the <em><code>MaybeT</code></em> with <code>runMaybeT</code> and then wrapping it up again with <em><code>MaybeT</code></em> at the end, which would be a bit nicer. It does rather change the meaning of what’s being expressed though, and I think for that reason it might be impossible.</p>
</div>
<h3 id="load-mesh">
Loading the mesh
</h3>
<p>Finally, here’s the mesh. We’ll initialise a <em><code>MeshSpec</code></em> describing a <span class="math">\(1\times1\times1\)</span> cube and convert that to <em><code>MeshData</code></em> using the functions described in the previous section. At that point we’ll have some raw data, such as might have been read in from a model file if we were drawing something more complicated than a cube.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> cube <span class="fu">=</span> fromMeshSpec <span class="fu">$</span> cuboid <span class="dv">1</span> <span class="dv">1</span> <span class="dv">1</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We need to create two buffer objects: our VBO and our IBO. We create buffer objects using <code>glGenBuffers</code>; this in turn will give as an ID for each buffer with which we can refer to it.</p>
<p><code>glGenBuffers</code> takes an array and a length and fills the values in that array with that many buffers. We use the facilities in <em><code>Foreign.Marshal.Array</code></em> to allocate the array and pull out the values at the end.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [vbo, ibo] <span class="ot">←</span> liftIO ∘ allocaArray <span class="dv">2</span> <span class="fu">$</span> \buffers <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGenBuffers <span class="dv">2</span> buffers</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     peekArray <span class="dv">2</span> buffers</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll start by setting up the vertex buffer. First we need to bind the buffer ID we just got to the <code>GL_ARRAY_BUFFER</code> target so that GL knows what we intend to do with it. Then we fill it with data. Finally, we bind 0 to <code>GL_ARRAY_BUFFER</code> to free it up.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ARRAY_BUFFER</span> vbo</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">vertices   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> vertexData cube</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">vertexBufSize </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sizeOf (V.head vertices) <span class="fu">*</span> V.length vertices</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO ∘ SV.unsafeWith (SV.convert vertices) <span class="fu">$</span> \vsPtr <span class="ot">→</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glBufferData </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_ARRAY_BUFFER</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromIntegral vertexBufSize)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(castPtr vsPtr)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_STATIC_DRAW</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ARRAY_BUFFER</span> <span class="dv">0</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Again we use <code>unsafeWith</code> to get the data into C. We have to convert the vector into a <em>Storable</em> vector using <code>Data.Vector.Storable.convert</code> before we can do this.</p>
<p>Setting up the index buffer is similar, only this time the target is <code>GL_ELEMENT_ARRAY_BUFFER</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ELEMENT_ARRAY_BUFFER</span> ibo</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">indices   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> indexData cube</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">indexBufSize </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sizeOf (V.head indices) <span class="fu">*</span> V.length indices</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO ∘ SV.unsafeWith (SV.convert indices) <span class="fu">$</span> \isPtr <span class="ot">→</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glBufferData </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_ELEMENT_ARRAY_BUFFER</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromIntegral indexBufSize)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(castPtr isPtr)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_STATIC_DRAW</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ELEMENT_ARRAY_BUFFER</span> <span class="dv">0</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now that our buffer objects are set up for vertices and indices, we can wrap them up together in a <em>Vertex Array Object</em>. This collects the data together with properties about how it should be used. First we generate and bind the vertex array object, much as we did the vertex buffer objects earlier.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   vao <span class="ot">←</span> liftIO ∘ alloca <span class="fu">$</span> \vaoPtr <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGenVertexArrays <span class="dv">1</span> vaoPtr</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     peek vaoPtr</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindVertexArray vao</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Next we bind the buffer objects we made for the vertex and index data to this new vertex array object.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ARRAY_BUFFER</span> vbo</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ELEMENT_ARRAY_BUFFER</span> ibo</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We need to enable all four of the attributes our shader uses.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (positions glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (colours glShader)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (normals glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (uvs glShader)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And finally, we fill in the attributes, which tells GL the actual layout of the data within the buffer. When talking about the layout, we’re mainly talking about two things: The <em>offset</em> and the <em>stride</em>. The offset tells us how far into the array that chunk of data begins, while the stride tells us the difference from the start of one set of values to the start of the next. Since we have all our data in one interleaved array, the stride will be the same for each kind of data: <code>11 * sizeof(GLfloat)</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">offset x</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> wordPtrToPtr <span class="fu">$</span> x <span class="fu">*</span> fromIntegral floatSize</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">stride    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> fromIntegral floatSize <span class="fu">*</span> <span class="dv">11</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">floatSize </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sizeOf (undefined<span class="ot">::</span><span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we can set the values for each type using <code>glVertexAttribPointer</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (positions glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">3</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">0</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (colours glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">3</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">3</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (normals glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">3</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">6</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (uvs glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">2</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">9</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Our buffer objects are now set up and loaded onto the GPU ready to use. The last thing to do is to put them in the <em><code>Mesh</code></em> structure ready to be added to our <em><code>Resources</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> glMesh <span class="fu">=</span> <span class="dt">Mesh</span> vbo ibo vao (fromIntegral <span class="fu">$</span> V.length indices)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now that we have everything we need, we call <code>initGL</code> and then return the <code>Resources</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO initGL ≫ return (<span class="dt">Resources</span> glMesh textureID glShader)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And we’re done! Our <code>Resources</code> handle should now contain all the data we need, unless there was a problem, in which case we’ll fail gracefully.</p>
<h2 id="setting-up-gl">Setting up GL</h2>
<p>That call to <code>initGL</code> at the end of <code>initialise</code> allows us to give GL its basic settings.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; initGL ::</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> initGL <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glClearColor </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.96</span> <span class="fl">0.96</span> <span class="fl">0.96</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glClearDepth </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnable     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_DEPTH_TEST</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDepthFunc  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_LEQUAL</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glCullFace   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_BACK</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>While we’re here, remember the <code>resize</code> function we gave to GLFW at the start? Let’s get the definition of that out of the way.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; resize ::</span> <span class="dt">IORef</span> (<span class="dt">M44</span> <span class="dt">GLfloat</span>) <span class="ot">→</span> <span class="dt">Int</span> <span class="ot">→</span> <span class="dt">Int</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> resize projectionMatrix w h <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>resize</code> takes the <code>IORef</code> we made to store the projection matrix, and the new width and height. It has two jobs: it needs to update the viewport, so that GL rendering can fill the window, and it needs to update the projection matrix, so that the aspect ratio doesn’t get ruined.</p>
<p>Setting the viewport is simple – just pass the origin <code>(0, 0)</code>, and the full width and height of the window. Of course. if we only wanted to draw into a subset of the window that’s what we’d pass. The projection matrix is calculated using the same function we used in <code>main</code>: <code>calculateProjectionMatrix</code>. It is then written to the <code>IORef</code> so that we can access it from within our main loop.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glViewport <span class="dv">0</span> <span class="dv">0</span> (fromIntegral w) (fromIntegral h)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   writeIORef projectionMatrix <span class="fu">$</span> calculateProjectionMatrix (w, h)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here’s the <code>calculateProjectionMatrix</code> function itself. We use the <code>perspective</code> function from <code>linear</code> to do the work for us. <code>π/3</code> radians gives us a field of view of 60°.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; calculateProjectionMatrix ::</span> <span class="dt">Integral</span> a <span class="ot">⇒</span> (a, a) <span class="ot">→</span> <span class="dt">M44</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> calculateProjectionMatrix (w, h) <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   perspective (π<span class="fu">/</span><span class="dv">3</span>) (fromIntegral w <span class="fu">/</span> fromIntegral h) <span class="dv">1</span> <span class="dv">100</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="handling-state">Handling state</h2>
<p>This demo is very simple, so there isn’t much state to deal with. Nevertheless, the cube <em>does</em> spin, so we will need to keep track of its angle. As well as that, I’m going to include the camera position within the state structure even though it remains constant throughout the demo, as it’s convenient to hold the data together, and in real life you’re almost certainly going to be moving the camera at some point anyway.</p>
<p>Our state, then, can be represented as follows:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">DemoState</span> <span class="fu">=</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { cubeRotation   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Quaternion</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , cameraPosition </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V3</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And the default state is simply:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; defaultState ::</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> defaultState <span class="fu">=</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { cubeRotation   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">axisAngle (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , cameraPosition </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="fu">-</span><span class="dv">2</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>There are a number of ways to handle varying state in Haskell, and which to use is an interesting choice which can have wide-reaching implications for your application. For this demo, though, I’m keeping it simple, as I want to keep the focus on use of the <code>gl</code> library. So we’ll just have a simple update function which takes the previous state and a time delta, and returns the new state.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; update ::</span> <span class="dt">DemoState</span> <span class="ot">→</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> update s dt <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   s { cubeRotation <span class="fu">=</span> cubeRotatedBy (rotationSpeed <span class="fu">*</span> dt) }</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cubeRotatedBy θ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cubeRotation s <span class="fu">*</span> axisAngle (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) θ</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rotationSpeed   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">π <span class="fu">/</span> <span class="dv">2</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="the-main-loop">The main loop</h2>
<p>Our <code>runDemo</code> function will comprise the main loop for this demo. It takes the two <code>IORef</code>s we created at the start, a callback we can use to swap the framebuffers, and the <code>Resources</code> we just loaded. If the resources failed to load it just drops out straight away.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> runDemo </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IORef</span> <span class="dt">Bool</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IORef</span> (<span class="dt">M44</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Maybe</span> <span class="dt">Resources</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IO</span> ()</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> runDemo _ _ _ <span class="dt">Nothing</span> <span class="fu">=</span> return ()</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Otherwise it runs <code>loop</code>, which runs the frame unless the value pointed to by <code>closed</code> is <code>True</code>. When it <em>is</em> <code>True</code>, <code>loop</code> drops out and <code>cleanup</code> gets run.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> runDemo closed projectionMatrix swapBuffers (<span class="dt">Just</span> res) <span class="fu">=</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">do</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">loop defaultState</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cleanup res <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   loop s <span class="fu">=</span> readIORef closed ≫<span class="fu">=</span> \c <span class="ot">→</span> unless c (runFrame s)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The frame itself is comprised of essentially two phases, the update and the draw phase. We pass the delta time value to the update, but not the draw. Finally we call <code>loop</code>, which again checks <code>closed</code> and runs the next frame.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   runFrame s <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     draw res s <span class="fu">=</span>≪ readIORef projectionMatrix</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glFlush ≫ swapBuffers</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dt <span class="ot">←</span> getDeltaTime</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     loop <span class="fu">$</span> update s dt</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>The order here might look a bit funny. The following is more usual:</p>
<ol style="list-style-type: decimal">
<li>Get delta time</li>
<li>Run update</li>
<li>Draw scene</li>
<li>Swap buffers</li>
<li>Loop</li>
</ol>
<p>However when you look at the function above, you’ll realise they’re equivalent. The reason I’ve done it this way is to avoid introducing a variable <code>s'</code> for the updated state, which is easy to make mistakes with (using <code>s</code> instead of <code>s'</code>), and makes the code just a little less clean.</p>
</div>
<h2 id="actually-drawing-things">Actually drawing things</h2>
<p>At long last, we’re ready to implement the <code>draw</code> function, which actually renders the graphics to the screen. This function is actually surprisingly simple. A lot of the work in graphics programming goes into efficiently moving data between the CPU and the GPU – that and the shader code, of course. The actual rendering part is doing little more than passing constants to the shader to work with.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; draw ::</span> <span class="dt">Resources</span> <span class="ot">→</span> <span class="dt">DemoState</span> <span class="ot">→</span> <span class="dt">M44</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> draw res state projectionMatrix <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note that we are taking the projection matrix directly here, rather than the <em><code>IORef</code></em>. We let the main loop deal with the fact that this might be modified in a callback – as far as the <code>draw</code> function is concerned, this is the projection matrix it is dealing with and it will not change – not during this frame, at least.</p>
<p>We have the projection matrix, but there are a number of other matrices we’ll need to calculate. The <em>view matrix</em> offsets everything based on the position of the camera. The <em>model matrix</em> then applies the model transformations (in this case just rotation).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">viewMat <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  lookAt (cameraPosition state) (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">0</span>) (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">modelMat <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  mkTransformation (cubeRotation state) (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">0</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>It is convenient to precalculate the products of these matrices.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">viewModelMat </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> viewMat <span class="fu">!*!</span> modelMat</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">pvmMat       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> projectionMatrix <span class="fu">!*!</span> viewModelMat</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally the <em>normal matrix</em> is used to interpolate normals across faces. Since not all matrices have a valid inverse, I’ve chosen to fall back on the identity matrix in case <code>inv33</code> returns <em><code>Nothing</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">viewModelMat33 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> viewModelMat <span class="fu">^.</span> _xyz <span class="fu">.</span> column _xyz</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">inverseMat     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> inv33 viewModelMat33</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">normalMat      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> maybe identity distribute inverseMat</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we have all the data we need, we can start sending it to GL. We start by clearing both the colour and the depth buffers.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glClear </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">$</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_COLOR_BUFFER_BIT</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.|.</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_DEPTH_BUFFER_BIT</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Next, we bind the shader program, mesh, and texture ready for use. The texture is bound to texture unit 0, which will become important in a minute.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUseProgram ∘ shaderProgram <span class="fu">$</span> shader res</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindVertexArray ∘ meshVAO <span class="fu">$</span> mesh res</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glActiveTexture <span class="dt">GL_TEXTURE0</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindTexture <span class="dt">GL_TEXTURE_2D</span> <span class="fu">$</span> texture res</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We pass in the required uniforms to the shader. First the matrices, where the <em><code>Storable</code></em> instance for <em><code>M44</code></em> helps us a lot.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with pvmMat <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glUniformMatrix4fv </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(pvmMatrix <span class="fu">$</span> shader res)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span> <span class="dt">GL_TRUE</span> ∘ castPtr</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with viewModelMat <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glUniformMatrix4fv </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(viewModelMatrix <span class="fu">$</span> shader res)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span> <span class="dt">GL_TRUE</span> ∘ castPtr</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with normalMat <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glUniformMatrix3fv </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(normalMatrix <span class="fu">$</span> shader res)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span> <span class="dt">GL_TRUE</span> ∘ castPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And the light and texture data, which is simple. For the texture, the number passed is the index of the texture unit that texture is bound to; we specified <code>GL_TEXTURE0</code> a minute ago so we put <code>0</code> here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform4f (diffuseColour <span class="fu">$</span> shader res)  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.6</span> <span class="fl">0.6</span> <span class="fl">0.6</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform4f (ambientColour <span class="fu">$</span> shader res)  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.1</span> <span class="fl">0.1</span> <span class="fl">0.1</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform4f (specularColour <span class="fu">$</span> shader res) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.7</span> <span class="fl">0.7</span> <span class="fl">0.7</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform1f (shininess <span class="fu">$</span> shader res)      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.4</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform3f (lightDirection <span class="fu">$</span> shader res) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform1i (diffuseMap <span class="fu">$</span> shader res)     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">0</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, we’re ready to draw!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDrawElements </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_TRIANGLES</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(meshIndexCount <span class="fu">$</span> mesh res)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_UNSIGNED_INT</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(wordPtrToPtr <span class="dv">0</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If you’ve got this far you should have a spinning cube on the screen! Pat yourself on the back; you’re ready to go.</p>
<h2 id="resource-cleanup">Resource cleanup</h2>
<p>OK, we’ve had our fun, now we need to clean up after ourselves. Actually, since we’re on our way out of the application we don’t as the OS will no doubt take care of it for us, but I’m going to anyway for the sake of completeness if nothing else.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; cleanup ::</span> <span class="dt">Resources</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> cleanup (<span class="dt">Resources</span> m t s) <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with (meshVAO m) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteVertexArrays <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with (meshVBO m) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteBuffers <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with (meshIBO m) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteBuffers <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with t           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteTextures <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDeleteProgram  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> shaderProgram s</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The gist of this is pretty simple: for every <code>glCreate*</code> or <code>glGen*</code> function there is a <code>glDelete*</code> equivalent which we have to call.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>Whew, well, that was a pretty long post! I hope that it will come in handy for anyone who, like me, wants to fiddle about with OpenGL in Haskell but doesn’t want to spend hours getting the basic pipeline up and running. Obviously you will want to build your own abstractions on top of this and presumably draw something more interesting than a rubbish cube. But at least with this as a starting point you’ll be able to build it up from a program that works.</p>
<p>If you liked this post, please drop me a tweet <a href="http://twitter.com/danielpwright">@danielpwright</a>! If it’s popular, I might explore some other libraries in a similar way. Similarly, if you found anything lacking, please let me know.</p>
<p>As I mentioned, this was also my first time using the <code>gl</code> library. Having played with it a bit now, I must say that I like it, despite the annoyance of having to marshal data into C manually. This process is quite easy to abstract into something easier to use, and if it’s me doing the abstraction I can be sure it will be well-suited to my application.</p>
<p>Apart from that, coming from a traditional games background (my day job is as a console games programmer in C++), we tend to be quite obssessive over what our memory is doing. Even having garbage collection feels a bit… <em>free and easy</em>, let alone all the other high-level constructs Haskell offers! Knowing that I’m dealing with raw GL bindings and being able to see exactly how data is marshalled between Haskell and C gives me a reassuring sense that, at least as far as my graphics pipeline is concerned, I am in control of my data. There’s nothing worse than getting a little way into something and then realising that something you hadn’t anticipated about the abstraction you’re working with prevents you from doing the thing you want to do.</p>
<p>There is probably still a place for a package like <a href="https://hackage.haskell.org/package/OpenGL">OpenGL</a>. The level of abstraction there feels much more natural for a Haskell library. But I think, for my part, I’d rather set the level of abstraction myself, so as to best match the needs of the project I’m working on, so I will be using the <a href="https://hackage.haskell.org/package/gl">gl</a> package for any graphics projects I do from now on.</p>
<h2 id="appendix-shader-code">Appendix: shader code</h2>
<p>Here is the code for the two shaders I use in this demo. They are cobbled together from a variety of tutorials on the internet, and aren’t really very useful for any sort of production use, given that they only allow for a single directional light, they assume coloured vertices and alpha-blended textures, and so on. The goal here wasn’t really to explore interesting shader code or graphics techniques, but rather to give an absolute baseline working environment in GL.</p>
<p>So, I assume that once you have this up and running one of the first things you’ll want to do is throw away these shaders and replace them with something more useful, possibly by following one of the many tutorials on the internet for working with OpenGL in C/C++, since the code samples translate quite naturally when using the <code>gl</code> package.</p>
<p>I include these two shaders, therefore, without comment.</p>
<h3>
vertexShader.glsl
</h3>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> <span class="ot">#version 330</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">mat4</span> pvmMatrix;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">mat4</span> viewModelMatrix;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">mat3</span> normalMatrix;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> position;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> colour;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> normal;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec2</span> uv;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec3</span> calculatedNormal;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec4</span> calculatedEye;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec4</span> rgba;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec2</span> fragmentUV;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">void</span> <span class="fu">main</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">{</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  <span class="dt">vec4</span> position4 = <span class="dt">vec4</span>(position, <span class="fl">1.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  <span class="fu">gl_Position</span> = pvmMatrix * position4;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  calculatedNormal = <span class="fu">normalize</span>(normalMatrix * normal);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  calculatedEye = -(viewModelMatrix * position4);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  rgba = <span class="dt">vec4</span>(colour, <span class="fl">1.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  fragmentUV = uv;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">}</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h3>
fragmentShader.glsl
</h3>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> <span class="ot">#version 330</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">vec4</span> diffuseColour;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">vec4</span> ambientColour;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">vec4</span> specularColour;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">float</span> shininess;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">vec3</span> lightDirection;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">uniform</span> <span class="dt">sampler2D</span> diffuseMap;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> calculatedNormal;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec4</span> calculatedEye;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec4</span> rgba;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec2</span> fragmentUV;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec4</span> colorOut;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">void</span> <span class="fu">main</span>()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">{</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec4</span> spec = <span class="dt">vec4</span>(<span class="fl">0.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec3</span> n = <span class="fu">normalize</span>(calculatedNormal);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">float</span> intensity = <span class="fu">max</span>(<span class="fu">dot</span>(n,lightDirection), <span class="fl">0.0</span>);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="kw">if</span> (intensity &gt; <span class="fl">0.0</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    {</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        <span class="dt">vec3</span> e = <span class="fu">normalize</span>(<span class="dt">vec3</span>(calculatedEye));</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        <span class="dt">vec3</span> h = <span class="fu">normalize</span>(lightDirection + e);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        <span class="dt">float</span> intSpec = <span class="fu">max</span>(<span class="fu">dot</span>(h,n), <span class="fl">0.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        spec = specularColour * <span class="fu">pow</span>(intSpec,shininess);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    }</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec4</span> texCol = <span class="fu">texture</span>(diffuseMap, fragmentUV);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec4</span> baseCol = <span class="fu">mix</span>(rgba, texCol, texCol.<span class="fu">a</span>);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    colorOut = baseCol * <span class="fu">max</span>(intensity * diffuseColour + spec, ambientColour);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">}</code></pre></div></td>
</tr>
</tbody>
</table>
</div>

<div class="tagsinfo">Tagged with: <a href="/tags/haskell/index.html">haskell</a>, <a href="/tags/graphics/index.html">graphics</a>, <a href="/tags/gl/index.html">gl</a>, <a href="/tags/pragmatic-primers/index.html">pragmatic-primers</a>, <a href="/tags/literate-programs/index.html">literate-programs</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 4: Atom Feed</title>
    <link href="http://dpwright.com/posts/2015/03/18/generating-this-website-part-4-atom-feed/index.html" />
    <id>http://dpwright.com/posts/2015/03/18/generating-this-website-part-4-atom-feed/index.html</id>
    <published>2015-03-18T10:08:39Z</published>
    <updated>2015-03-18T10:08:39Z</updated>
    <summary type="html"><![CDATA[<div class="info">18 March, 2015</div>



<div class="sidenote">
<p>This is part four of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>By this point we have the basic features up and running, and everything we do from here on are more or less “nice to have”s. First of which is an Atom feed, so people using feed readers can easily keep track of new posts.</p>
<p>Feeds seem to have become less popular recently, which I think is a shame since I find them to be an incredibly easy way to keep on top of new content across the various communities I’m interested in. Perhaps I am part of the problem, however, as I recently removed the Atom feed link from the header during the redesign of this website over the new year holidays. It may come as a surprise, then, that I have a feed at all! I do, and you can access it at <a href="http://dpwright.com/atom.xml" class="uri">http://dpwright.com/atom.xml</a>, which I had thought was a standard location which browsers and feed readers would pick up automatically. It turns out I was wrong about that, so I guess I’ll have to add the link back in.</p>
<p>Anyway, here’s how I generate the above feed. There’s not a lot new in this post that isn’t already covered in the <a href="http://jaspervdj.be/hakyll/tutorials/05-snapshots-feeds.html">official documentation on feeds</a>, but here it is.</p>
<p>First, the usual pragmas and imports. I was quite pleased with the results of using <code>UnicodeSyntax</code> last post, so I’m going to do it again.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Feed</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Let’s import some useful operators…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((⧺))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid.Unicode</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((⊕))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;$&gt;</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, we make use of <code>postCtx</code> from <em><code>Posts</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span> (postCtx)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Hakyll supports feeds natively and provides the <em><code>FeedConfiguration</code></em> type to configure the feed’s properties. Here’s mine.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; feedConfig ::</span> <span class="dt">FeedConfiguration</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> feedConfig <span class="fu">=</span> <span class="dt">FeedConfiguration</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { feedTitle       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Wright Access&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedDescription </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;dpwright&#39;s notes on code, Japan, &quot;</span> ⧺</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Japanese, and anything else&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedAuthorName  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Daniel P. Wright&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedAuthorEmail </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;dani@dpwright.com&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedRoot        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;http://dpwright.com&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we can generate the feed itself. In this series so far, you’ve already seen many times that to generate anything we need a <em><code>Compiler</code></em> and a <em><code>Context</code></em>, which we can then refer to in a set of <em><code>Rules</code></em> which will determine where and from what source files the content is made. In this case, all of these things are so simple we just define them inline.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; feed ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> feed tags <span class="fu">=</span> create [<span class="st">&quot;atom.xml&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     allContent </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> loadAllSnapshots <span class="st">&quot;posts/*&quot;</span> <span class="st">&quot;content&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ps         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> take <span class="dv">10</span> <span class="fu">&lt;$&gt;</span> recentFirst allContent</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     renderAtom feedConfig feedCtx ps</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> feedCtx <span class="fu">=</span> postCtx tags ⊕ bodyField <span class="st">&quot;description&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The feed context is just the post context augmented with the <code>description</code> field. You may remember when we were <a href="/posts/2014/09/29/generating-this-website-part-2-posts/#generating-posts">generating the posts</a> we used a function called <code>saveSnapshot</code> to save a copy of the content before adding headers and other global design elements. Here we load that content and put it in the <code>description</code> field for the post, resulting in an Atom feed which contains the entire post as its description, so that it can be read from within the feed reader of your choice.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 3: Indexing</title>
    <link href="http://dpwright.com/posts/2015/03/04/generating-this-website-part-3-indexing/index.html" />
    <id>http://dpwright.com/posts/2015/03/04/generating-this-website-part-3-indexing/index.html</id>
    <published>2015-03-04T09:57:39Z</published>
    <updated>2015-03-04T09:57:39Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 4 March, 2015</div>



<div class="sidenote">
<p>This is part three of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>After something of a hiatus, I’m back with the next in the “generating this website” series, which describes the actual code used to create the site you’re reading. This time I’m going to cover indexing, which in combination with the <a href="/posts/2014-08-04-generating-this-website-part-1-introduction">introduction</a> and the previous post on <a href="/posts/2014-09-29-generating-this-website-part-2-posts">generating posts themselves</a> is enough to get a basic Hakyll site up and running.</p>
<p>What do I mean by “indexing”? Well, basically just creating the list of blog posts on the site’s <a href="/">main page</a>, or the indices by <a href="/tags">tags</a>. This is the main mechanism by which visitors will navigate the site and be introduced to new posts.</p>
<p>It’s possible to go quite deep on this, breaking up indices into pages, having lists by year or by month, and so forth. As I don’t have too many posts, I’m keeping it simple for now, with a single-page index of all posts, and a similar single-page index per tag. I may revisit this as the number of posts increases to split the index up over multiple pages, or have some sort of infinite scrolling thing like twitter. Should that happen I’ll update this post – as I’ll have to of course, because this post is a literate program, and the code you’re about to see is what I actually run to generate the index pages for this site.</p>
<p>Let’s get cracking.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>For this post, I’m going to try out something I haven’t tried before, and that’s the <code>UnicodeSyntax</code> extension for GHC and the <a href="https://hackage.haskell.org/package/base-unicode-symbols">base-unicode-symbols</a> package which gives Unicode equivalents to commonly used Haskell operators. Why? Well, I’ve recently switched to using the <a href="http://checkmyworking.com/cm-web-fonts/">Computer Modern</a> series of fonts on the site; specifically I use <code>Computer Modern Serif</code> for the prose and <code>Computer Modern Concrete</code> for code. I think it looks really nice (well, unless you’re on Windows anyway), but some of Haskell’s operators are a little ungainly – for example the ubiquitous monadic bind operator comes out as <code>&gt;&gt;=</code>, and monoidal concatenation isn’t much better: <code>&lt;&gt;</code>. With unicode operators I can use <code>≫=</code> and <code>⊕</code> respectively, which look nicer at the possible expense of being slightly more awkward to type.</p>
<p>Most of the operators are similar enough to their ASCII originals that I hope readers will still be able to follow the code.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Having enabled Unicode syntax, I’ll start with the usual incantation:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Indexing</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here come the Unicode modules, which give me the operators from <code>Control.Monad</code>, <code>Data.Monoid</code>, and the Prelude, in Unicode.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Unicode</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid.Unicode</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>base-unicode-symbols</code> does export a module for <code>Control.Applicative</code>, but there is no Unicode symbol representing <code>&lt;$&gt;</code>, so I import that here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;$&gt;))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The following two modules come in handy for imposing a pseudo-random order on my tags (for the tag cloud). In fact there’s nothing random about it – I just order the tags based on the hash of their name, but the result looks a lot less tacky than an alphabetically ordered list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Hashable</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Ord</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally I import the previous blog on <a href="/posts/2014-09-29-generating-this-website-part-2-posts">posts</a>, to make use of the <code>removeIndexHtml</code> function.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span> (removeIndexHtml)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="the-main-index">The main index</h2>
<p>This is the main index which you see on the <a href="/">main page</a>. Even though it is not an index by tag, I need to make use of the tags in order to list under each post title what tags apply to that post.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; index ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> index tags <span class="fu">=</span> create [<span class="st">&quot;index.html&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> indexCompiler tags <span class="st">&quot;posts/*&quot;</span> indexContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The rule is pretty simple – I create a page, <code>index.html</code>, which runs the <code>indexCompiler</code> over all files in the <code>posts</code> directory. Since I’m creating the file from scratch, rather than converting from some source format, I don’t need to perform any transformation on the filename so I can just use <code>idRoute</code>.</p>
<p>As always with Hakyll, we make use of a <code>Compiler</code> to give the conversion/generation steps for a resource and a <code>Context</code>to supply the fields. The <code>Context</code> in this case is as follows:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; indexContext ::</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexContext </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> bodyField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;body&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ metadataField </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;url&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ pathField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;path&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ missingField  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>These fields can then be used in the index template.</p>
<p>What about the <code>Compiler</code>? Well, let’s start by looking at its type signature.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexCompiler </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Tags</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Pattern</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>There are quite a few parameters here. As mentioned, we need the <code>Tags</code>, and the <code>Pattern</code> allows us to specify how to find the posts. We could have just used <code>indexContext</code> directly here rather than pass it in, but as we’ll see if we pass it in we can re-use this <code>Compiler</code> when we generate our tag-specific indices by passing in a different <code>Context</code>. Finally, the function returns our <code>Compiler</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexCompiler tags pattern baseCtx <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ctx <span class="ot">←</span> mkCtx baseCtx <span class="fu">&lt;$&gt;</span> postList tags pattern recentFirst</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeItem <span class="st">&quot;&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/archive.html&quot;</span> ctx</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> relativizeUrls</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> withItemBody removeIndexHtml</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> mkCtx base list <span class="fu">=</span> constField <span class="st">&quot;posts&quot;</span> list ⊕ base</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The compiler is fairly standard, except perhaps for that first line – what’s going on there? Well, in order to generate our index, we first need to generate our list of posts, and that’s the job of <code>postList</code>. We then add that to our <code>Context</code>, and use this augmented <code>Context</code> to generate the index page as a whole.</p>
<p>That is actually where most of the work happens – if you think about it, the <code>index</code> page itself is just a skeleton around the main thing we’re trying to display – the list of posts. That being the case, let’s take a look at how that’s generated.</p>
<h2 id="the-list-of-posts">The list of posts</h2>
<p>OK, so we want a thing, it’s Hakyll, what do we need? A <code>Context</code> and a <code>Compiler</code>, of course! We define the <code>Context</code> required to generate a single item in the list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; itemCtx ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> itemCtx tags </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> tagsField <span class="st">&quot;tags&quot;</span> tags</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%e %B, %Y&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField <span class="st">&quot;url&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>In other words, to display a single item, we need the post’s tags, its date and URL, and the default context, which will give us its title.</p>
<p>Given this <code>Context</code>, Hakyll provides a function called <code>applyTemplateList</code> which allows us to apply a template over each <code>Item</code> in a list, turning a <code>Compiler</code> for a list of <code>Item</code>s into a <code>Compiler</code> for a single <code>Item</code> representing the whole list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postList </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Tags</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Pattern</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">([<span class="dt">Item</span> <span class="dt">String</span>] <span class="ot">→</span> <span class="dt">Compiler</span> [<span class="dt">Item</span> <span class="dt">String</span>])</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Compiler</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postList tags pattern sortFilter <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ps      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> sortFilter <span class="fu">=</span>≪ loadAll (pattern <span class="fu">.&amp;&amp;.</span> hasNoVersion)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   itemTpl </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> loadBody <span class="st">&quot;templates/post-item.html&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   applyTemplateList itemTpl (itemCtx tags) ps</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> removeIndexHtml</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>sortFilter</code> parameter to this function allows us to order the <code>Item</code>s based on their <code>Context</code>. As you can see in the call to <code>postList</code> in <code>indexCompiler</code> above, we pass in <code>recentFirst</code> to sort the posts by date.</p>
<h2 id="dealing-with-tags">Dealing with tags</h2>
<p>Extending our system to deal with tags is easy – we just write another set of <code>Rules</code> similar to <code>index</code> which generates a page for each tag.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagIndex ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagIndex tags <span class="fu">=</span> tagsRules tags <span class="fu">$</span> \_ pattern <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> gsubRoute <span class="st">&quot;.html&quot;</span> (const <span class="st">&quot;/index.html&quot;</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> indexCompiler tags pattern defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The default <code>tagsRules</code> provided by Hakyll put the tags in a file called <code>tagname.html</code>, so we use <code>gsubRoute</code> here to rename that to <code>tagname/index.html</code> and get a prettier URL.</p>
<p>As an added bonus and to give us a way to browse all tags in the site, let’s generate a <a href="/tags">tag cloud</a>. This is a bit of an easter egg as I haven’t linked to it anywhere on the site except in this post, but you can always access it by going to <a href="http://dpwright.com/tags" class="uri">http://dpwright.com/tags</a>.</p>
<p>First we define our context.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagCloudContext ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagCloudContext tags </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> cloud</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ bodyField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;body&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;url&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ pathField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;path&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ missingField  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cloud   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> tagCloudField <span class="st">&quot;tagCloud&quot;</span> <span class="dv">100</span> <span class="dv">500</span> <span class="fu">$</span> shuffle tags</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     shuffle </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sortTagsBy ∘ comparing <span class="fu">$</span> hash ∘ fst</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Most of the legwork here is done by <code>tagCloudField</code>, which is provided by Hakyll. As mentioned earlier, we sort the tags by the hash of their name, which gives us a random-looking, but in fact predictable, order for the tags. It is important that this ordering is deterministic and not random, otherwise I’d have to regenerate the tags page even when no changes had been made to the site!</p>
<p>Finally we describe the <code>Rules</code> for the <code>tagCloud</code> itself. I’ve written the <code>Compiler</code> inline here as we don’t need to make use of it elsewhere and that keeps things simple.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagCloud ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagCloud tags <span class="fu">=</span> create [<span class="st">&quot;tags/index.html&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> tagsCtx <span class="fu">=</span> tagCloudContext tags</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> makeItem <span class="st">&quot;&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/tags.html&quot;</span>    tagsCtx</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> tagsCtx</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> relativizeUrls</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> withItemBody removeIndexHtml</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And that’s it! The site is now fully indexed, with a single main index on the front page an an index per-tag as well.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Updating git branches you're not on</title>
    <link href="http://dpwright.com/posts/2015/01/27/updating-git-branches-youre-not-on.html" />
    <id>http://dpwright.com/posts/2015/01/27/updating-git-branches-youre-not-on.html</id>
    <published>2015-01-27T18:12:23Z</published>
    <updated>2015-01-27T18:12:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">27 January, 2015</div>



<p>Do you use <code>git</code>?</p>
<p>Have you ever been on a feature branch and wanted to pull all the upstream changes into your <code>master</code> branch before rebasing onto that? Of course you have.</p>
<p>If you’re sick of doing this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git checkout master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git pull</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>$ git checkout feature-branch</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Add the following lines to your <code>.gitconfig</code>:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[alias]</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    remote-for-branch </span><span class="ot">=</span><span class="st"> &quot;!f() { git for-each-ref --format=&#39;%(upstream:short)&#39; `for b in $@</span><span class="co">; do echo refs/heads/$b; done` | sed &#39;s:/.*$::&#39;; }; f&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    sync </span><span class="ot">=</span><span class="st"> &quot;!f() { for b in $@</span><span class="co">; do git fetch `git remote-for-branch $b` $b:$b; done }; f&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now you can do this!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git sync master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Thanks to <a href="http://stackoverflow.com/a/9753364/1004609">this Stack Overflow answer</a> for the technique, which I just wrapped up in an alias to make it easier to use.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/git/index.html">git</a>, <a href="/tags/alias/index.html">alias</a></div>
]]></summary>
</entry>
<entry>
    <title>Updating git branches you're not on</title>
    <link href="http://dpwright.com/posts/2015/01/27/updating-git-branches-youre-not-on/index.html" />
    <id>http://dpwright.com/posts/2015/01/27/updating-git-branches-youre-not-on/index.html</id>
    <published>2015-01-27T18:12:23Z</published>
    <updated>2015-01-27T18:12:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">27 January, 2015</div>



<p>Do you use <code>git</code>?</p>
<p>Have you ever been on a feature branch and wanted to pull all the upstream changes into your <code>master</code> branch before rebasing onto that? Of course you have.</p>
<p>If you’re sick of doing this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git checkout master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git pull</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>$ git checkout feature-branch</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Add the following lines to your <code>.gitconfig</code>:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[alias]</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    remote-for-branch </span><span class="ot">=</span><span class="st"> &quot;!f() { git for-each-ref --format=&#39;%(upstream:short)&#39; `for b in $@</span><span class="co">; do echo refs/heads/$b; done` | sed &#39;s:/.*$::&#39;; }; f&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    sync </span><span class="ot">=</span><span class="st"> &quot;!f() { for b in $@</span><span class="co">; do git fetch `git remote-for-branch $b` $b:$b; done }; f&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now you can do this!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git sync master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Thanks to <a href="http://stackoverflow.com/a/9753364/1004609">this Stack Overflow answer</a> for the technique, which I just wrapped up in an alias to make it easier to use.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/git/index.html">git</a>, <a href="/tags/alias/index.html">alias</a></div>
]]></summary>
</entry>
<entry>
    <title>あけましておめでとうございます</title>
    <link href="http://dpwright.com/posts/2015/01/01/%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99.html" />
    <id>http://dpwright.com/posts/2015/01/01/%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99.html</id>
    <published>2015-01-01T00:00:00Z</published>
    <updated>2015-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 1 January, 2015</div>



<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/nengajou.png" title="明けましておめでとうございます" />
</center>
<h2 id="年賀状をhaskellで">年賀状をHaskellで</h2>
<p>上の画像が今年の僕達の年賀状です。</p>
<p>実は、妻が最初アプリでデザインを考えていたのですが、 画像のダウンロードができず、Pixelmatorで作りなおそうという話がでました。 でも、これってHaskellでできるんじゃないの…？と思い、 試しにやってみることにしました。</p>
<p>５分の仕事が結局２日になったけど（笑）… 面白かったので、やり方を公開します。</p>
<h2 id="概要">概要</h2>
<p>まず、上の画像をみて、デザインを考えます。</p>
<p>最初は、下記のやりかたでやろうと思っていました。</p>
<ol style="list-style-type: decimal">
<li>写真の上に、真っ白のレイヤーを載せる。</li>
<li>その白いレイヤーから３つの三角形を切って、下の写真が見えるようになる。</li>
<li>最後にメッセージを追加する。</li>
</ol>
<p>ただ、diagramsでは、レイヤーを作って、そのレイヤーから切る機能がなかった （というか、あるかもしれないけど、僕が分からなかったので）。</p>
<p>結局、「上の白いレイヤーから切る」という方法ではなく、 「そのまま５つの三角形を描く」という方法でやりました。</p>
<p>文章ではちょっと分かりづらいと思うので、絵で説明します。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この下にメッセージをつけます。</p>
<p>では、実際にどう作ったか振り返ります。</p>
<h2 id="依存関係">依存関係</h2>
<p>まず、Haskellのライブラリをインストールします。</p>
<p>下記の<code>cabal</code>設定でインストールしました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>executable nengajou2015</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>  main-is:          </code></pre></td>
<td align="left"><pre><code>2015-01-01-happy-new-year.lhs</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>  build-depends:    </code></pre></td>
<td align="left"><pre><code>base                </code></pre></td>
<td align="left"><pre><code>&gt;= 4.7 &amp;&amp; &lt;4.8,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams            </code></pre></td>
<td align="left"><pre><code>== 1.2,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-lib        </code></pre></td>
<td align="left"><pre><code>== 1.2.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-rasterific </code></pre></td>
<td align="left"><pre><code>== 0.1.0.1,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>text                </code></pre></td>
<td align="left"><pre><code>== 1.1.1.3,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>directory           </code></pre></td>
<td align="left"><pre><code>== 1.2.1.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>filepath            </code></pre></td>
<td align="left"><pre><code>== 1.3.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>process             </code></pre></td>
<td align="left"><pre><code>== 1.2.0.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>SVGFonts            </code></pre></td>
<td align="left"><pre><code>== 1.4.0.3</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>  default-language: </code></pre></td>
<td align="left"><pre><code>Haskell2010</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>arithmoi</code>は最近<code>llvm</code>のバージョンによってエラーになるときがあります。 その場合は、下記のコマンドで<code>cabal install</code>してください。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ cabal install --constrain &quot;arithmoi -llvm&quot;</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントを<code>svg</code>に変換するため、<code>fontforge</code>が必要です。 Macを使ってたので、まず<a href="https://xquartz.macosforge.org/">XQuartz</a>をインストールしました。 それから、Homebrewで、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ brew install fontforge</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>を入力して、インストールします。</p>
<h2 id="予備">予備</h2>
<p><code>LANGUAGE</code>プラグマは、意外と多くなりました。 まず、いつもの<code>OverloadedStrings</code>と、 diagramsのドキュメンテーションに推奨される<code>NoMonomorphismRestriction</code>。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE NoMonomorphismRestriction #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>NoMonomorphismRestriction</code>は使った方がいいと書いてあったので 入れましたが必要なかったので、結果的に使いませんでした。</p>
<p>フォントを設定するためのデータ構造では、 <code>Functor</code>と<code>Traversable</code>の関数を使いたいと思いました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFunctor #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFoldable #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveTraversable #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>よっし！diagramsをインポートしよ！</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Prelude</span> <span class="kw">hiding</span> ((&lt;.&gt;))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Backend.Rasterific.CmdLine</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あ、テキストも書きたいからSVGFontsも必要になるね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts.ReadFont</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>でも、SVGFontsを使うため、フォントをttfからsvgに変換しないと…</p>
<p>そのため、システム的なモジュールも必要だね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Directory</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.FilePath</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Process</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Exit</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あ、きっとそのsvgファイルを調整しないとダメだろー</p>
<p><code>Data.Text</code>を使った方が最適…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.IO</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">TIO</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>え、さっき<code>Traversable</code>って言わなかった？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Foldable</span> (<span class="dt">Foldable</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Traversable</span> <span class="kw">as</span> <span class="dt">TV</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Arrow</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Char</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>終わり。</p>
<h2 id="型定義">型定義</h2>
<p>今回のプロジェクトは殆どの型はdiagramsで定義されています。</p>
<p>自分で定義をしたのは一つだけです。それは、フォントを設定するための型です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Fonts</span> a </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Fonts</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">} <span class="kw">deriving</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Functor</span>, <span class="dt">Foldable</span>, <span class="dt">Traversable</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ多相型で定義する必要があるの？」と思うかもしれませんが、 フォントは自動的に<code>.ttf</code>から<code>.svg</code>に変換できるようにしたいので、 同じストラクチャーで、ロードする前のファイル名と、 準備ができた使える状態のフォントを入れたいと思います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">newtype</span> <span class="dt">PreparedFont</span> <span class="fu">=</span> <span class="dt">PreparedFont</span> {<span class="ot"> fromPF ::</span> <span class="dt">String</span> }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>このnewtypeを使って、「フォントが変換された」と、型安全的に証明します。 （因みに最新版のSVGFontsでは<code>PreparedFont</code>は既に定義されているので、 最新版がHackageにアップされたらこれは必要なくなります。）</p>
<p>それでは、コード自体を始めましょう。</p>
<h2 id="二等辺三角形">二等辺三角形</h2>
<p>もう一度下の画像を見てみましょう。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この５つの三角形は全部二等辺三角形です！ diagramsは正三角形を作る関数が定義されていますが、 二等辺三角形はないため、自分で定義する必要があります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isosceles ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isosceles θ a <span class="fu">=</span> polygon (with <span class="fu">&amp;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   polyType <span class="fu">.~</span> <span class="dt">PolySides</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ (<span class="dv">180</span> <span class="fu">@@</span> deg) <span class="fu">^-^</span> θ ]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ legLength, legLength ]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ) <span class="kw">where</span> legLength <span class="fu">=</span> a <span class="fu">/</span> cosA (θ<span class="fu">^/</span><span class="dv">2</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>θ</code>は頂角、<code>a</code>は高度（altitude）です。</p>
<p><code>(^-^)</code>、<code>(^/)</code>は<a href="https://hackage.haskell.org/package/vector-space">vector-space</a>というパッケージで定義され、 角度やベクトル等を引算、割算ができるような関数です。 意味が分からないときは<code>^</code>を消してみたら、だいたいの意味が見えてきます （<code>(^-^)</code> → <code>(-)</code>、<code>(^/)</code> → <code>(/)</code>)。</p>
<p><code>(&amp;)</code>、<code>(.~)</code>は<a href="https://hackage.haskell.org/package/lens">lens</a>のオペレーターです。 今からlensの説明しようとすると話が終わらないので、今日は省きます。</p>
<p>画像のレイアウトをするため、底辺の長さが必要なときがあります。 それを計算するために下記のユーティリティ関数を使います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isoscelesBase ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isoscelesBase θ a <span class="fu">=</span> <span class="dv">2</span> <span class="fu">*</span> tanA (θ<span class="fu">^/</span><span class="dv">2</span>) <span class="fu">*</span> a</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="レイアウト">レイアウト</h2>
<p>簡単に言うと、このデザインは「上に画像があって、その下にメッセージ」と説明できます。</p>
<p>とりあえず、フォントや写真はもう既にロードされていると見なしましょう。 そうすると、下記のようになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; nengajou ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> nengajou fs photo <span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">topImage θ photoShiftedRight <span class="st"># inViewport</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">===</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">message fs imageWidth (photoHeight <span class="fu">/</span> <span class="dv">3</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>(===)</code>は、２つの<em><code>Diagram</code></em>を上から下に並べる関数です。</p>
<p>分かりやすいでしょう！ <code>topImage</code>は上の画像、<code>message</code>は下のメッセージ。 並べると、年賀状になると。</p>
<p>あとは、ここで使った値を定義するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     θ                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">50</span> <span class="fu">@@</span> deg</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoHeight       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">height photo</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     imageWidth        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">isoscelesBase θ photoHeight</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>まずは、写真や画像についての変数です。<code>θ</code>の値を変更したら、三角形の形を変えられます。 <code>photoHeight</code>は写真全体の高さですが、 <code>imageWidth</code>はできた画像（緑のメイン三角形）の幅となります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoShiftedRight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">photo <span class="st"># translateX 40</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>実はもとの写真では人物は真ん中ではなかったので、 細かいことになりますが、これで調整しています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inViewport <span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">view </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(p2 ((<span class="fu">-</span>imageWidth) <span class="fu">/</span> <span class="dv">2</span>, (<span class="fu">-</span>photoHeight) <span class="fu">/</span> <span class="dv">2</span>))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(r2 (imageWidth, photoHeight))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>色が付いている三角形の画像をみると、ちょっと外側が汚いので、 <code>inViewport</code>で、外の部分を消す関数を用意しました。</p>
<h2 id="画像">画像</h2>
<p>画像自体も簡単に説明できます。まず、５つの三角形と合わせるため、 写真を切る必要があります。その切った写真の上に、三角形を載せていきます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; topImage ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> topImage θ photo <span class="fu">=</span> triangles <span class="fu">&lt;&gt;</span> clippedPhoto <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>切るサイズは、写真の元の高さ✕緑の三角形の底辺の長さです。 それではちょっと幅が見えてしまうので、あと２ピクセルずつ、念の為に切ります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   clippedPhoto </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> photo <span class="st"># clipBy (rect </span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(centralTriangleBase <span class="fu">-</span> <span class="dv">2</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(photoHeight <span class="fu">-</span> <span class="dv">2</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photoHeight         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> height photo</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangleBase </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isoscelesBase θ photoHeight</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>triangles</code>は、左から右に言うと、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   triangles </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> mconcat</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ edgeTriangleLeft</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleLeft</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, centralTriangle</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleRight</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, edgeTriangleRight</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>になります。この画像では順番は関係ないけれど、 場合によっては必要になりますね。 <em><code>Diagram</code></em>を連結すると、 上から下の順番になります（<code>edgeTriangleLeft</code>の下に <code>bottomTriangleLeft</code>を描いて、その下に <code>centralTriangle</code>を描く…という形）。</p>
<p>この画像の三角形を見ると２種類があります。 まずは、真ん中の３つの三角形。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/outline-triangles.png" title="Picture of 3 central triangles goes here" />
</center>
<p>輪郭のみを描いて、下にある写真が見える三角形ですね。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   outlineTriangle a </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lc white</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw ultraThick</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ<code>centerXY</code>が必要か？」ですが、Diagramsはデフォルトでは 原点は高度から見る真ん中ではなく、重心に設定してあります。 二等辺三角形を鏡映すると、ずれてしまう。 <code>centerXY</code>をしたら、簡単に鏡映できるようになります。</p>
<p>次は左と右の、真っ白の三角形です。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/edge-triangles.png" title="Picture of 2 edge triangles goes here" />
</center>
<p>この三角形の頂角は真ん中の三角形の反対角度になっています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   θ<span class="ch">&#39; = (180 @@ deg) ^-^ θ</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>高度は下の三角形の底辺の半分です。 この値はまた使うので変数に保存しておきましょう。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleHalfBase </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> centralTriangleBase <span class="fu">/</span> <span class="dv">4</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あとは色と90°の回転です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangle </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ<span class="ch">&#39; bottomTriangleHalfBase</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw none</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># fc white</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># rotate (90 @@ deg)</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>outlineTriangle</code>と<code>edgeTriangle</code>の２種類を定義できました。 これで５つの三角形が描けます。まずは真ん中の三角形です。 高度は写真と一緒です。その三角形を、<em>y</em> 軸に鏡映します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangle   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle photoHeight <span class="st"># reflectY</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あとは右側の下の三角形と真っ白の三角形。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleRight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle (photoHeight <span class="fu">/</span> <span class="dv">2</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateY (-(photoHeight / 4))</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX bottomTriangleHalfBase</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleRight   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> edgeTriangle</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX (bottomTriangleHalfBase * 3 / 2)</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>最後は左側です。右側を、<em>x</em> 軸に鏡映するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleLeft </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX bottomTriangleRight</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleLeft   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX edgeTriangleRight</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>画像の分はここまでです。</p>
<h2 id="メッセージ">メッセージ</h2>
<p>最初に「型は<em><code>Fonts</code></em>以外は定義しない」と言いましたが、 実は、メッセージを定義するため、今回下記のユーティリティー型を定義しました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MessagePart</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgText</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalWidth  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">font               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">PreparedFont</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">outline            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Measure</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">msgText            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">|</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgSpace</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>この型はメッセージのDiagramを定義するための、一瞬の型なので、 絶対必要とは言えません。 正直、もともとこのプログラムを書いたときはこの型は使わず作りました。 ただ、あった方が絶対分かりやすいと思って、 ブログのためにちょっとリファクタリングしてみました。</p>
<p><em><code>MessagePart</code></em>はメッセージの一行です。 その一行はメッセージのテキスト（<em><code>MsgText</code></em>)か、 何も表記しない、ただスペース開けるため（<em><code>MsgSpace</code></em>）です。</p>
<p>この型について一つポイントがあります。 <code>proportionalHeight</code>と<code>proportionalWidth</code>は、「高さ」と「幅」の割合を意味します。 ただ、表記の仕方はそれぞれ違います。 <code>proportionalWidth</code>の方は、全体の幅に対しての割合ー 例えば、幅の半分としたいなら<code>1/2</code>と表記します。 一方、<code>proportionalHeight</code>は、表記スペースに対して一行の大きさを決るため、表記スペースに対するの「割合の分子」のみ表記します。 分母は、全部のメッセージの<code>proportionalHeight</code>の合計になるはずです。 結果、<em><code>MessagePart</code></em>を並べれば、スペースを１００％と使えていることになります。</p>
<p>この型があったらメッセージ自体は、ただ<em><code>MessagePart</code></em>のリストになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; messageParts ::</span> [<span class="dt">MessagePart</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> messageParts <span class="fu">=</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ <span class="dt">MsgSpace</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">10</span> (<span class="dv">9</span> <span class="fu">/</span> <span class="dv">10</span>) english thin</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(map toUpper <span class="st">&quot;Happy New Year&quot;</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span> (<span class="dv">1</span> <span class="fu">/</span> <span class="dv">6</span>) numbers none <span class="st">&quot;2015&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) japanese none</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;昨年はお世話になりました　今年もよろしくお願いします&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) english none</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Wishing you a fantastic New Year, from Aki &amp; Dani&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>では、このメッセージをどうやって<em><code>Diagram</code></em>に変換しましょう？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; message ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> message fs w h <span class="fu">=</span> center messageText <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   messageText  <span class="fu">=</span> foldr1 (<span class="fu">===</span>) <span class="fu">.</span> map drawMsgPart <span class="fu">$</span> messageParts</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MessagePart</code></em>を一つ一つ<code>drawMsgPart</code>で描いて、 それから<code>foldr1 (===)</code>で上から下まで並べます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgSpace</span> ph)        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> strut <span class="fu">$</span> r2 (<span class="dv">0</span>, getRealHeight ph)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgText</span> ph pw f o t) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> text&#39; (w <span class="fu">*</span> pw, getRealHeight ph) f o t</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MsgSpace</code></em>だったら、ただ<em>y</em> 軸にスペースを開けます。 <em><code>MsgText</code></em>だったら<code>text'</code>としてレンダーします。</p>
<p><code>getRealHeight</code>は、割合の分子から、実際の高さに変換する関数です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   getRealHeight ph </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> h <span class="fu">*</span> ph <span class="fu">/</span> totalHeight</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   totalHeight  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sum <span class="fu">$</span> map proportionalHeight messageParts</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>text'</code>は、SVGFontsを使ってテキストをレンダーします。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   text&#39; (a, d) f o t </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> stroke (textPath t f a d)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw o # fc black &lt;&gt; strutY d</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   textPath t f a d </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> textSVG&#39; <span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">TextOpts</span> t (outlMap <span class="fu">.</span> fromPF <span class="fu">$</span> f fs)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">INSIDE_WH</span> <span class="dt">KERN</span> <span class="dt">False</span> a d</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="不純なところ">不純なところ</h2>
<p>今までの関数は純粋的に定義しました。 これからは、実世界と繋がっている<code>IO</code>モナドを使って、 写真やフォントを準備するための関数を定義します。</p>
<p>写真は簡単です。Diagramsの<code>loadImageEmb</code>関数を呼んで、 エラーが返されたらそのまま出力して停止します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; loadPhoto ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> loadPhoto fp <span class="fu">=</span> either reportError (return <span class="fu">.</span> image) <span class="fu">=&lt;&lt;</span> loadImageEmb fp</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> reportError err <span class="fu">=</span> putStrLn err <span class="fu">&gt;&gt;</span> exitWith (<span class="dt">ExitFailure</span> <span class="dv">1</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>フォントはもうちょっと複雑なんです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; prepareFonts ::</span> <span class="dt">Fonts</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Fonts</span> <span class="dt">PreparedFont</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> prepareFonts fs <span class="fu">=</span> <span class="kw">do</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">makeDirectory</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">TV.sequence (fmap prepareFont fs) <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>フォントは<code>.ttf</code>から<code>.svg</code>に変換しないと使えないんです。 変換されたフォントは<code>svg-fonts</code>というディレクトリーに出力します。 まず、そのディレクトリーがない場合は作成しないとダメです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontDir        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;svg-fonts&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeDirectory  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dirExists <span class="ot">&lt;-</span> doesDirectoryExist fontDir</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless dirExists <span class="fu">$</span> createDirectory fontDir</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>変換自体はfontforgeを使って行います。 もしもう既に変換されたフォントがあるならまた変換する必要はありません。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontforge f f&#39; </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> unwords [<span class="st">&quot;fontforge --lang=ff -c &#39;Open($1); Generate($2)&#39;&quot;</span>, f, f&#39;]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   prepareFont f  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">let</span> f&#39; <span class="fu">=</span> fontDir <span class="fu">&lt;/&gt;</span> filter (<span class="fu">/=</span> <span class="ch">&#39; &#39;</span>) (takeBaseName f) <span class="fu">&lt;.&gt;</span> <span class="st">&quot;svg&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     fontAlreadyConverted <span class="ot">&lt;-</span> doesFileExist f&#39;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless fontAlreadyConverted <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       system <span class="fu">$</span> fontforge f f&#39;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       stripNamespaceLineFrom f&#39;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     return <span class="fu">$</span> <span class="dt">PreparedFont</span> f&#39;</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>fontforgeが出すXMLはネームスペースに入っていますが、 SVGFontsがネームスペース無しのXMLしかサポートされていません。 下記の関数はネームスペース宣言を外します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; stripNamespaceLineFrom ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> stripNamespaceLineFrom f <span class="fu">=</span> TIO.readFile f <span class="fu">&gt;&gt;=</span> go</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> go </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span>   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.words</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">filter (not <span class="fu">.</span> T.isInfixOf <span class="st">&quot;xmlns&quot;</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.unwords</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">TIO.writeFile f</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="main関数"><code>main</code>関数</h2>
<p>最後に、上記の関数を結んでいく<code>main</code>関数です。</p>
<p>写真とフォントの準備をし、<code>nengajou</code>の関数に渡して<em><code>Diagram</code></em>を作成します。 <code>pad</code>を使って枠を作ります。それから背景を白にしましょう。 最終、Diagramsの<code>mainWith</code>関数を使ってコマンドラインインターフェースが出来上がります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photo <span class="ot">&lt;-</span> loadPhoto <span class="st">&quot;static/posts/2015/01/01/あけましておめでとうございます/beach-club.png&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fonts <span class="ot">&lt;-</span> prepareFonts <span class="dt">Fonts</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Garamond&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Calisto MT&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/ＤＦＰ教科書体W3&quot;</span> }</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mainWith <span class="fu">$</span> nengajou fonts photo <span class="st"># pad 1.1 # bg black</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>さあ、これで今年の年賀状が完成しました！</p>
<p>今年も楽しみながら、関数型言語で面白いものを作って行きましょう！</p>

<div class="tagsinfo">Tagged with: <a href="/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/index.html">日本語</a>, <a href="/tags/functional-programming/index.html">functional-programming</a>, <a href="/tags/haskell/index.html">haskell</a>, <a href="/tags/%E3%81%8A%E6%AD%A3%E6%9C%88/index.html">お正月</a>, <a href="/tags/new%20year/index.html">new year</a>, <a href="/tags/%E5%B9%B4%E8%B3%80%E7%8A%B6/index.html">年賀状</a></div>
]]></summary>
</entry>
<entry>
    <title>あけましておめでとうございます</title>
    <link href="http://dpwright.com/posts/2015/01/01/%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/index.html" />
    <id>http://dpwright.com/posts/2015/01/01/%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/index.html</id>
    <published>2015-01-01T00:00:00Z</published>
    <updated>2015-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 1 January, 2015</div>



<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/nengajou.png" title="明けましておめでとうございます" />
</center>
<h2 id="年賀状をhaskellで">年賀状をHaskellで</h2>
<p>上の画像が今年の僕達の年賀状です。</p>
<p>実は、妻が最初アプリでデザインを考えていたのですが、 画像のダウンロードができず、Pixelmatorで作りなおそうという話がでました。 でも、これってHaskellでできるんじゃないの…？と思い、 試しにやってみることにしました。</p>
<p>５分の仕事が結局２日になったけど（笑）… 面白かったので、やり方を公開します。</p>
<h2 id="概要">概要</h2>
<p>まず、上の画像をみて、デザインを考えます。</p>
<p>最初は、下記のやりかたでやろうと思っていました。</p>
<ol style="list-style-type: decimal">
<li>写真の上に、真っ白のレイヤーを載せる。</li>
<li>その白いレイヤーから３つの三角形を切って、下の写真が見えるようになる。</li>
<li>最後にメッセージを追加する。</li>
</ol>
<p>ただ、diagramsでは、レイヤーを作って、そのレイヤーから切る機能がなかった （というか、あるかもしれないけど、僕が分からなかったので）。</p>
<p>結局、「上の白いレイヤーから切る」という方法ではなく、 「そのまま５つの三角形を描く」という方法でやりました。</p>
<p>文章ではちょっと分かりづらいと思うので、絵で説明します。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この下にメッセージをつけます。</p>
<p>では、実際にどう作ったか振り返ります。</p>
<h2 id="依存関係">依存関係</h2>
<p>まず、Haskellのライブラリをインストールします。</p>
<p>下記の<code>cabal</code>設定でインストールしました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>executable nengajou2015</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>  main-is:          </code></pre></td>
<td align="left"><pre><code>2015-01-01-happy-new-year.lhs</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>  build-depends:    </code></pre></td>
<td align="left"><pre><code>base                </code></pre></td>
<td align="left"><pre><code>&gt;= 4.7 &amp;&amp; &lt;4.8,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams            </code></pre></td>
<td align="left"><pre><code>== 1.2,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-lib        </code></pre></td>
<td align="left"><pre><code>== 1.2.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>diagrams-rasterific </code></pre></td>
<td align="left"><pre><code>== 0.1.0.1,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>text                </code></pre></td>
<td align="left"><pre><code>== 1.1.1.3,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>directory           </code></pre></td>
<td align="left"><pre><code>== 1.2.1.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>filepath            </code></pre></td>
<td align="left"><pre><code>== 1.3.0.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>process             </code></pre></td>
<td align="left"><pre><code>== 1.2.0.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>                    </code></pre></td>
<td align="left"><pre><code>SVGFonts            </code></pre></td>
<td align="left"><pre><code>== 1.4.0.3</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>  default-language: </code></pre></td>
<td align="left"><pre><code>Haskell2010</code></pre></td>
<td align="left"><pre><code></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p><code>arithmoi</code>は最近<code>llvm</code>のバージョンによってエラーになるときがあります。 その場合は、下記のコマンドで<code>cabal install</code>してください。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ cabal install --constrain &quot;arithmoi -llvm&quot;</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>フォントを<code>svg</code>に変換するため、<code>fontforge</code>が必要です。 Macを使ってたので、まず<a href="https://xquartz.macosforge.org/">XQuartz</a>をインストールしました。 それから、Homebrewで、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ brew install fontforge</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>を入力して、インストールします。</p>
<h2 id="予備">予備</h2>
<p><code>LANGUAGE</code>プラグマは、意外と多くなりました。 まず、いつもの<code>OverloadedStrings</code>と、 diagramsのドキュメンテーションに推奨される<code>NoMonomorphismRestriction</code>。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE NoMonomorphismRestriction #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>NoMonomorphismRestriction</code>は使った方がいいと書いてあったので 入れましたが必要なかったので、結果的に使いませんでした。</p>
<p>フォントを設定するためのデータ構造では、 <code>Functor</code>と<code>Traversable</code>の関数を使いたいと思いました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFunctor #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveFoldable #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE DeriveTraversable #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>よっし！diagramsをインポートしよ！</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Prelude</span> <span class="kw">hiding</span> ((&lt;.&gt;))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Diagrams.Backend.Rasterific.CmdLine</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あ、テキストも書きたいからSVGFontsも必要になるね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.SVGFonts.ReadFont</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>でも、SVGFontsを使うため、フォントをttfからsvgに変換しないと…</p>
<p>そのため、システム的なモジュールも必要だね…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Directory</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.FilePath</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Process</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Exit</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あ、きっとそのsvgファイルを調整しないとダメだろー</p>
<p><code>Data.Text</code>を使った方が最適…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.IO</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">TIO</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>え、さっき<code>Traversable</code>って言わなかった？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Foldable</span> (<span class="dt">Foldable</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Traversable</span> <span class="kw">as</span> <span class="dt">TV</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Arrow</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>まだだよー</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Char</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>終わり。</p>
<h2 id="型定義">型定義</h2>
<p>今回のプロジェクトは殆どの型はdiagramsで定義されています。</p>
<p>自分で定義をしたのは一つだけです。それは、フォントを設定するための型です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Fonts</span> a </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Fonts</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> a</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">} <span class="kw">deriving</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Functor</span>, <span class="dt">Foldable</span>, <span class="dt">Traversable</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ多相型で定義する必要があるの？」と思うかもしれませんが、 フォントは自動的に<code>.ttf</code>から<code>.svg</code>に変換できるようにしたいので、 同じストラクチャーで、ロードする前のファイル名と、 準備ができた使える状態のフォントを入れたいと思います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">newtype</span> <span class="dt">PreparedFont</span> <span class="fu">=</span> <span class="dt">PreparedFont</span> {<span class="ot"> fromPF ::</span> <span class="dt">String</span> }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>このnewtypeを使って、「フォントが変換された」と、型安全的に証明します。 （因みに最新版のSVGFontsでは<code>PreparedFont</code>は既に定義されているので、 最新版がHackageにアップされたらこれは必要なくなります。）</p>
<p>それでは、コード自体を始めましょう。</p>
<h2 id="二等辺三角形">二等辺三角形</h2>
<p>もう一度下の画像を見てみましょう。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/triangles.png" title="５つの三角形" />
</center>
<p>この５つの三角形は全部二等辺三角形です！ diagramsは正三角形を作る関数が定義されていますが、 二等辺三角形はないため、自分で定義する必要があります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isosceles ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isosceles θ a <span class="fu">=</span> polygon (with <span class="fu">&amp;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   polyType <span class="fu">.~</span> <span class="dt">PolySides</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ (<span class="dv">180</span> <span class="fu">@@</span> deg) <span class="fu">^-^</span> θ ]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ legLength, legLength ]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ) <span class="kw">where</span> legLength <span class="fu">=</span> a <span class="fu">/</span> cosA (θ<span class="fu">^/</span><span class="dv">2</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>θ</code>は頂角、<code>a</code>は高度（altitude）です。</p>
<p><code>(^-^)</code>、<code>(^/)</code>は<a href="https://hackage.haskell.org/package/vector-space">vector-space</a>というパッケージで定義され、 角度やベクトル等を引算、割算ができるような関数です。 意味が分からないときは<code>^</code>を消してみたら、だいたいの意味が見えてきます （<code>(^-^)</code> → <code>(-)</code>、<code>(^/)</code> → <code>(/)</code>)。</p>
<p><code>(&amp;)</code>、<code>(.~)</code>は<a href="https://hackage.haskell.org/package/lens">lens</a>のオペレーターです。 今からlensの説明しようとすると話が終わらないので、今日は省きます。</p>
<p>画像のレイアウトをするため、底辺の長さが必要なときがあります。 それを計算するために下記のユーティリティ関数を使います。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; isoscelesBase ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> isoscelesBase θ a <span class="fu">=</span> <span class="dv">2</span> <span class="fu">*</span> tanA (θ<span class="fu">^/</span><span class="dv">2</span>) <span class="fu">*</span> a</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="レイアウト">レイアウト</h2>
<p>簡単に言うと、このデザインは「上に画像があって、その下にメッセージ」と説明できます。</p>
<p>とりあえず、フォントや写真はもう既にロードされていると見なしましょう。 そうすると、下記のようになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; nengajou ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> nengajou fs photo <span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">topImage θ photoShiftedRight <span class="st"># inViewport</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">===</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">message fs imageWidth (photoHeight <span class="fu">/</span> <span class="dv">3</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>(===)</code>は、２つの<em><code>Diagram</code></em>を上から下に並べる関数です。</p>
<p>分かりやすいでしょう！ <code>topImage</code>は上の画像、<code>message</code>は下のメッセージ。 並べると、年賀状になると。</p>
<p>あとは、ここで使った値を定義するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     θ                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">50</span> <span class="fu">@@</span> deg</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoHeight       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">height photo</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     imageWidth        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">isoscelesBase θ photoHeight</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>まずは、写真や画像についての変数です。<code>θ</code>の値を変更したら、三角形の形を変えられます。 <code>photoHeight</code>は写真全体の高さですが、 <code>imageWidth</code>はできた画像（緑のメイン三角形）の幅となります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     photoShiftedRight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">photo <span class="st"># translateX 40</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>実はもとの写真では人物は真ん中ではなかったので、 細かいことになりますが、これで調整しています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inViewport <span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">view </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(p2 ((<span class="fu">-</span>imageWidth) <span class="fu">/</span> <span class="dv">2</span>, (<span class="fu">-</span>photoHeight) <span class="fu">/</span> <span class="dv">2</span>))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(r2 (imageWidth, photoHeight))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>色が付いている三角形の画像をみると、ちょっと外側が汚いので、 <code>inViewport</code>で、外の部分を消す関数を用意しました。</p>
<h2 id="画像">画像</h2>
<p>画像自体も簡単に説明できます。まず、５つの三角形と合わせるため、 写真を切る必要があります。その切った写真の上に、三角形を載せていきます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; topImage ::</span> <span class="dt">Angle</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> topImage θ photo <span class="fu">=</span> triangles <span class="fu">&lt;&gt;</span> clippedPhoto <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>切るサイズは、写真の元の高さ✕緑の三角形の底辺の長さです。 それではちょっと幅が見えてしまうので、あと２ピクセルずつ、念の為に切ります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   clippedPhoto </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> photo <span class="st"># clipBy (rect </span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(centralTriangleBase <span class="fu">-</span> <span class="dv">2</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(photoHeight <span class="fu">-</span> <span class="dv">2</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photoHeight         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> height photo</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangleBase </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isoscelesBase θ photoHeight</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>triangles</code>は、左から右に言うと、</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   triangles </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> mconcat</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ edgeTriangleLeft</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleLeft</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, centralTriangle</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, bottomTriangleRight</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, edgeTriangleRight</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>になります。この画像では順番は関係ないけれど、 場合によっては必要になりますね。 <em><code>Diagram</code></em>を連結すると、 上から下の順番になります（<code>edgeTriangleLeft</code>の下に <code>bottomTriangleLeft</code>を描いて、その下に <code>centralTriangle</code>を描く…という形）。</p>
<p>この画像の三角形を見ると２種類があります。 まずは、真ん中の３つの三角形。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/outline-triangles.png" title="Picture of 3 central triangles goes here" />
</center>
<p>輪郭のみを描いて、下にある写真が見える三角形ですね。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   outlineTriangle a </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lc white</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw ultraThick</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>「なぜ<code>centerXY</code>が必要か？」ですが、Diagramsはデフォルトでは 原点は高度から見る真ん中ではなく、重心に設定してあります。 二等辺三角形を鏡映すると、ずれてしまう。 <code>centerXY</code>をしたら、簡単に鏡映できるようになります。</p>
<p>次は左と右の、真っ白の三角形です。</p>
<center>
<img src="/posts/2015/01/01/あけましておめでとうございます/edge-triangles.png" title="Picture of 2 edge triangles goes here" />
</center>
<p>この三角形の頂角は真ん中の三角形の反対角度になっています。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   θ<span class="ch">&#39; = (180 @@ deg) ^-^ θ</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>高度は下の三角形の底辺の半分です。 この値はまた使うので変数に保存しておきましょう。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleHalfBase </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> centralTriangleBase <span class="fu">/</span> <span class="dv">4</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あとは色と90°の回転です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangle </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> isosceles θ<span class="ch">&#39; bottomTriangleHalfBase</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># centerXY</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw none</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># fc white</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># rotate (90 @@ deg)</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>outlineTriangle</code>と<code>edgeTriangle</code>の２種類を定義できました。 これで５つの三角形が描けます。まずは真ん中の三角形です。 高度は写真と一緒です。その三角形を、<em>y</em> 軸に鏡映します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centralTriangle   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle photoHeight <span class="st"># reflectY</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>あとは右側の下の三角形と真っ白の三角形。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleRight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> outlineTriangle (photoHeight <span class="fu">/</span> <span class="dv">2</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateY (-(photoHeight / 4))</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX bottomTriangleHalfBase</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleRight   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> edgeTriangle</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># translateX (bottomTriangleHalfBase * 3 / 2)</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>最後は左側です。右側を、<em>x</em> 軸に鏡映するだけです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bottomTriangleLeft </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX bottomTriangleRight</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   edgeTriangleLeft   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> reflectX edgeTriangleRight</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>画像の分はここまでです。</p>
<h2 id="メッセージ">メッセージ</h2>
<p>最初に「型は<em><code>Fonts</code></em>以外は定義しない」と言いましたが、 実は、メッセージを定義するため、今回下記のユーティリティー型を定義しました。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MessagePart</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgText</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalWidth  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">font               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">PreparedFont</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">outline            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Measure</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">msgText            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">|</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MsgSpace</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">proportionalHeight </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Double</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   } </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>この型はメッセージのDiagramを定義するための、一瞬の型なので、 絶対必要とは言えません。 正直、もともとこのプログラムを書いたときはこの型は使わず作りました。 ただ、あった方が絶対分かりやすいと思って、 ブログのためにちょっとリファクタリングしてみました。</p>
<p><em><code>MessagePart</code></em>はメッセージの一行です。 その一行はメッセージのテキスト（<em><code>MsgText</code></em>)か、 何も表記しない、ただスペース開けるため（<em><code>MsgSpace</code></em>）です。</p>
<p>この型について一つポイントがあります。 <code>proportionalHeight</code>と<code>proportionalWidth</code>は、「高さ」と「幅」の割合を意味します。 ただ、表記の仕方はそれぞれ違います。 <code>proportionalWidth</code>の方は、全体の幅に対しての割合ー 例えば、幅の半分としたいなら<code>1/2</code>と表記します。 一方、<code>proportionalHeight</code>は、表記スペースに対して一行の大きさを決るため、表記スペースに対するの「割合の分子」のみ表記します。 分母は、全部のメッセージの<code>proportionalHeight</code>の合計になるはずです。 結果、<em><code>MessagePart</code></em>を並べれば、スペースを１００％と使えていることになります。</p>
<p>この型があったらメッセージ自体は、ただ<em><code>MessagePart</code></em>のリストになります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; messageParts ::</span> [<span class="dt">MessagePart</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> messageParts <span class="fu">=</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [ <span class="dt">MsgSpace</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">10</span> (<span class="dv">9</span> <span class="fu">/</span> <span class="dv">10</span>) english thin</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(map toUpper <span class="st">&quot;Happy New Year&quot;</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">6</span> (<span class="dv">1</span> <span class="fu">/</span> <span class="dv">6</span>) numbers none <span class="st">&quot;2015&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgSpace</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) japanese none</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;昨年はお世話になりました　今年もよろしくお願いします&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , <span class="dt">MsgText</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span> (<span class="dv">33</span> <span class="fu">/</span> <span class="dv">40</span>) english none</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Wishing you a fantastic New Year, from Aki &amp; Dani&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>では、このメッセージをどうやって<em><code>Diagram</code></em>に変換しましょう？</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; message ::</span> <span class="dt">Fonts</span> <span class="dt">PreparedFont</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> message fs w h <span class="fu">=</span> center messageText <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   messageText  <span class="fu">=</span> foldr1 (<span class="fu">===</span>) <span class="fu">.</span> map drawMsgPart <span class="fu">$</span> messageParts</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MessagePart</code></em>を一つ一つ<code>drawMsgPart</code>で描いて、 それから<code>foldr1 (===)</code>で上から下まで並べます。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgSpace</span> ph)        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> strut <span class="fu">$</span> r2 (<span class="dv">0</span>, getRealHeight ph)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   drawMsgPart (<span class="dt">MsgText</span> ph pw f o t) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> text&#39; (w <span class="fu">*</span> pw, getRealHeight ph) f o t</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><em><code>MsgSpace</code></em>だったら、ただ<em>y</em> 軸にスペースを開けます。 <em><code>MsgText</code></em>だったら<code>text'</code>としてレンダーします。</p>
<p><code>getRealHeight</code>は、割合の分子から、実際の高さに変換する関数です。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   getRealHeight ph </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> h <span class="fu">*</span> ph <span class="fu">/</span> totalHeight</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   totalHeight  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sum <span class="fu">$</span> map proportionalHeight messageParts</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>text'</code>は、SVGFontsを使ってテキストをレンダーします。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   text&#39; (a, d) f o t </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> stroke (textPath t f a d)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st"># lw o # fc black &lt;&gt; strutY d</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   textPath t f a d </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> textSVG&#39; <span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">TextOpts</span> t (outlMap <span class="fu">.</span> fromPF <span class="fu">$</span> f fs)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">INSIDE_WH</span> <span class="dt">KERN</span> <span class="dt">False</span> a d</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="不純なところ">不純なところ</h2>
<p>今までの関数は純粋的に定義しました。 これからは、実世界と繋がっている<code>IO</code>モナドを使って、 写真やフォントを準備するための関数を定義します。</p>
<p>写真は簡単です。Diagramsの<code>loadImageEmb</code>関数を呼んで、 エラーが返されたらそのまま出力して停止します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; loadPhoto ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Diagram</span> <span class="dt">B</span> <span class="dt">R2</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> loadPhoto fp <span class="fu">=</span> either reportError (return <span class="fu">.</span> image) <span class="fu">=&lt;&lt;</span> loadImageEmb fp</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> reportError err <span class="fu">=</span> putStrLn err <span class="fu">&gt;&gt;</span> exitWith (<span class="dt">ExitFailure</span> <span class="dv">1</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>フォントはもうちょっと複雑なんです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; prepareFonts ::</span> <span class="dt">Fonts</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Fonts</span> <span class="dt">PreparedFont</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> prepareFonts fs <span class="fu">=</span> <span class="kw">do</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">makeDirectory</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">TV.sequence (fmap prepareFont fs) <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>フォントは<code>.ttf</code>から<code>.svg</code>に変換しないと使えないんです。 変換されたフォントは<code>svg-fonts</code>というディレクトリーに出力します。 まず、そのディレクトリーがない場合は作成しないとダメです。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontDir        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;svg-fonts&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeDirectory  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dirExists <span class="ot">&lt;-</span> doesDirectoryExist fontDir</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless dirExists <span class="fu">$</span> createDirectory fontDir</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>変換自体はfontforgeを使って行います。 もしもう既に変換されたフォントがあるならまた変換する必要はありません。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fontforge f f&#39; </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> unwords [<span class="st">&quot;fontforge --lang=ff -c &#39;Open($1); Generate($2)&#39;&quot;</span>, f, f&#39;]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   prepareFont f  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">let</span> f&#39; <span class="fu">=</span> fontDir <span class="fu">&lt;/&gt;</span> filter (<span class="fu">/=</span> <span class="ch">&#39; &#39;</span>) (takeBaseName f) <span class="fu">&lt;.&gt;</span> <span class="st">&quot;svg&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     fontAlreadyConverted <span class="ot">&lt;-</span> doesFileExist f&#39;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     unless fontAlreadyConverted <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       system <span class="fu">$</span> fontforge f f&#39;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       stripNamespaceLineFrom f&#39;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     return <span class="fu">$</span> <span class="dt">PreparedFont</span> f&#39;</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>fontforgeが出すXMLはネームスペースに入っていますが、 SVGFontsがネームスペース無しのXMLしかサポートされていません。 下記の関数はネームスペース宣言を外します。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; stripNamespaceLineFrom ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> stripNamespaceLineFrom f <span class="fu">=</span> TIO.readFile f <span class="fu">&gt;&gt;=</span> go</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> go </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span>   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.words</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">filter (not <span class="fu">.</span> T.isInfixOf <span class="st">&quot;xmlns&quot;</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.unwords</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;&gt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">TIO.writeFile f</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="main関数"><code>main</code>関数</h2>
<p>最後に、上記の関数を結んでいく<code>main</code>関数です。</p>
<p>写真とフォントの準備をし、<code>nengajou</code>の関数に渡して<em><code>Diagram</code></em>を作成します。 <code>pad</code>を使って枠を作ります。それから背景を白にしましょう。 最終、Diagramsの<code>mainWith</code>関数を使ってコマンドラインインターフェースが出来上がります。</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   photo <span class="ot">&lt;-</span> loadPhoto <span class="st">&quot;static/posts/2015/01/01/あけましておめでとうございます/beach-club.png&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fonts <span class="ot">&lt;-</span> prepareFonts <span class="dt">Fonts</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ english  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Garamond&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, numbers  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/Calisto MT&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, japanese </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;/Library/Fonts/Microsoft/ＤＦＰ教科書体W3&quot;</span> }</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mainWith <span class="fu">$</span> nengajou fonts photo <span class="st"># pad 1.1 # bg black</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>さあ、これで今年の年賀状が完成しました！</p>
<p>今年も楽しみながら、関数型言語で面白いものを作って行きましょう！</p>

<div class="tagsinfo">Tagged with: <a href="/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/index.html">日本語</a>, <a href="/tags/functional-programming/index.html">functional-programming</a>, <a href="/tags/haskell/index.html">haskell</a>, <a href="/tags/%E3%81%8A%E6%AD%A3%E6%9C%88/index.html">お正月</a>, <a href="/tags/new%20year/index.html">new year</a>, <a href="/tags/%E5%B9%B4%E8%B3%80%E7%8A%B6/index.html">年賀状</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 2: Posts</title>
    <link href="http://dpwright.com/posts/2014/09/29/generating-this-website-part-2-posts.html" />
    <id>http://dpwright.com/posts/2014/09/29/generating-this-website-part-2-posts.html</id>
    <published>2014-09-29T09:57:39Z</published>
    <updated>2014-09-29T09:57:39Z</updated>
    <summary type="html"><![CDATA[<div class="info">29 September, 2014</div>



<div class="sidenote">
<p>This is part two of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>OK, time to dive into arguably the most important part of the website generator – generating the posts themselves! Really, this is what it all comes down to; any other features like tags, rss feeds, crossposting and so on are just window dressing. Generating posts is not actually that hard, but you’ll find it’s one of the most often-tweaked part of your Hakyll setup as most changes you want to make affect posts in some way. Let’s get started!</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>We start with our usual <code>OverloadedStrings</code> definition and <code>Hakyll</code> import. Because we’re developing a module now, rather than the main entry point of our program, we also need a module header. This was missing from the last post but will be present in all the remaining modules in this series.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Posts</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note that since the module is called <code>Posts</code>, the file itself must also be called <code>Posts.hs</code>, or rather <code>Posts.lhs</code> as it is a literate Haskell document. This has a bit of a knock-on effect, as Hakyll’s default behaviour is to expect that all files will follow a <code>date-title</code> convention for their filenames, so already we will have to do some extra work to get it to draw that information from the Pandoc header instead of the filename.</p>
<p>The following imports give us some extra helper functions which we’ll use throughout our program. These functions (particularly the operators) are so common I almost wish they were part of the standard prelude, but they aren’t so we’ll have to live with a longish import list. I won’t go into too much detail here but as I’ve used explicit imports you can see exactly which functions I’m importing from where.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;&gt;</span>))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Maybe</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromMaybe)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.List</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(intercalate, isInfixOf)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Char</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(toLower, isAlphaNum)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;$&gt;</span>), (<span class="fu">&lt;*&gt;</span>))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(msum)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’m going to be making use of a few system/date related functions to handle the date specified in the header and rename the file appropriately.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.FilePath</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(replaceBaseName, takeDirectory,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> takeBaseName, splitFileName, (<span class="fu">&lt;/&gt;</span>))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.Locale</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(defaultTimeLocale)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time.Clock</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">UTCTime</span> (<span class="fu">..</span>))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time.Format</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(formatTime, parseTime)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>Map</code> and <code>Set</code> data structures export function names that clash with those from the standard prelude for working with lists, so I’ll import those qualified here. In fact, I only make use of one function from each (<code>lookup</code> and <code>union</code> respectively), so I could have just imported those functions and had done with it, but it’s common form to import data structures like this qualified, so I’m in the habit of it. It’s also nice to be able to look at code called <code>M.lookup</code> and know straight away that it’s looking up the value in a map and not an association list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally some more specific imports. I’ll be overriding some of Pandoc’s default options so I’ll need to bring those into scope.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Definition</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Pandoc</span>(<span class="fu">..</span>))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Options</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">ReaderOptions</span>(<span class="fu">..</span>),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">WriterOptions</span> (<span class="fu">..</span>),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">Extension</span> (<span class="fu">..</span>),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="dt">HTMLMathMethod</span>(<span class="fu">..</span>), def)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>As well as that, I’m going to import the <code>Crossposting</code> and <code>ElasticTabstops</code> modules which we’ll cover later in the series.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Crossposting</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">ElasticTabstops</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>After all that, we can actually get on with writing some code! If you’re new to Haskell, don’t worry too much about all these imports – in general you just add them as you come across functionality you need to use which is defined in another module, so you don’t really need to think too much about them ahead of time. Because Haskell encourages breaking things down into small, reusable components, import lists can get quite long. This is a good thing!</p>
<h2 id="pandoc-options">Pandoc options</h2>
<p>To begin with, I’m going to define the custom version of the Pandoc compiler we’ll use to generate the posts. Hakyll comes with some reasonable defaults, but I’d like to tweak it a little to allow support for features specific to my needs here – in particular, I want support for:</p>
<ul>
<li>Literate Haskell (or you wouldn’t be reading this!)</li>
<li>MathJax</li>
<li>Syntax Highlighting</li>
<li>Smart Parsing (conversion of <code>--</code> to –, and so forth)</li>
</ul>
<p>The compiler itself is just a standard compiler with different reader and writer options, and some pandoc-level transformations:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; customCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> customCompiler <span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">pandocCompilerWithTransform</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   readerOptions writerOptions pandocTransforms</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Those options are defined in terms of Pandoc’s defaults, provided by the <code>Default</code> typeclass, which allows you to specify a default definition <code>def</code> for any type. First we tell the reader to add <code>readerSmart</code> to its options:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; readerOptions ::</span> <span class="dt">ReaderOptions</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> readerOptions <span class="fu">=</span> def { readerSmart <span class="fu">=</span> <span class="dt">True</span> }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The writer options are manipulated in a similar way, adding MathJax support, syntax highlighting, and literate Haskell.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; writerOptions ::</span> <span class="dt">WriterOptions</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> writerOptions <span class="fu">=</span> def</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { writerHTMLMathMethod <span class="fu">=</span> <span class="dt">MathJax</span> <span class="st">&quot;&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , writerHighlight      <span class="fu">=</span> <span class="dt">True</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , writerExtensions     <span class="fu">=</span> extensions</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> extensions </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> writerExtensions def <span class="ot">`S.union`</span> S.fromList</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ <span class="dt">Ext_literate_haskell</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>MathJax</code> constructor takes a string to supply the URL to <code>mathjax.js</code>, so that it can embed it in the output HTML, however in this case Hakyll overrides Pandoc’s default HTML output to insert our templates, and it is there that we import <code>mathjax.js</code>, so we can just pass the empty string here.</p>
<p>Defining <code>extensions</code> as a union of the default extensions with a single-member set may seem like overkill, and for only one item it is, but doing it this way means that if I ever want to add an extension I can just add it to the list.</p>
<p>Finally, we define <code>pandocTransform</code>, for our post-processing needs. This is just the composition of any pandoc-level filters we want to apply – see the posts for those individual filters for more information.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pandocTransforms ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pandocTransforms <span class="fu">=</span> elasticTabstops</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="generating-posts">Generating posts</h2>
<p>Here begins a pattern that you will see a lot of. In Hakyll, the way you generate anything is by defining a <code>Compiler</code>. Usually, that <code>Compiler</code> is paired with a <code>Context</code> which provides all the variables you may want to make use of in your template. Finally, we tie that <code>Compiler</code> to a specific set of inputs using <code>Rules</code>, which we covered in the previous post. Often, people write all their <code>Rules</code> inline in one big <code>main</code> function, but to make breaking the configuration over a number of blog posts easier, I’ve elected to define each set of <code>Rules</code> as an independent function which I call from <code>main</code> in the first post.</p>
<p>First, then, the <code>Context</code>, which simply extracts data from the metadata header at the top of the file.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; postCtx ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postCtx tags </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">=</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%e %B, %Y&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">tagsField <span class="st">&quot;tags&quot;</span> tags</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">crosspostField <span class="st">&quot;xp&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">&lt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>As well as the <code>defaultContext</code>, which gives us some common fields such as <code>title</code>, we make use of the <code>date</code>, <code>tags</code>, and <code>xp</code> fields. The first two ought to be fairly self-explanatory – the date is displayed at the top of this page and the tags are listed at the bottom.</p>
<p><code>crosspostField</code> will be defined in a later post in this series. It is there for the case where a post on this blog is also posted on another blog – usually I’ve written it for the other blog but received permission to reproduce it here. In that case, I want to include a header at the top of the file giving a link to the original blog post.</p>
<div id="sidenote">
I also make use of Hakyll to allow me to write the post here in markdown and have it automatically uploaded to both my blog and the one where I’m guesting – at least if the latter is a Wordpress blog and I have posting rights there. But we’ll talk about that later.
</div>
<p>The <code>Compiler</code> follows standard conventions: run the Pandoc compiler (in this case our <code>customCompiler</code> defined above), apply templates, and fix up the URLs.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; postCompiler ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postCompiler tags <span class="fu">=</span> customCompiler</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    ctx</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> withItemBody removeIndexHtml</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> ctx <span class="fu">=</span> postCtx tags</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Hang on, what’s that <code>saveSnapshot</code> in the middle there? I never mentioned that! Well, that allows us to save a snapshot of our page <em>as it currently stands</em> at that point in the compilation. This is handy, because we’ll want to include the content of the post in RSS feeds and the like, but at that point we only want the content, not the header, footer, and navigation. It is useful, then, to be able to save out a copy at the point where that is all we have and re-use it later, rather than having to recompile the whole thing again when generating feeds.</p>
<p>Finally, our <code>Rules</code> tell Hakyll where to get posts from, how to compile them, and where to put them.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; posts ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> posts tags <span class="fu">=</span> match (<span class="st">&quot;posts/*&quot;</span> <span class="fu">.||.</span> <span class="st">&quot;pending-posts/*&quot;</span>) <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">metadataRoute dateAndTitle <span class="ot">`composeRoutes`</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">customRoute simplifyURL</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> postCompiler tags</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This is mostly pretty simple. You can see we generate posts from both the <code>posts</code> and <code>pending-posts</code> directories (the latter are generated, but not included in the index, so I can preview them because I know the URL but they’re not “published” as such). We use the <code>date</code> and <code>title</code> metadata fields to generate a filename and then from that create a simplified URL. Finally we compile it with the <code>postCompiler</code> we defined above.</p>
<p>I took the idea (and the code) for the simplified URL route from <a href="http://yannesposito.com/Scratch/en/blog/Hakyll-setup/">Yann Esposito’s Hakyll setup</a>. Instead of <code>post-name.html</code>, it outputs a file to <code>post-name/index.html</code>, allowing us to drop the <code>.html</code> part when visiting the page in the browser. It is defined as follows.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; simplifyURL ::</span> <span class="dt">Identifier</span> <span class="ot">-&gt;</span> FilePath</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> simplifyURL ident <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   takeDirectory p <span class="fu">&lt;/&gt;</span> takeBaseName p <span class="fu">&lt;/&gt;</span> <span class="st">&quot;index.html&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> p <span class="fu">=</span> toFilePath ident</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This works nicely, but as Yann points out in his post it leaves a lot of links with <code>index.html</code> at the end of them floating around. We basically never want this, so Yann suggests the following code to strip <code>index.html</code> from the end of all links (I’ve modified it slightly to work with <code>String</code>s instead of <code>Item</code>s).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; removeIndexHtml ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> removeIndexHtml body <span class="fu">=</span> return <span class="fu">$</span> withUrls removeIndexStr body</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     removeIndexStr url <span class="fu">=</span> <span class="kw">case</span> splitFileName url <span class="kw">of</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       (dir, <span class="st">&quot;index.html&quot;</span>) <span class="fu">|</span> isLocal dir </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">-&gt;</span> init dir</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       _                                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">-&gt;</span> url</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     isLocal uri <span class="fu">=</span> not <span class="fu">$</span> <span class="st">&quot;://&quot;</span> <span class="ot">`isInfixOf`</span> uri</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>That all fits together quite nicely. There’s just one snag… that <code>dateAndTitle</code> function passed to <code>metadataRoute</code> doesn’t actually exist! We’re going to have to write it.</p>
<h2 id="extracting-the-date-and-title-from-metadata">Extracting the date and title from metadata</h2>
<p>As mentioned, Hakyll by default expects the date and title to be included in the filename and as such it can just change the extension and have done with it. Because we might be naming files after the modules they define (in the case of Literate Haskell files), a post such as this one would end up with a URL looking like <a href="http://dpwright.com/posts/Posts.html" class="uri">http://dpwright.com/posts/Posts.html</a>, which would be very odd. Even without this, it’s quite easy to write a post which accidentally has a subtly different title to its filename, which would be confusing.</p>
<p>Because of this, we’d much rather pull the <code>date</code> and <code>title</code> fields out of the post’s metadata, which ensures consistency and reduces repetition. Unfortunately, Hakyll provides no clear way to do this natively, so we have to make use of its generic functionality for routing based on metadata. We do this using the <code>metadataRoute</code> function, above, which takes as its parameter a function taking a posts <code>Metadata</code> and returning the <code>Routes</code> associated with that metadata, and returns <code>Routes</code> which can be used by the <code>Rules</code> to which is it passed. Its type signature looks like this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">metadataRoute ::</span> (<span class="dt">Metadata</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span>) <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The function we passed to <code>metadataRoute</code> above was <code>dateAndTitle</code>, which we’ll define here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; dateAndTitle ::</span> <span class="dt">Metadata</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> dateAndTitle meta <span class="fu">=</span> fromMaybe idRoute <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mkName <span class="fu">&lt;$&gt;</span> getField <span class="st">&quot;title&quot;</span> <span class="fu">&lt;*&gt;</span> getField <span class="st">&quot;date&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">mkName t d </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">setBaseName <span class="fu">$</span> date d <span class="fu">&lt;/&gt;</span> title t</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">getField   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="ot">`M.lookup`</span> meta)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">date       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">formatTime defaultTimeLocale</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;%Y/%m/%d&quot;</span> <span class="fu">.</span> readTime</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">title      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">map toLower <span class="fu">.</span> intercalate <span class="st">&quot;-&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">map (filter isAlphaNum) <span class="fu">.</span> words</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>There’s a lot going on in this definition so we’ll go through it carefully.</p>
<ul>
<li>We begin with a call to <code>fromMaybe</code> passing <code>idRoute</code> as the fallback. This means that what follows might fail, and should it fail we’ll just use the filename as-is (falling back on Hakyll’s default behaviour).</li>
<li><code>mkName</code> is called in applicative style, passing two calls to <code>getField</code> (defined locally). We know that <code>Maybe</code> forms an <code>Applicative</code>, and that we are expecting a <code>Maybe</code> here as the second parameter to <code>fromMaybe</code>. So we can infer what will happen here: it will try to get the <code>title</code> and <code>date</code> fields, and if either of them fail it will return <code>Nothing</code>, otherwise it will pass them both to <code>mkName</code>.
<ul>
<li>If you are familiar with applicative style this will have been immediately obvious. If not, it is worth reading through the previous bullet-point and associated code a few times until you get a feeling for what’s happening. We’ve reduced what would have been a lot of sanity checking and nested <code>if</code> statements into a single line of code which, when you are used to this style, reads extremely clearly. It’s a very powerful technique.</li>
</ul></li>
<li>Moving onto the local definitions: <code>getField</code> is simply a shortcut for calling <code>Map</code>’s <code>lookup</code> function in order to get the respective fields out of the passed <code>Metadata</code>.</li>
<li><code>mkName</code> takes the title and the date as parameters, calls the <code>date</code> and <code>title</code> functions in order to turn them into strings, and then sticks them together with a <code>/</code>. Finally it calls <code>setBaseName</code> (defined below), which works similarly to Hakyll’s native <code>setExtension</code> except that, obviously, it sets the basename.</li>
<li><code>date</code> normalises the <code>date</code> field to the simple <code>YYYY/mm/dd</code> format we want to use for our filenames. This means you can write the date in any of Hakyll’s supported date formats and the filename will turn out OK.</li>
<li><code>title</code> splits the title up into words, filters out any strange symbols using <code>isAlphaNum</code> (which, thankfully, is Unicode-friendly so that Japanese titles aren’t considered “strange symbols”), and then joins those words back up with <code>-</code> dashes so that we don’t have to worry about <code>%20</code>s appearing all over our URLs. Finally, it makes the whole thing lower-case.</li>
</ul>
<p>Function definitions like the one above are part of the reason I love Haskell and others might hate it. There’s so much functionality packed into so little code there, you do have to slow down a little bit and read it carefully to follow it, at least until you are used to code written in the style used (in this case, some applicative style and a little bit of point-free notation thrown in for good measure). Add to this the expressivity of Haskell which allows for a number of different styles, so that even once you’ve got used to the style used here you may open another codebase and find that the style employed there is completely different! There is a not-unreasonable argument that this is problematic; that encouraging a very particular style at the language level (as Python does, for example) makes it a lot easier to read unfamiliar code.</p>
<p>I am sympathetic to this argument up to a point. It does make sense, especially if you are dealing with large numbers of programmers relatively inexperienced in the language (thus not exposed to the various styles of programming available), who regularly have to jump into different codebases (thus run into these different styles frequently). However, I do think the benefits outweight the disadvantages. Firstly, inexperienced programmers are likely to be limited to relatively isolated areas of the code, so they will have time to get used to whatever style is employed there before moving on and learning some new style along with the next codebase. Secondly, <em>once you have learnt</em> the style, it is actually dramatically <em>faster</em> to read succinct code like this than trudging through reams of <code>if</code> statements and manual <code>for</code>-style loops. It’s also harder to make mistakes, as the code fits more closely with the thing it’s trying to do.</p>
<p>So there is a learning curve, and learning curves cost time and money when training programmers. But when the initial hump is traversed<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, the increase in productivity is well worth the effort.</p>
<p>OK, after that little detour, let’s get back to it! The <code>dateAndTitle</code> function above made use of two helper functions which haven’t actually been defined. The first is <code>readTime</code>, which we use to normalise the date format. It takes a date string and converts it to a <code>UTCTime</code> which we can manipulate.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; readTime ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">UTCTime</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> readTime t <span class="fu">=</span> fromMaybe empty&#39; <span class="fu">.</span> msum <span class="fu">$</span> attempts <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   attempts </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> [parseTime defaultTimeLocale fmt t <span class="fu">|</span> fmt <span class="ot">&lt;-</span> formats]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   empty&#39;   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> error <span class="fu">$</span> <span class="st">&quot;Could not parse date field: &quot;</span> <span class="fu">++</span> t</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   formats  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> [ <span class="st">&quot;%a, %d %b %Y %H:%M:%S %Z&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%dT%H:%M:%S%Z&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d %H:%M:%S%Z&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d %H:%M&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%Y-%m-%d&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%B %e, %Y %l:%M %p&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%B %e, %Y&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  , <span class="st">&quot;%b %d, %Y&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  ]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The basic idea for the implementation is taken from Hakyll itself, from its <code>getItemUTC</code> which is defined in <a href="https://hackage.haskell.org/package/hakyll-4.2.2.0/docs/src/Hakyll-Web-Template-Context.html"><code>Hakyll.Web.Template.Context</code></a>. Unfortunately, the type signature for that function is quite a lot more complicated than we need, so I’ve extracted the parts we need into a simple <code>String -&gt; UTCTime</code> function here. If the date doesn’t match any of the supported formats <code>readTime</code> will simply crash with an error – not the best error handling but since we’re always going to be running this interactively it doesn’t really matter.</p>
<p><code>setBaseName</code> turns a string into a <code>FilePath</code>, which it can then manipulate using Haskell’s native <code>replaceBaseName</code> functionality.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; setBaseName ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Routes</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> setBaseName basename <span class="fu">=</span> customRoute <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   (<span class="ot">`replaceBaseName`</span> basename) <span class="fu">.</span> toFilePath</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="pages">Pages</h2>
<p>Another form of content on this blog is that of “pages”, which are basically posts except that they don’t have a date or tags associated with them and they are not indexed or included in feeds. As a result they are super-simple – we don’t need to save a snapshot, or to parse the date or change the filename. Instead I can just compile it with a template designed for the purpose and set the extension. We’ll use the same <code>customCompiler</code> as posts for consistency, but we’ll just pass the <code>defaultContext</code> as we don’t need any of the extra metadata posts use.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pageCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pageCompiler <span class="fu">=</span> customCompiler</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/page.html&quot;</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">ctx</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">ctx</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> ctx <span class="fu">=</span> defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The rules for pages are equally simple – just grab anything from the <code>pages</code> folder, compile it using the <code>pageCompiler</code> and set its extension to <code>html</code>. This is expressed below.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; pages ::</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> pages <span class="fu">=</span> match <span class="st">&quot;pages/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> customRoute simplifyURL</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile pageCompiler</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>That’s about it for compiling posts! This is <em>almost</em> all you need to get a Hakyll site up and running – the only problem is since we still don’t have post indexing you have to know the URL of the post you want to read before you read it! This is about as complicated as it gets with Hakyll though – if you’ve followed this post, the rest should be easy! We’ll cover indexing next, after which we’ll go about adding special features one at a time.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Anybody who’s read code using the <code>Lens</code> library will get the joke.<a href="#fnref1">↩</a></p></li>
</ol>
</div>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>

</feed>
