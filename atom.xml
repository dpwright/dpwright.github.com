<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Wright Access</title>
    <link href="http://dpwright.com/atom.xml" rel="self" />
    <link href="http://dpwright.com" />
    <id>http://dpwright.com/atom.xml</id>
    <author>
        <name>Daniel P. Wright</name>
        <email>dani@dpwright.com</email>
    </author>
    <updated>2017-08-02T20:09:00Z</updated>
    <entry>
    <title>Generating this website part 8: Crossposting</title>
    <link href="http://dpwright.com/posts/2017/08/02/generating-this-website-part-8-crossposting/index.html" />
    <id>http://dpwright.com/posts/2017/08/02/generating-this-website-part-8-crossposting/index.html</id>
    <published>2017-08-02T20:09:00Z</published>
    <updated>2017-08-02T20:09:00Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 2 August, 2017</div>



<div class="sidenote">
<p>This is part eight of the “generating this website” series. To read the rest of the series, go to the series index <a href="/tags/generating%20this%20website">here</a></p>
</div>
<p>Occasionally (very occasionally in fact – this has only happened once!) I write something which is intended to be cross-posted to another site as well as being hosted on my own. I did this with my post on <a href="/posts/2013/08/21/writing-a-tcp-server-in-haskell-using-proxies-and-pipes">proxies and pipes</a>, which was also pretty much the first bit of Haskell code I put out, and is probably hopelessly outdated by this point, but there it is.</p>
<p>The idea here is that I want to be able to write a post on my site as usual, but also have it uploaded to the site that I’m contributing to. I have another script which deals with uploading the post to WordPress, so all this part of the generator has to do is add a header to the top of the post linking to the other version of the site.</p>
<p>Let’s begin with the standard fluff…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Crossposting</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>All this module really does is expose a function, <code>crosspostField</code>, which returns the content of the header we want to insert at the top of the page if it’s a crosspost. This is fed into the template for <a href="/posts/2014/09/29/generating-this-website-part-2-posts">posts</a>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; crosspostField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> crosspostField key <span class="fu">=</span> field key <span class="fu">$</span> getCrosspostHeader key <span class="fu">.</span> itemIdentifier</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The idea behind this is to extract the field identified by <code>key</code> from the metadata at the top of the post file, and pass it off to <code>getCrosspostHeader</code> to turn into a header body. The job of this function, then, is to look in the <code>templates/xp/</code> folder for a template file whose name matches the value of the field, render that template if found, and return it – otherwise we return an empty string. This is given below.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; getCrosspostHeader ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Identifier</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> getCrosspostHeader key n <span class="fu">=</span> getMetadata n <span class="fu">&gt;&gt;=</span> toHeader <span class="fu">.</span> lookupString key</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> loadHeader        <span class="fu">=</span> fmap itemBody <span class="fu">.</span> header</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         toHeader          <span class="fu">=</span> maybe (return <span class="st">&quot;&quot;</span>) loadHeader</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         header name       <span class="fu">=</span> makeItem <span class="st">&quot;&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                         <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate (templatePath name) xpContext</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         templatePath name <span class="fu">=</span> fromFilePath <span class="fu">$</span> <span class="st">&quot;templates/xp/&quot;</span> <span class="fu">++</span> name <span class="fu">++</span> <span class="st">&quot;.html&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         xpContext         <span class="fu">=</span> defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note that the header itself is a template, rendered using the <code>defaultContext</code> context. This means it has access to other fields in the post’s metadata – useful if you want to link to the other version of the site, as you can put its URL or ID into the metadata.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 7: Slideshows</title>
    <link href="http://dpwright.com/posts/2016/01/22/generating-this-website-part-7-slideshows/index.html" />
    <id>http://dpwright.com/posts/2016/01/22/generating-this-website-part-7-slideshows/index.html</id>
    <published>2016-01-22T18:50:00Z</published>
    <updated>2016-01-22T18:50:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">22 January, 2016</div>



<div class="sidenote">
<p>This is part seven of the “generating this website” series. To read the rest of the series, go to the series index <a href="/tags/generating%20this%20website">here</a></p>
</div>
<p>Occasionally I give talks for which I want to write up an accompanying blog post. Since Pandoc supports various slideshow formats directly, I can actually use the same system both for my blog posts and for writing my slides – in fact, I can use the same source to produce all three: the post, the slides, and any accompanying code – using literate programming!</p>
<p>Of course, this won’t always work. Sometimes, the way you present things in a talk must flow quite differently from the way you present them in a blog post. But this is a limitation of the presentation media, not a technical limitation, and so I’d like to support both formats. Here’s an outline of what we’re going to try and achieve:</p>
<ul>
<li>If the post is in the <code>posts/</code> directory, it will be rendered into a blog post as usual.</li>
<li>If the post has the metadata field <code>slides</code>, it will be processed as a slideshow of the format specified in that field. So, if the <code>slides</code> field contains the string <code>RevealJSSlides</code> then the file will generate a <code>reveal.js</code> slideshow; if it contains <code>S5Slides</code> it will be formatted as S5, and so on. For a full list of supported slideshow formats, see the <a href="https://hackage.haskell.org/package/pandoc-1.13/docs/Text-Pandoc-Options.html#t:HTMLSlideVariant">pandoc documentation</a>.</li>
<li>The slides compiler will search both the <code>posts</code> and <code>slides</code> directories, so that it is possible to generate slides without generating a post.</li>
<li>Any files in the <code>slides/</code> directory which do not contain the ‘slides’ metadata field will default to <code>RevealJSSlides</code></li>
<li>Slides will be output into the <code>slides/</code> directory, regardless of which directory they came from.</li>
<li>If the file extension is <code>.lhs</code>, the file will be treated as literate haskell as usual.</li>
</ul>
<p>All in all, this set of requirements should be fairly simple; the only potentially tricky part is searching for slides using the posts’ metadata rather than their filename, and even that should just come down to quitting out of the compiler early in case the <code>slides</code> field isn’t present.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>As always, we begin by specifying <code>OverloadedStrings</code> and importing <code>Hakyll</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Slides</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Monoid’s <code>mappend</code> operator is also useful to have.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid</span> ((&lt;&gt;))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll be making use of a custom pandoc compiler to actually output the slides, so we’ll need to bring the appropriate pandoc options into scope.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Options</span> (</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">WriterOptions</span> (<span class="fu">..</span>),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">HTMLSlideVariant</span>(<span class="fu">..</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’m also going to import the <code>Posts</code> module as the compiler I use for generating slideshows will be similar to the one used for generating standard blog posts, so I’ll want to reuse that. Check out the <a href="/posts/2014/09/29/generating-this-website-part-2-posts">post on posts</a> for more information on what’s in this module.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="locating-slideshow-files">Locating slideshow files</h2>
<p>The first step is to create some Hakyll <code>Rules</code> specifying which files to match and where to put them. The requirements outlined above essentially specify two alternatives:</p>
<ul>
<li>Files in the <code>posts</code> directory which <em>must</em> contain the <code>slides</code> metadata field (otherwise they won’t be recognised as slideshows).</li>
<li>Files in the <code>slides</code> directory which <em>may</em> contain a <code>slides</code> field (and if not default to <code>RevealJSSlides</code>).</li>
</ul>
<p>The easiest of the two is the latter – just match the files and compile them.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; slideshows ::</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slideshows <span class="fu">=</span> match <span class="st">&quot;slides/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> setExtension <span class="st">&quot;.html&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compileSlideshow</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Picking out those posts which contain a <code>slides</code> metadata field requires the <code>matchMetadata</code> function which was introduced in hakyll 4.6.4.0. We use <code>version</code> to keep slides distinct from normal posts, allowing both to be built and preventing slideshows from being indexed. After that, we compile the slideshow as above.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; slideshowPosts ::</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slideshowPosts <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   matchMetadata <span class="st">&quot;posts/*&quot;</span> isSlideshow <span class="fu">.</span> version <span class="st">&quot;slideshow&quot;</span> <span class="fu">$</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">do</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">route <span class="fu">$</span> setExtension <span class="st">&quot;.html&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">compileSlideshow</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     isSlideshow <span class="fu">=</span> maybe <span class="dt">False</span> (const <span class="dt">True</span>) <span class="fu">.</span> lookupString <span class="st">&quot;slides&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>compileSlideshow</code> rule extracts the <code>slides</code> metadata in order to decide which type of slideshow to generate, then passes it to <code>slidesCompiler</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; compileSlideshow ::</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> compileSlideshow <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> getUnderlying</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="fu">&gt;&gt;=</span> (<span class="ot">`getMetadataField`</span> <span class="st">&quot;slides&quot;</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="fu">&gt;&gt;=</span> slidesCompiler <span class="fu">.</span> maybe <span class="dt">SlidySlides</span> read</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="fu">&gt;&gt;=</span> relativizeUrls</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="generating-the-slideshows">Generating the slideshows</h2>
<p>Now that we know which files we should be creating slideshows for, we’re ready to do the actual generation! As usual, we start with the context, which is very simple – just attach a date to the default context.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; slidesCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesCtx </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%e %B, %Y&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&lt;&gt;</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Pandoc supports a variety of different slideshow formats, and I haven’t settled on one in particular, so I’ll add support for them individually as I try them out. Each slideshow engine requires a different template, so we’ll make a quick lookup for that.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; slidesTemplate ::</span> <span class="dt">HTMLSlideVariant</span> <span class="ot">-&gt;</span> <span class="dt">Identifier</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesTemplate <span class="dt">RevealJsSlides</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;templates/slides/reveal.js.html&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesTemplate <span class="dt">S5Slides</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;templates/slides/s5.html&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesTemplate <span class="dt">SlidySlides</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;templates/slides/slidy.html&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesTemplate s              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> error <span class="fu">$</span> <span class="st">&quot;Unsupported slide variant: &quot;</span> <span class="fu">++</span> show s</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The final clause covers the case where I haven’t yet added support for one of Pandoc’s supported slideshow formats.</p>
<p>Another difference between the various HTML slideshow engines is which HTML they expect to be working with! Reveal.js expects HTML 5, while the others I’ve tried all work better with HTML 4 source. I’ve made a quick lookup for that as well.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; slidesExpectHTML5 ::</span> <span class="dt">HTMLSlideVariant</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesExpectHTML5 <span class="dt">RevealJsSlides</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">True</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesExpectHTML5 _              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">False</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, the compiler itself! This takes a standard pandoc compiler, adds the <code>readerOptions</code> and <code>writerOptions</code> we defined in the entry on standard <a href="/posts/2014/09/29/generating-this-website-part-2-posts">posts</a>, and then customizes them with slideshow-specific functionality.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; slidesCompiler ::</span> <span class="dt">HTMLSlideVariant</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> slidesCompiler sv <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   pandocCompilerWith readerOptions slideWriterOpts</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate (slidesTemplate sv) slidesCtx</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     slideWriterOpts </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> writerOptions</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">{ writerSlideVariant </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sv</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, writerHtml5        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> slidesExpectHTML5 sv</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, writerIncremental  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">True</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">}</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="added-extras">Added extras</h2>
<p>That’s really all there is to it on the Hakyll side! To make writing slides and blog posts in the same file easier, I have a couple of CSS <code>div</code> classes set up in the slideshow style files – for instance, anything inside a <code>&lt;div class=&quot;notes&quot;&gt;</code> will be shown in the blog post but not in the slideshow. I have yet to add the reverse functionality but I can’t imagine it would be too difficult. All that can be done with a bit of CSS cleverness, though, with no special support from Hakyll itself.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Writing a ZX Spectrum game in Haskell</title>
    <link href="http://dpwright.com/posts/2015/07/17/writing-a-zx-spectrum-game-in-haskell/index.html" />
    <id>http://dpwright.com/posts/2015/07/17/writing-a-zx-spectrum-game-in-haskell/index.html</id>
    <published>2015-07-17T08:41:23Z</published>
    <updated>2015-07-17T08:41:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">17 July, 2015</div>



<p>Haskell, <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/mark.pdf">the world’s finest imperative language</a>, can now be used to write games for the ZX Spectrum, the world’s finest 80s microcomputer. This post introduces the two packages that make this possible:</p>
<ul>
<li><a href="https://github.com/dpwright/z80">z80</a>, a fully-functional Z80 macro-assembler embedded in Haskell, and</li>
<li><a href="https://github.com/dpwright/zxspectrum">zxspectrum</a>, a set of utilities and macros to make working with the ZX Spectrum specifically easier, including labels for important routines in the Spectrum 48k ROM.</li>
</ul>
<p>Here’s the game we’re going to be making. It’s basically a port of the project pursued over the course of <a href="https://chuntey.wordpress.com/2012/12/18/how-to-write-zx-spectrum-games-chapter-1/">this excellent set of ZX Spectrum tutorials</a>, which itself is a clone of the game centipede. You can play it directly on this webpage, or you can download the <code>.tap</code> file for playing in an emulator <a href="lambdaman.tap">here</a>.</p>
<script src="jdataview.js"></script>
<script src="jsspeccy-core.min.js"></script>
<script>
  function go() {
    var jsspeccy = JSSpeccy('speccy', {
      'autostart': false,
      'autoload': true,
      'scaleFactor': 1.5,
      'loadFile': 'lambdaman.tap'
    });
  }
</script>
<center>
<figure>
<div id="speccy">
<img src onerror="go()" />
</div>
<figcaption>
Movement: QAOP/HJKL Fire: Space<br /> Powered by <a href="http://jsspeccy.zxdemo.org">jsspeccy</a>
</figcaption>
</figure>
</center>
<p>I made some of my own customisations along the way, but credit for most of the actual assembly code must go to those tutorials, which were an excellent resource for me while I was testing these packages too. Thanks!</p>
<p>OK, without further ado, let’s get started! This is a literate Haskell post, so when it is executed the lines prefixed with <code>&gt;</code> are compiled and run, and the .tap file which is embedded above is generated.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>The initial pragmas and imports to most <code>zxspectrum</code> projects in Haskell will look similar to this. Firstly, we need the following language extensions:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE RecursiveDo #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>OverloadedStrings</code>, as always, is just a convenience – but a very useful one as any strings you want to print to the ZX Spectrum screen are bytestrings, so it’s nice just to be able to input them as strings. <code>RecursiveDo</code> allows us to define labels after they are used, i.e. to jump to code which comes later in the file – a common idiom in assembly programming.</p>
<p>The following language pragma and import are optional – they give us access to Unicode symbols which I think happen to look nicer on this blog.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we can move onto the imports. Of course the two most common imports give us the assembler itself and speccy utilities:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Z80</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">ZXSpectrum</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <a href="https://github.com/dpwright/z80">z80 package</a> tries to define an assembler as close as possible to the original Z80 assembly language – some of the syntactic differences I will cover in a moment – but the result of this is that some names from the Prelude are overloaded. Here we hide those names so we don’t get clashes. If you really need access to the original functions, you can always re-import the Prelude qualified.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude</span>   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">hiding (and, or)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Bits</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">hiding (xor, bit)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We don’t actually use anything from <em><code>Data.Bits</code></em> in this tutorial, so the import is redundant in this case – I include it here so you can see all the names you may have to hide when you make these standard imports.</p>
<p>Finally we import <em><code>Data.ByteString</code></em> so that we can do things like test the length of strings we embed into our program.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.ByteString</span> <span class="kw">as</span> <span class="dt">BS</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This particular program will all be embedded within a single <code>main</code> function, however it does make use of one Haskell datatype, which we use in a code-generating macro. Types can’t be defined inline, so let’s define it up here so we can use it later.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Direction</span> <span class="fu">=</span> <span class="dt">DUp</span> <span class="fu">|</span> <span class="dt">DDown</span> <span class="fu">|</span> <span class="dt">DLeft</span> <span class="fu">|</span> <span class="dt">DRight</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>For convenience, I’m also going to put the title screen into a global constant since it’s rather a long filename. You can download the title screen (a result of my unparalleled skill in art, as I’m sure you’ll agree), <a href="lvtc.scr">here</a>. You’ll need a ZX Spectrum SCR viewer to view it, though.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> titleScreen <span class="fu">=</span> <span class="st">&quot;static/posts/2015/07/17/writing-a-zx-spectrum-game-in-haskell/lvtc.scr&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="main-function-and-static-data"><code>main</code> function and static data</h2>
<p>The first line of our program proper sets off the assembler on the rest of the code.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> defaultMain <span class="st">&quot;lambdaman&quot;</span> titleScreen <span class="fu">.</span> org <span class="bn">0x6000</span> <span class="fu">$</span> mdo</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>defaultMain</code> is provided by the <a href="https://github.com/dpwright/zxspectrum">zxspectrum</a> package and right now is fairly unsophisticated: it takes the name of the program, the filename of its loading screen (in the ZX Spectrum standard <code>.scr</code> format), and an <code>ASMBlock</code>, and outputs (as a side effect) a <code>.tap</code> file ready to load in an emulator. Future versions may include some command-line parsing so things like the loading screen are optional, but for now it’s very simple.</p>
<p>The <code>z80</code> package provides a type called <code>Z80</code> which represents the state of the assembler – the functions representing Z80 instruction code form an EDSL inside this monad. To get from a <code>Z80</code> to an <code>ASMBlock</code>, you need to pass it to <code>org</code>, which will set the origin location, from which all further labels are offset. This is slightly different from standard assembler, where <code>org</code> was just an assembler directive which could be called at any time.</p>
<p>Finally the <code>mdo</code> above opens a <code>RecursiveDo</code> block. If you’re not familiar with Recursive Do, it’s basically the same as <code>do</code> except that you can use values before they are defined.</p>
<p>The loader code generated by <code>defaultMain</code> will, by default, assume that the entry point to your application matches the first line of assembly – i.e. the address you pass to <code>org</code>. However, we often want to define a block of static data that we will modify in our program first, and begin execution after this. This is made possible by the <code>beginExecution</code> directive, which sets the entry point to the address at which it is called. It may be used at most once in a program, and if it is never used the entry point is assumed to be at the start.</p>
<p>This is what allows us to define the following data without worrying about the Spectrum trying to execute it!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">lambdamanScoreText </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot;lambdaman &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">centipedeScoreText </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="st">&quot; centipede&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   lmName </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb lambdamanScoreText</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   cpName </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb centipedeScoreText</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here <code>lambdamanScoreText</code> is a <em>Haskell</em> variable which we use immediately below to define <code>lmName</code>, an area of memory in our output binary containing the value in <code>lambdamanScoreText</code>. We do this because later we will want to query it for its length, so it is useful to store it in a variable rather than using a literal. The same goes for the centipede. These represent the labels which appear at the bottom of the screen.</p>
<p>Note the use of the <code>labelled</code> directive, which simply returns the location of the thing you define in its argument. For reference, here’s what this would look like in standard assembler:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>lmName: defb &quot;lambdaman &quot;</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>cpName: defb &quot; centipede&quot;</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The Haskell is a bit more verbose here, but we make up for that later with its macro-defining power. Onwards!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   plx  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="dv">0</span>]    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- player&#39;s x coordinate.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ply  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="dv">0</span>]    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- player&#39;s y coordinate.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   pbx  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="bn">0xff</span>] </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- player&#39;s bullet coordinates.</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   pby  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="bn">0xff</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   dead </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="dv">0</span>]    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- flag - player dead when non-0.</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here we define the state relating to the player. <code>plx</code> and <code>ply</code> represent the player’s own co-ordinates, while <code>pbx</code> and <code>pby</code> represent the co-ordinates of the bullet the player fires. <code>dead</code> simply tells us if the player has been killed.</p>
<div id="sidenote">
<p>The original tutorials on which this is based swap the <em>x</em> and the <em>y</em> co-ordinates, so that <em>x</em> describes how far down the screen we are and <em>y</em> how far across. I found this too confusing, so I have a more traditional co-ordinate system here where <em>x</em> is horizontal, <em>y</em> is vertical, and the origin is at the top-left of the screen.</p>
</div>
<p>Another syntactic difference here is the use of Haskell list notation when passed to <code>defb</code>. <code>defb</code> takes either a <code>ByteString</code> or a list of <code>Word8</code>s, and puts the values into the final binary file as-is.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   lambdamanScore </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="dv">0</span>, <span class="dv">0</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   centipedeScore </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="dv">0</span>, <span class="dv">0</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Fairly obviously, here we keep track of the scores.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="co">-- Table of segments.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="co">-- Format: 3 bytes per entry, 10 segments.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="co">-- byte 1: 255=segment off, 0=left, 1=right.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="co">-- byte 2 = x (vertical) coordinate.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="co">-- byte 3 = y (horizontal) coordinate.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> numseg <span class="fu">=</span> <span class="dv">10</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segmnt   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb (replicate (fromIntegral numseg <span class="fu">*</span> <span class="dv">3</span>) <span class="dv">0</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segsLeft </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> labelled <span class="fu">$</span> defb [numseg]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here we set up some space for the centipede segments. The comments describe the format – the co-ordinates of that segment and whether it is going left or right (or has already been destroyed).</p>
<h2 id="user-defined-graphics">User-Defined Graphics</h2>
<p>Finally, let’s define our “assets” – graphic and sound data that will be used in the game. Back in the day, this is how you used to define new graphics for the ZX Spectrum:</p>
<center>
<img src="udg.png" />
</center>
<p>The <a href="https://github.com/dpwright/zxspectrum">zxspectrum</a> package defines a macro called <code>udg</code> which can perform this calculation for you. We use it here to define our four main single-charater sprites:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   udgs <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     udg </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;        &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot; ss     &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   s    &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   s    &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;  s s   &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot; s   s  &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot; s    s &quot;</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     udg </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;        &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;        &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;  ssss  &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot; ssssss &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;        &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;        &quot;</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     udg </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;        &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;  ssss  &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot; ssssss &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot; ssssss &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;  ssss  &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;        &quot;</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     udg </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;   ss   &quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;  ssss  &quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot; s ss s &quot;</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>As you can see we take a list of 8 strings, each 8 characters long. Each space is considered “off”, while anything else (here I use the <code>s</code> character) is “on”. From this we can automatically generate the bytes representing that character.</p>
<p>These UDGs are defined one after another in memory. In a moment, we’ll put the location of the beginning of this block of memory in the special memory address <em><code>UDG_LOC</code></em>, which will tell the Spectrum ROM to look here when printing UDG characters.</p>
<h2 id="sound-effects">Sound Effects</h2>
<p>Sound on the ZX Spectrum – at least the original 48K version – is handled through the use of a simple square-wave beeper which can be set to oscillate at a certain frequency for a certain length of time (during which execution is blocked). As such sound effects are less “data” than they are functions which you call, setting the appropriate registers and executing the ROM routines which cause the beeper to oscillate (appropriately named <em><code>BEEPER</code></em>).</p>
<p>However, the <a href="https://github.com/dpwright/zxspectrum">zxspectrum</a> package provides a couple of macros to help with this. The one we use here, <code>playSeq</code>, takes a list of pairs specifying notes and their durations, and generates a function which will play the notes in sequence. Execution is blocked, so for in-game sound effects we have to keep them fairly short so they don’t interfere with gameplay too much. The sound effects below were designed and tracked by my good friend <a href="https://twitter.com/atype808">Alex May</a>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   sfxStart <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span> <span class="co">-- Start game</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     playSeq </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ (note <span class="dt">F_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.111</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">AS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.222</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">C_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.111</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">D_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.222</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">C_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.111</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">AS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.222</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">F_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">1.000</span>) ]</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   sfxHitC  <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span> <span class="co">-- Hit centipede segment</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     playSeq </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ (note <span class="dt">E_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.033</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">G_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.033</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">C_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.066</span>) ]</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   sfxHitM  <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span> <span class="co">-- Hit mushroom</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     playSeq </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ (note <span class="dt">F_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">3</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.033</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">FS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">3</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.033</span>) ]</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   sfxLost  <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span> <span class="co">-- Lambdaman died</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     playSeq </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ (note <span class="dt">GS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">C_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">A_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">B_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">GS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">AS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">G_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">A_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">FS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">GS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">F_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">G_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.083</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">E_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.748</span>) ]</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   sfxWon   <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span> <span class="co">-- Centipede died</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     playSeq </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[ (note <span class="dt">G_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.222</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">F_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.111</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">D_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.222</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">C_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.111</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">D_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.222</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">F_</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">5</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.333</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">, (note <span class="dt">AS_</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">4</span>, </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.777</span>) ]</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The comments describe what each effect does. <code>sfxHitC</code> and <code>sfxHitM</code> are both run during gameplay, so they have been kept short and sweet. The other effects happen at a point where the game is halted for some reason anyway, so we can afford to play something longer.</p>
<p>Since these are functions and not really data, of course, they must end with <code>ret</code> to return exeution to whatever called them – otherwise the program counter will just keep on running past them!</p>
<p>Our “data” defined, we are now ready to start the game. We tell <code>z80</code> to set the entry point for the program here:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   beginExecution</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="z80-syntax"><code>z80</code> syntax</h2>
<p>Before we get too heavily into the code, I’d like to say a brief word about the differences in syntax between traditional Z80 assembly code and the embedded assembler exposed by the <a href="https://github.com/dpwright/z80">z80</a> package.</p>
<p>As far as possible I’ve tried to keep the two very similar. The names of all operations are identical, with the exception of <code>in</code> which is a keyword in Haskell, so I have had to rename it to <code>in_</code>. Other than that, there are just a few differences to bear in mind if you are already familiar with Z80 assembly and you’d like to start using the Haskell z80 package:</p>
<ol style="list-style-type: decimal">
<li>Operands are separated by spaces, not commas, as per Haskell function syntax. Sometimes this means you have to surround expressions in parentheses where none would be required in z80asm. This is OK though, because,</li>
<li>Pointer dereferencing is done using square brackets <code>[]</code> instead of round parentheses <code>()</code>, as there is no sensible way to detect the presence or absence of the latter in Haskell. Instead, I hijack list syntax to represent dereferencing. Using the empty list or a list with more than one entry obviously won’t work here, so… don’t do that.</li>
<li>Traditionally z80asm is case-insensitive. Haskell is not. Personally, I find having a separate namespace (i.e. capital letters) for registers and ROM memory locations to be useful, but if you want to be able to use lower-case labels for your registers (<code>ld a 4</code> as opposed to <code>ld A 4</code>) you can; just add <code>import Z80.Operands.LowerCase</code> to the top of the file.</li>
<li>z80asm has one way to define labels: put a string with a colon at the end in the first column. <a href="https://github.com/dpwright/z80">z80</a> has three: As well as the <code>labelled</code> directive you’ve already seen, there’s also <code>label</code>, which is the closest equivalent to a standard labelling mechanism, and <code>withLabel</code> which introduces a <em>scoped</em> label; allowing you to use the same name for multiple labels in your program (useful for loops and such!)</li>
</ol>
<p>That’s about it – everything else falls naturally out of standard Haskell syntax. As we go on, I may show some examples of the two side-by-side so you can get a better idea.</p>
<h2 id="initialisation">Initialisation</h2>
<p>There are two simple bits of initialisation we’ll do once before the game starts, and then never need to touch again. The first is to set up the UDG location to print our “sprites”, and the second is to play the “game start” sound which will alert the user that the game has finished loading and they should get ready to play.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ldVia <span class="dt">HL</span> [<span class="dt">UDG_LOC</span>] udgs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   call sfxStart</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>ldVia</code>, as you will have guessed, is not standard z80 assembler. It is probably the simplest example of a macro, abstracting the common pair of operations:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">       ld <span class="dt">HL</span> udgs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">       ld [<span class="dt">UDG_LOC</span>] <span class="dt">HL</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This is because you can’t just arbitrarily load a number into memory; you have to load it into a register first and then load it from that register into the memory area you wanted. <code>ldVia</code> is so common that I have included it in the <a href="https://github.com/dpwright/z80">z80</a> package so you can use it out of the box.</p>
<div class="sidenote">
<p><code>ldVia</code> also gives us a nice example of how, by using Haskell, we can make our macros ‘type-safe’. Here’s its type signature:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">ldVia ::</span> (<span class="dt">Load</span> a c, <span class="dt">Load</span> b a) <span class="ot">=&gt;</span> a <span class="ot">→</span> b <span class="ot">→</span> c <span class="ot">→</span> <span class="dt">Z80ASM</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>What this says is, “given an <code>a</code> that can be loaded into from <code>c</code>, and a <code>b</code> that can be loaded into from <code>a</code>, as well as the initial <code>c</code>, produce the assembly code to load <code>c</code> into <code>a</code> and then load that <code>a</code> into <code>b</code>”. <em><code>Z80ASM</code></em> is just a type alias for <em><code>Z80 ()</code></em>.</p>
<p>Whether this form of type-safety is actually <em>useful</em> is up for debate. With a traditional macro assembler, the macro would just be expanded and then assembly would fail from there. And the type gymnastics I had to do to make this look like Z80 assembler mean that the error messages when you get it wrong can be less than useful. But it’s interesting! And the type signatures are still useful, if just as documentation.</p>
</div>
<p>After that, we play the intro sound by just calling the function we defined above to play it.</p>
<h2 id="setting-up-the-play-area">Setting up the play area</h2>
<p>That sets us up ready to start the game – the next step is to clear the screen (it currently has the loading screen on it) and set up the play area. We’ll do this between each round of the game, so let’s make a label we can jump back to when the player wins or loses.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   gameStart <span class="ot">←</span> label</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The first step is to set up our default colours and clear the screen to those colours. This is accomplished using a couple of helper functions from the <a href="https://github.com/dpwright/zxspectrum">zxspectrum</a> package.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   setBorderColour <span class="dt">Black</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   setAttrs <span class="dt">AttrDefault</span> <span class="dt">NoFlash</span> <span class="dt">Bright</span> (<span class="dt">Paper</span> <span class="dt">Black</span>) (<span class="dt">Ink</span> <span class="dt">White</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   call <span class="dt">CL_ALL</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The first two lines here are just macros which poke the appropriate data into the right bit of memory based on their parameters. The last line calls the <em><code>CL_ALL</code></em> routine, which is defined in the Spectrum ROM and clears the entire screen.</p>
<p>Next, let’s write the scores on the screen. This is a bit of a diversion from traditional centipede; in this game you are battling against the centipede to see who can destroy their opponent the most times (spoiler: it’s probably the centipede). Every time you play, either lambdaman gets hit and dies, incrementing the centipede’s score counter, or lambdaman destroys all ten of the centipede’s segments, incrementing the lambdaman score counter. Since scores are only modified between rounds we can get away with rendering them once at the beginning of the round and then leaving them untouched, rather than re-rendering them every frame, which will save us precious cycles.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">A</span> <span class="dv">2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   call <span class="dt">CHAN_OPEN</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   setCursorPos (<span class="dv">0</span>, <span class="dv">21</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">DE</span> lmName</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">BC</span> <span class="fu">.</span> fromIntegral <span class="fu">$</span> BS.length lambdamanScoreText</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   call <span class="dt">PR_STRING</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">BC</span> [lambdamanScore]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   call <span class="dt">OUT_NUM_1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> centipedeScoreStartX <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         fromIntegral <span class="fu">$</span> <span class="dv">31</span> <span class="fu">-</span> <span class="dv">3</span> <span class="fu">-</span> BS.length centipedeScoreText</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   setCursorPos (centipedeScoreStartX, <span class="dv">21</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">HL</span> centipedeScore</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   call <span class="dt">OUT_NUM_2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">DE</span> cpName</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">BC</span> <span class="fu">.</span> fromIntegral <span class="fu">$</span> BS.length centipedeScoreText</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   call <span class="dt">PR_STRING</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We make use of a number of standard Spectrum ROM routines to accomplish this. <em><code>PR_STRING</code></em> prints a string formed by taking the address stored in the <em><code>DE</code></em> register, and <em>n</em> bytes after that, where <em>n</em> is the number stored in the <em><code>BC</code></em> register.</p>
<p><em><code>OUT_NUM_1</code></em> and <em><code>OUT_NUM_2</code></em> are both for printing numbers; the former prints the number in the <em><code>BC</code></em> register, while the latter uses the <em><code>HL</code></em> register and, more importantly, right-aligns the number.</p>
<p>All this faffing about with what registers are used for what should convince you that just because we are writing Haskell, we are not writing high-level code here. This is still bona-fide z80 assembler; the Haskell is just there to give us a powerful, extensible macro system.</p>
<p>The next step is to restore the player and centipede state. From the second round onwards this will have been modified by playing the game, so we need to initialise it to decent starting values.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   xor <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld [dead] <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ldVia <span class="dt">A</span> [segsLeft] numseg</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ldVia <span class="dt">HL</span> [plx] <span class="fu">$</span> coords (<span class="dv">15</span>, <span class="dv">20</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>xor</code> performs an XOR between whatever you pass it and the accumulator <code>A</code>, putting the result back in <code>A</code>. <code>xor A</code>, therefore, is just a really cheap way to set <code>A</code> to 0, since anything XOR’d with itself is 0.</p>
<p>We use this trick to set the <code>dead</code> state to 0, meaning that the player is alive. We also set the number of remaining segments to equal the total number of segments, restoring any that were destroyed in the previous round. Lastly, we put lambdaman in the player’s starting position, at the middle of the screen on the bottom row.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ld <span class="dt">HL</span> segmnt</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   decLoopB <span class="dv">10</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [<span class="dt">HL</span>] <span class="dv">1</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- start off moving right.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">HL</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [<span class="dt">HL</span>] <span class="dt">B</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- use B register as x coordinate.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">HL</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [<span class="dt">HL</span>] <span class="dv">0</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- start at top.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">HL</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here we set the initial state of the segments, which may have been scattered around during the previous round. We make use of <code>decLoopB</code>, a macro which puts the number you pass it into the <em><code>B</code></em> register and then decrements it every iteration, using the Z80 <code>djnz</code> operation to drop out when it reaches 0.</p>
<p>The final bit of initialisation is to fill the play area with randomly scattered mushrooms.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   setAttrs <span class="dt">AttrTemp</span> <span class="dt">NoFlash</span> <span class="dt">Bright</span> (<span class="dt">Paper</span> <span class="dt">Black</span>) (<span class="dt">Ink</span> <span class="dt">Green</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   decLoopB <span class="dv">50</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="dt">AT</span>   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- control code for AT character.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call random   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- get a &#39;random&#39; number.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="bn">0x0f</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- want vertical in range 0 to 15.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printA        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call random   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- want another pseudo-random number.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="bn">0x1f</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- want horizontal in range 0 to 31.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printA        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="bn">0x91</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- UDG &#39;B&#39; is the mushroom graphic.</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>First we set the attributes such that the <em><code>INK</code></em> is set to green, the colour of mushrooms the world over. Then we loop down from 50, placing mushrooms each iteration. The code looks complicated, but it’s actually quite simple: first we print the <em><code>AT</code></em> metacharacter which has to be followed by <em>y</em> and <em>x</em> co-ordinates, in that order. The co-ordinates, then, are randomly generated using the <code>random</code> function, which we’ll define later, and their range is limited using some binary arithmetic. We print those, and then finally print our mushroom sprite, which is UDG value <code>0x91</code>.</p>
<h2 id="the-main-loop">The main loop</h2>
<p>We’re now ready to run the main loop of our game! Traditionally, you would define a label here, and then put an unconditional jump to that label at the end of your loop, but we have a macro to do that:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   loopForever <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here, “forever” is a bit of a stretch; naturally as this is assembly I can jump out of the loop to any other part of the program at any time – all the world’s a <code>GOTO</code>!</p>
<div class="sidenote">
<p>Astute readers may have noticed that I use <code>do</code> here instead of <code>mdo</code>. We don’t define any labels within this sub-block, or need to use those labels before their definition, so we don’t need to make use of recursive do. We get all the labels from the surrounding scope, which <em>is</em> recursive, regardless.</p>
</div>
<p>The main loop is mostly just a list of calls to other functions, which we’ll define below. The first thing we want to do every frame is delete the player sprite, so we can redraw it in its new position if it moved.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setCursorPos ([plx], [ply])</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call wspace</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here we first set the cursor position to the player’s position, and then use <code>wspace</code> to draw a whitespace character at the current cursor position. We are now ready to handle input.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call input</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call vimput</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I have two routines for input handling, though only one is necessary. The first uses the standard ZX Spectrum controls of Q, A, O, P and space, while the second uses vim-style controls of H, J, K, L, and enter. Both are always active, so you can play with whichever you prefer.</p>
<p>The above functions will have updated the player’s position if a move key was pressed. We are now ready to redraw the player at their current position.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setCursorPos ([plx], [ply])</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call splayr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Again we set our co-ordinates to the player’s position, but this time instead of using <code>wspace</code> to draw an empty character we use <code>splayr</code> to draw the player sprite.</p>
<p>Next up is bullet handling. Rather than going into lots of detail here, I’ll just leave the inline comments intact. We’ll take a proper look at these functions later.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call bchk    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- check bullet position.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call defbull </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- delete bullets.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call moveb   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- move bullets.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call bchk    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- check new position of bullets.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call pbull   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- print bullets at new position.</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The last thing that needs updating is the centipede segments, which we delegate to the function <code>processSegments</code></p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call processSegments</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, the end-of-frame handling. We put in an artificial delay because otherwise the game is unplayably fast:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     halt</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And then we check our win/lose conditions. First, we check the <code>dead</code> flag to see if it is non-zero – if it is, we were killed so we should jump to the <code>gameOver</code> routine.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [dead]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jp <span class="dt">NZ</span> gameOver</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Otherwise, we see if the number of remaining centipede segments is zero – if it is, we killed the centipede, so we can go to <code>gameWon</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [segsLeft]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jp <span class="dt">Z</span> gameWon</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If neither of these is true, we are still playing, so we can simply loop. The <code>loopForever</code> macro handles this for us, so we can simply end the block here.</p>
<h2 id="handling-input">Handling input</h2>
<p>The following two routines handle input. I’m going to do the vim ones first because they demonstrate something quite interesting about how the ZX Spectrum keyboard works.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>    vimput <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      ld <span class="dt">BC</span> <span class="dt">KEYS_HJKLret</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- vim keys</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      in_ <span class="dt">A</span> [<span class="dt">C</span>]           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- see what keys are pressed.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      rra                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Enter to fire</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      push <span class="dt">AF</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- remember the value.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      call <span class="dt">NC</span> fire        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- it&#39;s being pressed, fire</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      pop <span class="dt">AF</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- restore accumulator.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      rra                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- shift the next bit (l).</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      push <span class="dt">AF</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- remember the value.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      call <span class="dt">NC</span> mpr         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- it&#39;s being pressed, move right.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      pop <span class="dt">AF</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- restore accumulator.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      rra                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- get the next bit (k).</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      push <span class="dt">AF</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- remember the value.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      call <span class="dt">NC</span> mpu         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- being pressed, so move up.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      pop <span class="dt">AF</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- restore accumulator.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      rra                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- and the next bit (j)...</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      push <span class="dt">AF</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- remember the value.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      call <span class="dt">NC</span> mpd         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- being pressed, so move down.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      pop <span class="dt">AF</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- restore accumulator.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      rra                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- finally, the next bit (h).</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      call <span class="dt">NC</span> mpl         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- it&#39;s being pressed, move left.</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The keyboard on the Spectrum was divided into groups of five keys, which could be queried at once and each individual key accessed by checking one bit at a time from the resulting value. As it happens, H, J, K, L and enter formed one of these groups, so checking the vim keys can be done with a single query! We then just rotate the accumulator one bit at a time, calling the function to handle that particular bit of input each time that bit shows the key is pressed.</p>
<p>The standard Spectrum controls, Q, A, O, P, and space, are all from different groups on the keyboard, but they are generally the first or second key from that group, so although we have to do more queries, we don’t have to keep bitshifting the accumulator so much.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   input <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">BC</span> <span class="dt">KEYS_TREWQ</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     in_ <span class="dt">A</span> [<span class="dt">C</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rra</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call <span class="dt">NC</span> mpu</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">BC</span> <span class="dt">KEYS_GFDSA</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     in_ <span class="dt">A</span> [<span class="dt">C</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rra</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call <span class="dt">NC</span> mpd</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">BC</span> <span class="dt">KEYS_YUIOP</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     in_ <span class="dt">A</span> [<span class="dt">C</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rra</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     push <span class="dt">AF</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call <span class="dt">NC</span> mpr</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     pop <span class="dt">AF</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rra</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call <span class="dt">NC</span> mpl</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">BC</span> <span class="dt">KEYS_BNMsssp</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     in_ <span class="dt">A</span> [<span class="dt">C</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rra</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call <span class="dt">NC</span> fire</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>A real game would probably have user-mappable keys and much more complicated keyboard handling routines as a result, but for our purposes this is perfectly adequate.</p>
<h2 id="lambdaman">Lambdaman</h2>
<p>We’re ready to start defining the actual gameplay entities, beginning with our hero, the player – Lambdaman.</p>
<p>The following routine sets the cursor to the player position. It’s used to delete the character at the old position (by setting the cursor prior to moving the player, and drawing whitespace), and to draw the character into the new position (by setting the cursor after moving the player, and drawing the character).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   basexy <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setCursorPos ([plx], [ply])</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Player drawing is done by the <code>splayr</code> routine. <code>0x90</code> here is ASCII code for User Defined Graphic ‘A’, which is where we put our lambdaman sprite right at the start.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   splayr <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setAttrs <span class="dt">AttrTemp</span> <span class="dt">NoFlash</span> <span class="dt">Bright</span> (<span class="dt">Paper</span> <span class="dt">Black</span>) (<span class="dt">Ink</span> <span class="dt">Cyan</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="bn">0x90</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The majority of player code is spent implementing the functionality enabled by the keyboard mappings above. First, though, we’re going to make a little utility function to check for the presence of a mushroom in the direction we want to move. Lambdaman can’t stand on top of mushrooms, so if there is a mushroom we want to return early – before we move the character.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> checkMushroom direction <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">move <span class="dt">DLeft</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> dec <span class="dt">C</span>; </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">move <span class="dt">DRight</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> inc <span class="dt">C</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">move <span class="dt">DUp</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> dec <span class="dt">B</span>; </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">move <span class="dt">DDown</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> inc <span class="dt">B</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         ld <span class="dt">BC</span> [plx]     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- current coords.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         move direction  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- move to the position we want to check.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         call atadd      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- address of attribute at this position.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         cp <span class="bn">0x44</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- mushrooms are bright green (0x44).</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         ret <span class="dt">Z</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- there&#39;s a mushroom - return early.</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The interesting thing to note here is that <code>checkMushroom</code> is a <em>Haskell</em> function, not a function in our program (i.e. a labelled block). What does this mean? Essentially, it acts like a macro in a traditional macro assembler – the code in the function will be generated at the call-site. Crucially, this means that the <code>ret Z</code> above doesn’t return from the function <code>checkMushroom</code> (there is no such function in the output assembly). Instead, it returns from the calling function. This, it turns out, is exactly what we want: to drop out of the calling function before the move has been enacted, in the case that the move would result in Lambdaman standing on a mushroom.</p>
<p>In case it’s not clear from looking at the code, the way we check for mushrooms is simply to poll the attributes of the character. If it’s green, we know it’s a mushroom, because there are no other green objects in the game. This extremely primitive approach to collision detection was actually quite common in early Spectrum games!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mpl <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> plx           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- plx is &quot;player x&quot;.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">HL</span>]           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- what&#39;s the current value?</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="dt">A</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- is it zero?</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- yes - we can&#39;t go any further left.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     checkMushroom <span class="dt">DLeft</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- check for mushrooms.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dec [<span class="dt">HL</span>]            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- decrement x position.</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>OK, so here’s the first actual movement function, <code>mpl</code> (for “move player left”). The principle is fairly simple, and we’ll see this pattern repeated over the next few functions. The basic idea is to load the current value, check it’s not 0 (the very left of the screen), and return if it is, check there’s no mushroom there, and return if there is, and finally – if we’ve made it this far – decrement the player’s <span class="math inline">\(x\)</span> co-ordinate, thus moving it left.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mpr <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> plx</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="dv">31</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     checkMushroom <span class="dt">DRight</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This function should look familiar. Instead of checking for 0, we compare against 31 – the rightmost column – and instead of decrementing we increment. Otherwise it’s basically the same. I could have extracted this pattern out into a helper function like I did with <code>checkMushroom</code>, but I actually found there were just enough differences that writing out the code for each case ended up being clearer than passing the parts which change as parameters to a function.</p>
<p>The following functions do the same for the up and down directions.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mpu <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> ply</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     checkMushroom <span class="dt">DUp</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dec [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   mpd <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> ply</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="dv">20</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     checkMushroom <span class="dt">DDown</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The only other routine left to define is missile firing. We keep this simple by only supporting one missile on screen at a time – that missile’s position is stored globally along with the player, as <code>pbx</code> and <code>pby</code> (player bullet x/y). When the missile is off-screen (i.e. there is no missile), we set the <span class="math inline">\(y\)</span> value to 255.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fire <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pby]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">NZ</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> [plx]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dec <span class="dt">H</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [pbx] <span class="dt">HL</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We can check the existence of a missile by putting its <span class="math inline">\(y\)</span> position in a register and incrementing it. If it has position 255 it will wrap around to 0. If not, we know that it must be on the screen so we return early without spawning. To spawn the missile, we simply take the player’s position and increment the <span class="math inline">\(y\)</span> value, placing the missile immediately above the player.</p>
<h2 id="missiles">Missiles</h2>
<p>OK, so now the player’s fired a missile, we need to make it do something! Missiles move steadily up the screen, which can be achieved by simply decrementing the <span class="math inline">\(y\)</span> co-ordinate every frame the missile is on the screen. We first perform an increment to check whether the missile is on-screen. If not, we drop out immediately; if it is on-screen we subtract 2 – 1 to undo the increment we just performed and 1 more to actually move the missile. Finally, we load the register value back into <code>pby</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   moveb <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pby]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     sub <span class="dv">2</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [pby] <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Next, we need to handle collision detection between the missile and the mushrooms (we’ll deal with centipede collision in the next section). The <code>bchk</code> routine checks the position of the missile and, if it hits a mushroom, destroys it. We do this by first checking the <span class="math inline">\(y\)</span> co-ordinate to make sure there is a missile on screen at all, and if there is, checking the attribute at that location. If the character is green, that means it is a mushroom, so we can call the <code>hmush</code> function to destroy it. Otherwise, we simply return.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bchk <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pby]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">BC</span> [pbx]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call atadd</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="bn">0x44</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">Z</span> hmush</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>hmush</code> is very simple – we simply replace the character with whitespace and play the appropriate sound effect. We also set the missile’s <span class="math inline">\(y\)</span> position back to 255 to signify that it is “off screen”. This last step is done within the <code>kilbul</code> label, which we can jump to from elsewhere in the program, but as <code>hmush</code> contains no <code>ret</code> statement it will run straight from <code>call sfxHitM</code> to <code>ldVia A [pby] 0xff</code>. You can think of it like a fall-through case in C switch statements, if you like (since the labels in a switch statement are essentially <code>goto</code> labels, this is actually a pretty accurate way to think of it).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   hmush <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setCursorPos ([pbx], [pby])</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call wspace</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call sfxHitM</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   kilbul <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ldVia <span class="dt">A</span> [pby] <span class="bn">0xff</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>To draw the missile, we follow the same pattern as when we drew the player. <code>bullxy</code> sets the cursor position to the current position of the missile (which might be off screen).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bullxy <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setCursorPos ([pbx], [pby])</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>pbull</code> routine checks whether the missile is on screen, and if it is, prints the sprite <code>0x93</code>, or UDG ‘D’, at that location.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   pbull <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pby]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call bullxy</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="dt">INK</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="dt">YELLOW</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="bn">0x93</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We clear the missile using the <code>defbull</code> routine. This is as distinct from <code>kilbul</code>, which logically “kills” the bullet, by setting its position to 255; here we are deleting the bullet’s sprite from its current position on the screen, but not changing the location of the bullet within the game logic at all.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   defbull <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pby]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call bullxy</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>As with <code>kilbul</code> above, we run straight into the next function, <code>wspace</code>, to do the actual clearing of the sprite at the current position. This function is called from a number of places in code, but <code>defbull</code> has the advantage of being defined right next to it, so it can fall through to it without paying the cost of a function call.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   wspace <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setAttrs <span class="dt">AttrTemp</span> <span class="dt">NoFlash</span> <span class="dt">Bright</span> (<span class="dt">Paper</span> <span class="dt">Black</span>) (<span class="dt">Ink</span> <span class="dt">White</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="fu">$</span> chr <span class="ch">&#39; &#39;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note that we set the colours to white-on-black. This may not seem important, since we’re drawing an empty space so there are no foreground (white) pixels to display – but remember, collision detection is done using colour attributes! If we left the colours as they were, the space would continue to act as an invisible missile, or mushroom, or whatever was there before!</p>
<h2 id="the-centipede">The centipede</h2>
<p>Next, we deal with the centipede. Being composed of a number of segments, the centipede is actually fairly complex – though by and large the segments work independently, even while they appear to be connected together. We begin with a helper routine, <code>segxy</code>, which performs the same job as <code>basexy</code> and <code>bullxy</code> above: it sets the cursor to the position of the current segment.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segxy <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setCursorPos ([<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>], [<span class="dt">IX</span><span class="fu">+</span><span class="dv">2</span>])</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now that we have this, we want to go through each segment (of which there are ten) and process them, one by one. We do this using the trusty <code>decLoopB</code> macro we made use of earlier. Each segment contains three bytes: the segment’s current status, and its <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> co-ordinates. Current status has three possible values: 0 for “moving left”, 1 for “moving right”, and 255 to disable the segment once it’s been destroyed. The loop below goes through each segment and checks whether the status is 255 – if not, it runs <code>proseg</code> to process that segment, otherwise it skips over that and proceeds to the next one.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   processSegments <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">IX</span> segmnt        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- table of segment data.</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     decLoopB <span class="dv">10</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       push <span class="dt">BC</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       ld <span class="dt">A</span> [<span class="dt">IX</span>]         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- is segment switched on?</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       inc <span class="dt">A</span>             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- 255=off  increments to zero.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       call <span class="dt">NZ</span> proseg    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- it&#39;s active, so process segment.</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       pop <span class="dt">BC</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       ld <span class="dt">DE</span> <span class="dv">3</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- 3 bytes per segment.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       add <span class="dt">IX</span> <span class="dt">DE</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- get next segment in ix registers.</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The crux of the centipede’s processing code happens here, in <code>proseg</code>. As with the main loop, this is quite a high-level routine that delegates most of its actual processing to a few purpose-built routines, defined below.</p>
<p>We begin by calling <code>segcol</code> to check for collisions with this segment. If there was a collision, <code>segcol</code> will have turned off the segment, so we can check for that and drop out early if that’s happened. Otherwise, we clear the segment’s previous position, move the segment into its new position with <code>segmov</code>, and perform another collision check. Again, we need to check whether the segment was destroyed by the collision. If it wasn’t, we draw the UDG character ‘C’, which contains our segment graphic.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   proseg <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call segcol             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- segment collision detection</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span>]               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- check if segment was switched off</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span>                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- by collision detection routine.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span>                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- it was  so this segment is now dead.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call segxy              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- set up segment coordinates.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call wspace             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- display a space  white ink on black.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call segmov             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- move segment.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call segcol             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- new segment position collision check.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span>]               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- check if segment was switched off</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span>                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- by collision detection routine.</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span>                   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- it was  so this segment is now dead.</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call segxy              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- set up segment coordinates.</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     setAttrs <span class="dt">AttrTemp</span> <span class="dt">NoFlash</span> <span class="dt">NotBright</span> (<span class="dt">Paper</span> <span class="dt">Black</span>) (<span class="dt">Ink</span> <span class="dt">Red</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="bn">0x92</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The remaining functions therefore fall into two categories: segment movement, and collision detection and handling. We’ll deal with movement first.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segmov <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>] </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- x</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">C</span> <span class="dt">A</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span><span class="fu">+</span><span class="dv">2</span>] </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- y</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">B</span> <span class="dt">A</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span>] </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- status</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">Z</span> segml</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The segment is moving either left or right. We begin by loading the current co-ordinates into registers, and then checking which way it’s moving. If it’s moving left, we jump to the <code>segml</code> routine. If right, we fall through to the next routine, <code>segmr</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segmr <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="dv">31</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">Z</span> segmd</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">C</span> <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call atadd</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="bn">0x44</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">Z</span> segmd</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc [<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The two movement routines are very similar. First we check if we’re at the edge of the screen, and if so jump to <code>segmd</code> to move down one line. If not, we check the attributes of the space one to the right, to see if there’s a mushroom there (Remember, mushrooms are bright green: <code>0x44</code>). Again, if there is we jump to <code>segmd</code>. If we passed both of these tests, there are no obstacles, so we can increment the <span class="math inline">\(x\)</span> position to move the segment to the right.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segml <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">Z</span> segmd</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dec <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">C</span> <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call atadd</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="bn">0x44</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">Z</span> segmd</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dec [<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>segml</code> is almost identical. We use <code>and A</code> again to check if we’re at the left edge.</p>
<p>Next, we define <code>segmd</code>, which the previous two routines used to move the segment down in the case of an obstacle or the edge of the screen.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segmd <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     xor <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [<span class="dt">IX</span>] <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">IX</span><span class="fu">+</span><span class="dv">2</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp <span class="dv">20</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">Z</span> segmt</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc [<span class="dt">IX</span><span class="fu">+</span><span class="dv">2</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Whenever the segment moves down, it should reverse direction, so that’s the first thing we do here. After that, we check if we’re at the bottom of the screen – if we are, we jump to <code>segmt</code> to move us back up to the top. Otherwise, we move down – regardless of whether there are any mushrooms or other obstacles in the way. This prevents a bug from happening whereby the mushrooms form a sort of “bucket” that can trap a segment.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segmt <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     xor <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [<span class="dt">IX</span><span class="fu">+</span><span class="dv">2</span>] <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This is the final movement function. All it does is to set the <span class="math inline">\(y\)</span> co-ordinate to 0. The <span class="math inline">\(x\)</span> co-ordinate will be wherever the segment was on the bottom line – usually the left or right edge, unless it happened to hit a mushroom.</p>
<p>Finally, we handle collision detection for centipede segments. We’ve already dealt with mushrooms, which cause the centipede to turn and move down the screen. The remaining items a segment could collide with are the player, killing him and scoring a point for the centipede, or the missile, which turns the segment into a mushroom and destroys the missile that hit it. First, the player.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   segcol <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [plx]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp [<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">NZ</span> bulcol</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [ply]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp [<span class="dt">IX</span><span class="fu">+</span><span class="dv">2</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jr <span class="dt">NZ</span> bulcol</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>segcol</code> first compares the segment’s position with the player’s. If either the <span class="math inline">\(x\)</span> or the <span class="math inline">\(y\)</span> positions differ, it jumps to <code>bulcol</code> to try for missile collisions instead. If they are both the same, it falls through to the following routine, <code>killpl</code>, which sets the player’s <code>dead</code> flag.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   killpl <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [dead] <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Checking for a collision with the missile is similar to the collision check above – we simply compare <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> co-ordinates. If either of them is different we know there is no collision, so we can return.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   bulcol <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pby]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">Z</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp [<span class="dt">IX</span><span class="fu">+</span><span class="dv">2</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">NZ</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pbx]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cp [<span class="dt">IX</span><span class="fu">+</span><span class="dv">1</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret <span class="dt">NZ</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If we get this far, there has been a missile collision. We call <code>defbull</code> to delete the missile graphic, and then replace the segment’s own graphic with a mushroom. Finally, we call <code>kilbul</code> to “logically” kill the bullet, setting its <span class="math inline">\(y\)</span> co-ordinate to 255, and we also flag the segment as inactive. If there are still segments left, we play the “segment hit” sound effect, otherwise we don’t need to play any effect because the game over sound will play.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call defbull</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="dt">AT</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [pby]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printA</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal [pbx]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="dt">INK</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="dt">GREEN</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     printVal <span class="bn">0x91</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call kilbul</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [<span class="dt">IX</span>] <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> segsLeft</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dec [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     push <span class="dt">IX</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call <span class="dt">NZ</span> sfxHitC</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     pop <span class="dt">IX</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And, that’s it for the centipede!</p>
<h2 id="utilities">Utilities</h2>
<p>There are a couple of utilities we’ve made use of in this game, both of which are taken from the same set of tutorials where I got most of the code for the rest of the game, but which would be useful in any game, not just this one. The first is a pseudo-random number generator which cleverly uses the Spectrum ROM itself as its source for randomness! It simply treats the seed as an offset into the ROM memory. You can see a fuller description on <a href="https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-4/">the original page</a>, but here’s the code.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   random <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> [seed]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> <span class="dt">H</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="dv">31</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">H</span> <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc <span class="dt">HL</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld [seed] <span class="dt">HL</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   seed <span class="ot">←</span> labelled <span class="fu">$</span> defb [<span class="dv">0</span>,<span class="dv">0</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The other utility which has come up a lot is <code>atadd</code>, which calculates, from a pair of <span class="math inline">\((x, y)\)</span> co-ordinates, the location in memory for that co-ordinate’s attributes. This is extremely useful for polling co-ordinates for their attributes, which was the basis of all our collision detection. The original utility, with comments, can be seen <a href="https://chuntey.wordpress.com/2013/02/28/how-to-write-zx-spectrum-games-chapter-5/">here</a>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   atadd <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> <span class="dt">B</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rrca</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rrca</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rrca</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">E</span> <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="dv">3</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     add <span class="dt">A</span> <span class="dv">88</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">D</span> <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> <span class="dt">E</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     and <span class="bn">0xe0</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">E</span> <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> <span class="dt">C</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     add <span class="dt">A</span> <span class="dt">E</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">E</span> <span class="dt">A</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">A</span> [<span class="dt">DE</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ret</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="end-conditions">End conditions</h2>
<p>We’re just about ready to wrap up our game! The last thing remaining is to deal with the two end conditions – either the centipede killed Lambdaman, or Lambdaman killed the centipede. In either case, we play a sound effect, increase the appropriate score, and jump back to <code>gameStart</code> to begin the next round.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   gameOver <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call sfxLost</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> <span class="fu">$</span> centipedeScore <span class="fu">+</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jp gameStart</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   gameWon <span class="ot">←</span> labelled <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     call sfxWon</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ld <span class="dt">HL</span> lambdamanScore</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     inc [<span class="dt">HL</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     jp gameStart</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Out game is done, but because of the way labels work in <code>z80</code>, it is common for the last line in any program to be a variable definition (in this case <code>gameWon</code>). This, of course, is not allowed in Haskell, so <code>z80</code> defines <code>end</code> as an alias for <code>return ()</code>, giving us an expression to end on.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   end</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>With that, we can compile and run the program, which should spit out a file called <code>lambdaman.tap</code> which you can load into your favourite emulator.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/haskell/index.html">haskell</a>, <a href="/tags/assembly/index.html">assembly</a>, <a href="/tags/z80/index.html">z80</a>, <a href="/tags/spectrum/index.html">spectrum</a>, <a href="/tags/literate-programs/index.html">literate-programs</a></div>
]]></summary>
</entry>
<entry>
    <title>Checking out old versions of files in git</title>
    <link href="http://dpwright.com/posts/2015/05/15/checking-out-old-versions-of-files-in-git/index.html" />
    <id>http://dpwright.com/posts/2015/05/15/checking-out-old-versions-of-files-in-git/index.html</id>
    <published>2015-05-15T11:36:27Z</published>
    <updated>2015-05-15T11:36:27Z</updated>
    <summary type="html"><![CDATA[<div class="info">15 May, 2015</div>



<p>Here’s another useful alias if you’re using git. Sometimes you want to recover a file which has been deleted, or restore an old version of a single file. Or, you might want to grab a file from a different branch. This alias will let you do that:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[alias]</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    get-file </span><span class="ot">=</span><span class="st"> &quot;!f() { git show $</span><span class="dv">1</span><span class="st">:$</span><span class="dv">2</span><span class="st"> &gt; $</span><span class="dv">2</span><span class="co">; }; f&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Use it like this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># Get the version of README.md from commit 456e17b</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">git</span> get-file 456e17b README.md</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># Get the version of foo.cpp from the &#39;stable&#39; branch</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">git</span> get-file stable path/to/foo.cpp</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note that this will write the file out to its actual location (overwriting whatever’s there), so don’t run it if you have local modifications to that file, unless you don’t mind those modifications getting overwritten!</p>
<p>If you are using <a href="https://github.com/alebedev/git-media">git-media</a>, or something similar, you need to pipe the file through the filter. I set up another alias to do this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    get-media </span><span class="ot">=</span><span class="st"> &quot;!f() { git show $</span><span class="dv">1</span><span class="st">:$</span><span class="dv">2</span><span class="st"> | git-media filter-smudge &gt; $</span><span class="dv">2</span><span class="co">; }; f&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>

<div class="tagsinfo">Tagged with: <a href="/tags/git/index.html">git</a>, <a href="/tags/alias/index.html">alias</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 6: Elastic Tabstops</title>
    <link href="http://dpwright.com/posts/2015/05/02/generating-this-website-part-6-elastic-tabstops/index.html" />
    <id>http://dpwright.com/posts/2015/05/02/generating-this-website-part-6-elastic-tabstops/index.html</id>
    <published>2015-05-02T22:02:26Z</published>
    <updated>2015-05-02T22:02:26Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 2 May, 2015</div>



<div class="sidenote">
<p>This is part six of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>Over the New Year holidays this year I redesigned the site, incorporating a number of changes which (I hope) make it easier to read and nicer-looking to boot. These changes include:</p>
<ul>
<li>Removing most of the “link clutter” from the header, replacing it with just the title and a single <i class="fa fa-question-circle"></i> link, which takes you to an “about” page.</li>
<li>Pulling in the margins, putting the body of the article in a single, narrower column, which is easier for the readers’ eyes to track.</li>
<li>Changing the typefaces using a pair of fonts from Donald Knuth’s beautiful <span class="math inline">\(\LaTeX\)</span> typesetting system: <a href="http://en.wikipedia.org/wiki/Computer_Modern">Computer Modern</a> for the body and <a href="http://en.wikipedia.org/wiki/Concrete_Roman"><code>Concrete Roman</code></a> for preformatted/code blocks. The webfont versions of these fonts were downloaded from <a href="http://checkmyworking.com/cm-web-fonts/">this site</a>.</li>
</ul>
<p>The particularly perspicacious amongst you might have noticed an issue with this choice of typefaces, however. That is, <code>Concrete Roman</code> uses proportional spacing – it is <em>not</em> a monospaced font! And yet, all the code samples are aligned nicely. What dark magic is this?</p>
<h2 id="elastic-tabstops">Elastic tabstops</h2>
<p><a href="http://nickgravgaard.com/elastic-tabstops/">Elastic tabstops</a> were invented by Nick Gravgaard with the twin goals of ending the interminable tabs/spaces argument and allowing code to be lined up nicely even when using proportional fonts. The basic idea is simple – treat tabs not as a simple “jump to the next multiple of N” shortcut, but more as the delimiter of a table whose columns represent the layout you want your code to take. This animated GIF, taken from <a href="http://nickgravgaard.com/elastic-tabstops/">his website</a>, demonstrates the idea neatly:</p>
<center>
<img src="columnblocks_coloured.gif" title="Elastic tabstops demonstration" />
</center>
<p>Gravgaard had live editing in mind when he invented the concept, and has written plugins for a number of popular editors, however it applies just as well to static <em>display</em> of code, such as on a website. The implementation here simply does literally what the description of elastic tabstops says: it walks a Pandoc document looking for code blocks, and turns them into tables delimited by the tab.</p>
<p>Incidentally, there is nothing Hakyll-specific about this implementation – it is a post-process transformation on the Pandoc document. So it should support any of Pandoc’s output formats, in case you want to do something similar with your next LaTeX paper!</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>The standard opening:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">ElasticTabstops</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note I didn’t need to import <em><code>Hakyll</code></em>. We don’t use it here; this is pure Pandoc. We do need that though:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Definition</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Text.Pandoc.Walk</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’re also going to be doing some fiddling with lists, so we’ll import some utilities from <em><code>Data.List</code></em> and <em><code>Data.List.Split</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.List</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(delete)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.List.Split</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(splitOn)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="code-overview">Code overview</h2>
<p>We’re looking for a <em><code>Pandoc</code></em> <code>→</code> <em><code>Pandoc</code></em> transformation, which will walk through the tree and, if it finds a code block, “elasticate” it by transforming tabs into table columns. Seems simple enough:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; elasticTabstops ::</span> <span class="dt">Pandoc</span> <span class="ot">→</span> <span class="dt">Pandoc</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> elasticTabstops <span class="fu">=</span> walk <span class="fu">$</span> ifCodeBlock elasticate</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>walk</code> actually expects a function which takes a <em><code>Block</code></em> and returns the transformed <em><code>Block</code></em>, so we define <code>ifCodeBlock</code> to run our function if the block is a <em><code>CodeBlock</code></em>, and just return it unmodified otherwise.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; ifCodeBlock ::</span> (<span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Block</span>) <span class="ot">→</span> <span class="dt">Block</span> <span class="ot">→</span> <span class="dt">Block</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> ifCodeBlock f (<span class="dt">CodeBlock</span> a s) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> f a s</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> ifCodeBlock _ b               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> b</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>elasticate</code> function, then, will take an <em><code>Attr</code></em> – the id, classes, and key-value pairs associated with a block – and a <em><code>String</code></em> representing the code itself, and return a new <em><code>Block</code></em>. We’ll wrap the generated “tables of code” in a <em><code>Div</code></em> with class <code>elastic-tabstops</code> in case we want to do any styling on it, or any further post-processing.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; elasticate ::</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Block</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> elasticate a s <span class="fu">=</span> <span class="dt">Div</span> ([], [<span class="st">&quot;elastic-tabstops&quot;</span>], []) <span class="fu">$</span> codeTables a s</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="grouping-the-code">Grouping the code</h2>
<p>Why “tables of code”, plural? Because in order to line the code up sensibly, we actually need to split it up into groups, and generate a separate table for each group. To see what I mean, take another look at the GIF above. If that code was all in one table, as the purple column got longer, the cyan column length would get longer with it! This would push the innermost block (<code>if (isPrime(i))</code> etc.) way further to the right than it needs to be.</p>
<p>To counteract this problem, we group the code based on the number of tabs in the line – consecutive lines containing the same number of tabs will be grouped together. We begin by defining a utility function to tell us the number of tabs in a line:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; countNumTabs ::</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Int</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> countNumTabs <span class="fu">=</span> length ∘ filter (<span class="fu">==</span> <span class="ch">&#39;\t&#39;</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We can consider a “group” to be a simple tuple containing the number of tabs in the lines in that group, and a list of the lines themselves:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">type</span> <span class="dt">CodeGroup</span> <span class="fu">=</span> (<span class="dt">Int</span>, [<span class="dt">String</span>])</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Our <code>group</code> function, then, is a simple fold over the lines in the code block, returning a list of these <em><code>CodeGroup</code></em>s.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; group ::</span> <span class="dt">String</span> <span class="ot">→</span> [<span class="dt">CodeGroup</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> group s <span class="fu">=</span> foldr groupMaker [] <span class="fu">$</span> lines s</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Given the definition of <code>foldr</code>, it is clear what the type of our <code>groupMaker</code> function needs to be. Because <code>foldr</code> associates to the right, you can consider it as if it’s working from the bottom of the code block upward. It’ll take the current line being processed, and the <em><code>CodeGroups</code></em> that have been identified so far, and return a new set of <em><code>CodeGroups</code></em> with the new line added appropriately.</p>
<p>What does “added appropriately” mean in this case? Well, there are two possibilities:</p>
<ul>
<li><em>If</em> there is a group already in the list (we are not on the first line), <em>and</em> the line under consideration has the same number of tabs as that group, add the line to that group.</li>
<li>Otherwise, create a new group containing only that line, and cons it to the list.</li>
</ul>
<p>This can be represented in Haskell thus:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; groupMaker ::</span> <span class="dt">String</span> <span class="ot">→</span> [<span class="dt">CodeGroup</span>] <span class="ot">→</span> [<span class="dt">CodeGroup</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> groupMaker l <span class="fu">=</span> go <span class="fu">$</span> countNumTabs l <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   go n ((n&#39;, ls)<span class="fu">:</span>gs) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">|</span> n <span class="fu">==</span> n&#39; </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> (n, l<span class="fu">:</span>ls)<span class="fu">:</span>gs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   go n gs            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> (n, [l])<span class="fu">:</span>gs</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="generating-the-tables-themselves">Generating the tables themselves</h2>
<p>Now we have all we need to split the code into groups, we can use those to construct the tables themselves. Before we start, we’ll set up a couple of utilities which will help set up the table.</p>
<p>Firstly, we want all columns to be left-aligned. We can do this by generating a list of <em><code>AlignLeft</code></em> of length one greater than the number of tabs. The tab character is the delimiter, so the number of columns will always be one greater than this.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; allLeft ::</span> <span class="dt">Int</span> <span class="ot">→</span> [<span class="dt">Alignment</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> allLeft n <span class="fu">=</span> replicate (n<span class="fu">+</span><span class="dv">1</span>) <span class="dt">AlignLeft</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Similarly, we need to specify the widths of the columns. We don’t need to be precise about this, and in fact it would be very complicated to try and work them out, and would require hard-coding the choice of typeface in here, which would be unfortunate. But we do need to specify <em>something</em>, otherwise the layout won’t be as predictable as we need it to be.</p>
<p>The trick is that we always want the right-most column to fill any excess space. This will force other columns to be as narrow as they can be, while still fitting the contained code. We can represent this as follows:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; columnWidths ::</span> <span class="dt">Int</span> <span class="ot">→</span> [<span class="dt">Double</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> columnWidths n <span class="fu">=</span> replicate (n) <span class="dv">0</span> <span class="fu">++</span> [<span class="dv">1</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Where a value of <code>0</code> means 0% and <code>1</code> means 100%.</p>
<p>Finally, we define <code>removeClass</code>, a utility to remove a certain class from a <em><code>Block</code></em>. Pandoc defines the <code>literate</code> class on Literate Haskell code blocks, which puts the leading <code>&gt;</code> at the beginning of lines – obviously we only want this in the first column of the table, so we need to remove <code>literate</code> from the attributes of subsequent columns.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; removeClass ::</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">Attr</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> removeClass c (i, cs, kvs) <span class="fu">=</span> (i, delete c cs, kvs)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We are now ready to generate the actual tables. We begin by splitting the code into groups and making a table for each of those groups.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; codeTables ::</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">String</span> <span class="ot">→</span> [<span class="dt">Block</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> codeTables a <span class="fu">=</span> map (makeTable a) ∘ group</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>“Making a table” is itself a question of making a row for each line of code in the group, and wrapping that up in a Pandoc <em><code>Table</code></em> construct.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; makeTable ::</span> <span class="dt">Attr</span> <span class="ot">→</span> <span class="dt">CodeGroup</span> <span class="ot">→</span> <span class="dt">Block</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> makeTable a (n, g) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> constructTable <span class="fu">$</span> map makeRow g <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   constructTable   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Table</span> [] (allLeft n) (columnWidths n) []</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>To make a row, then, we split the line up based on the tab delimiter, then wrap it in a <em><code>CodeBlock</code></em> constructor. <em><code>CodeBlock</code></em> expects a set of attributes, so we pass the attributes of the original <em><code>CodeBlock</code></em> unchanged in the first column, and then pass a version with the <code>literate</code> class removed for all other columns. Finally we wrap the whole thing in a list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeRow </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> map (<span class="fu">:</span>[]) ∘ zipWith (<span class="fu">$</span>) codeRow ∘ splitOn <span class="st">&quot;\t&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   codeRow </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> map <span class="dt">CodeBlock</span> <span class="fu">$</span> a<span class="fu">:</span>removeLiterates (repeat a)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   removeLiterates <span class="fu">=</span> map <span class="fu">$</span> removeClass <span class="st">&quot;literate&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And that’s it! Beautifully aligned code, using a proportional font.</p>
<h2 id="epilogue">Epilogue</h2>
<p>There are a couple of issues with using elastic tabstops on this website.</p>
<p>Firstly, while Nick Gravgaard has written plugins for a number of editors, neither of the editors I use regularly (vim and emacs) are supported. This is for the very good reason that they <em>can’t</em> be – both of them use characters as their fundamental building block in terms of layout, so you can’t modify the layout by an arbitrary number of pixels.</p>
<p>As a result, I use a monospaced font when editing the posts and insert the tabs as I think appropriate. To see how that will actually affect the layout, I have to open the page in the browser, which is somewhat inconvenient. As well as that, I have apparently-superfluous tabs all over my file!</p>
<p>I have found that I get pretty good results by setting the tabstop length to 1, and making tabs visible. That way I can use spaces to align as usual, but use a tab as the last “space”. This looks good in my editor and also on the site, <em>and</em> I can see what’s going on thanks to the visible tabs.</p>
<p>Another issue is the way post previews come up in RSS feeds. The reader that I use, feedly, renders the tables representing my code quite badly – I end up with single-character columns with all the code written vertically! I think the solution to this is not to do the elastic tabstops transformation when generating the RSS feed, but I haven’t got around to this yet.</p>
<p>All in all, though, I’m pleased with the way it looks – and it’s a testament both to Haskell and to Pandoc’s design that it was so easy to add as a post-process to my site. There’s something lovely about the fact that the entry point to this entire blog post is a pure function with type <em><code>Pandoc</code></em> <code>→</code> <em><code>Pandoc</code></em>. No missiles being launched here!</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 5: Outdated URLs</title>
    <link href="http://dpwright.com/posts/2015/04/13/generating-this-website-part-5-outdated-urls/index.html" />
    <id>http://dpwright.com/posts/2015/04/13/generating-this-website-part-5-outdated-urls/index.html</id>
    <published>2015-04-13T07:57:17Z</published>
    <updated>2015-04-13T07:57:17Z</updated>
    <summary type="html"><![CDATA[<div class="info">13 April, 2015</div>



<div class="sidenote">
<p>This is part five of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>On February 1st, 2015, I decided to change the URL scheme for this site, such that instead of outputting pages to <code>post-name.html</code> it would output to <code>post-name/index.html</code>. Unfortunately, this breaks any existing links to the original pages that might be out there. This module keeps those links active by generating any posts prior to that date at the original URL.</p>
<h2 id="imports">Imports</h2>
<p>Let’s get the obvious out the way…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">OutdatedURLs</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll also import <em><code>Posts</code></em>, since for the most part we want to generate these posts exactly like their correctly-addressed counterparts.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, we import <code>Data.Time</code> so that we can check the dates. Note we hide <code>readTime</code> because we’re going to use the version from the <code>Posts</code> module.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Time</span> <span class="kw">hiding</span> (readTime)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="setting-up-the-rules">Setting up the rules</h2>
<p>First we define the cut-off date, before which an old-style <code>.html</code> page will be created. This applies to any posts made prior to midnight, February 1st, 2015.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; cutoffDate ::</span> <span class="dt">UTCTime</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> cutoffDate <span class="fu">=</span> <span class="dt">UTCTime</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromGregorian <span class="dv">2015</span> <span class="dv">02</span> <span class="dv">01</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(secondsToDiffTime <span class="dv">0</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>Rules</code> managing these posts are similar to those for <a href="/posts/2014/09/29/generating-this-website-part-2-posts">standard <code>Posts</code></a>. We make use of the recently-added <code>matchMetadata</code> to compare the <code>date</code> field of the posts with our <code>cutoffDate</code>, and we tag the rule with the version “outdated” to avoid them showing up in the index. And of course we use <code>setExtension</code> rather than <code>simplifyURL</code>, since that’s the whole point of the exercise!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; outdatedURLs ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> outdatedURLs tags <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   matchMetadata <span class="st">&quot;posts/*&quot;</span> isOutdated ∘ version <span class="st">&quot;outdated&quot;</span> <span class="fu">$</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">do</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">route   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">metadataRoute dateAndTitle <span class="ot">`composeRoutes`</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">setExtension <span class="st">&quot;.html&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">compile </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">postCompiler tags</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     isOutdated </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> maybe <span class="dt">False</span> checkDate ∘ lookupString <span class="st">&quot;date&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     checkDate  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> (<span class="fu">&gt;</span> <span class="dv">0</span>) ∘ diffUTCTime cutoffDate ∘ readTime</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="thats-it">That’s it!</h2>
<p>With just a small amount of effort, we’ve managed to completely change our URL scheme without breaking any old links. I wouldn’t want to make a habit of this sort of thing, but it’s good to know it can be resolved fairly easily should the need arise!</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>The Haskell gl package</title>
    <link href="http://dpwright.com/posts/2015/03/25/the-haskell-gl-package/index.html" />
    <id>http://dpwright.com/posts/2015/03/25/the-haskell-gl-package/index.html</id>
    <published>2015-03-25T08:41:23Z</published>
    <updated>2015-03-25T08:41:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">25 March, 2015</div>



<p>This post demonstrates how to get to a useful, working foundation for an OpenGL application using the recent <a href="https://hackage.haskell.org/package/gl"><code>gl</code> package</a> with the minimum of fuss. By the end of the post, this is what we’ll have:</p>
<center>
<img src="/posts/2015/03/25/getting-up-and-running-with-gl/spinningCube.gif" title="A spinning cube" />
</center>
<p>Which is to say:</p>
<ul>
<li>A window, created and managed by <a href="https://hackage.haskell.org/package/GLFW-b"><code>GLFW-b</code></a>.</li>
<li>A cube mesh, with positions, colours, normals, and <em>uv</em> co-ordinates.</li>
<li>A single directional light, calculated using the fragment shader.</li>
<li>A texture, alpha blended with the underlying colours.</li>
<li>Some very simple animation (the cube spins).</li>
</ul>
<p>When trying to get set up with OpenGL, I’ve found that while there are a lot of resources out there, I’ve often had to piece together various blog posts in order to get a working application that I can build off. Many of these blog posts also make use of immediate mode, which may be quick and easy to learn, but is quite outdated and ultimately sets you down the wrong path if you want to learn modern OpenGL programming. This post aims to give you a solid jumping-off point to start on the interesting stuff straight away.</p>
<p>As well as that, this post is an opportunity for me to try the <a href="https://hackage.haskell.org/package/gl">gl package</a>, introduced relatively recently by Edward Kmett and others. <code>gl</code> attempts to be a low-level but <em>complete</em> set of bindings to the OpenGL API – as opposed to the rather more longstanding <a href="https://hackage.haskell.org/package/OpenGL">OpenGL package</a>, which tries to be a bit more “Haskelly” but at the cost of certain missing parts of the OpenGL specification.</p>
<div class="sidenote">
<p><a href="https://hackage.haskell.org/package/OpenGL">OpenGL</a> is built on the <a href="https://hackage.haskell.org/package/OpenGLRaw">OpenGLRaw</a> package, which as the name implies is supposed to be a “raw” binding for OpenGL much as <a href="https://hackage.haskell.org/package/gl">gl</a> is. As I understand it, the problems with this package are as follows:</p>
<ul>
<li>It doesn’t work well as an “escape hatch” for the higher-level OpenGL package because many of the abstractions don’t translate between the two libraries.</li>
<li>It is not as complete as <a href="https://hackage.haskell.org/package/gl">gl</a> in terms of the number of extensions it supports.</li>
<li>Because it is part of the Haskell Platform, fixes to the above issues can take a year to make their way into the library.</li>
</ul>
<p>For more information about the reasons behind the creation of the <a href="https://hackage.haskell.org/package/gl">gl</a> package, <a href="https://www.youtube.com/watch?v=yFXzuCFeRGM&amp;t=1h36m55s">this video</a> makes for interesting viewing.</p>
</div>
<p>To me, though, the greatest advantage of the <a href="https://hackage.haskell.org/package/gl">gl</a> package is that <em>you can google it</em>. Because it is machine-generated from the actual OpenGL API, all the symbol names match, and you use them in the same way as you would in C. The <em>vast</em> majority of OpenGL tutorials on the internet are written in C or C++, so having a common vocabulary with them is immensely useful.</p>
<h2 id="setting-up-the-project">Setting up the project</h2>
<p>In case you want to follow along, here is the relevant part of my cabal file:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="cabal"><code>executable glTutorial</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>  main-is: 2015-03-25-the-haskell-gl-package.lhs</code></pre></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre class="cabal"><code>  build-depends:    </code></pre></td>
<td align="left"><pre class="cabal"><code>base                 </code></pre></td>
<td align="left"><pre class="cabal"><code>&gt;= 4.7 &amp;&amp; &lt;4.8,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>base-unicode-symbols</code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.2.2.4,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>transformers         </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.4.3.0,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>vector               </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.10.12.2,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>text                 </code></pre></td>
<td align="left"><pre class="cabal"><code>== 1.2.0.3,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>gl                   </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.7.2.4,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>GLFW-b               </code></pre></td>
<td align="left"><pre class="cabal"><code>== 1.4.7.1,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>linear               </code></pre></td>
<td align="left"><pre class="cabal"><code>== 1.18.0.1,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>distributive         </code></pre></td>
<td align="left"><pre class="cabal"><code>== 0.4.4,</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>lens                 </code></pre></td>
<td align="left"><pre class="cabal"><code>== 4.6.0.1,</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre class="cabal"><code>                    </code></pre></td>
<td align="left"><pre class="cabal"><code>JuicyPixels          </code></pre></td>
<td align="left"><pre class="cabal"><code>== 3.2.3</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre class="cabal"><code>  default-language: </code></pre></td>
<td align="left"><pre class="cabal"><code>Haskell2010</code></pre></td>
<td align="left"><pre class="cabal"><code></code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>I am including absolute version numbers here so that you can see exactly what I was working with, but you could probably be a lot more lenient with your own projects.</p>
<p>This post is a literate Haskell file – lines preceded by <code>&gt;</code> are executable code, so you should be able to run and test the file directly.</p>
<h2 id="breakdown-of-tasks">Breakdown of tasks</h2>
<p>This post is, by necessity, quite long. There is a lot that needs to be set up in order to get a spinning cube on the screen! This is basically how I’ve started every games/graphics project I’ve done in the last ten years, and <em>every time</em> I spend the majority of my time staring into the abyss of a bright pink window with nothing rendering in it, wondering which trivial step I’ve forgotten in my initial setup which is <strong>breaking everything</strong>. By collecting all the steps together in this one, massive blog post, I hope to save others (as well as my future self) from this pain.</p>
<p>To help navigate, here’s a breakdown of what we’re going to be doing:</p>
<ul>
<li><a href="#preliminaries">Set up language pragmas / import the required modules</a></li>
<li><a href="#error-handling-utilities">Set up some handy error handling utilities</a></li>
<li><a href="#setting-up-the-window">Create a window and associate it with our GL context</a></li>
<li><a href="#constructing-our-cube-mesh">Define the mesh for our cube</a></li>
<li><a href="#resource-loading">Load Resources:</a>
<ul>
<li><a href="#load-texture">Load in the texture and upload it to the GPU</a></li>
<li><a href="#load-shader">Compile and link the shader, and retrieve its uniform and attribute locations</a></li>
<li><a href="#load-mesh">Convert our mesh definition to GL buffer objects</a></li>
</ul></li>
<li><a href="#setting-up-gl">Initialise OpenGL</a></li>
<li><a href="#handling-state">Update state every frame to rotate the cube</a></li>
<li><a href="#actually-drawing-things">Actually render the scene</a></li>
<li><a href="#resource-cleanup">Cleanup</a></li>
</ul>
<p>Let’s get started!</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>We start with language pragmas. We will overload both string and list syntax to provide us with convenient access to Haskell’s faster <code>Text</code> and <code>Vector</code> containers.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedLists #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The gl package makes quite heavy use of pattern synonyms to reproduce GL’s native enums.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE PatternSynonyms #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’m also going to make use of Unicode symbols in this file.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Obviously we’ll begin by importing the <code>Graphics.GL</code> namespace exposed by the <code>gl</code> package. This package follows the GL C API convention of prefixing its function names with <code>gl</code>, so I won’t bother with a qualified import; for all other modules I will either import them qualified or explicitly name the imported symbols, so that you can see where they’re coming from.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Graphics.GL</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>To make things easier, I’m going to make use of GLFW to deal with opening the window and getting keypresses. This will allow us to concentrate on the GL side of things.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Graphics.UI.GLFW</span> <span class="kw">as</span> <span class="dt">GLFW</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Edward Kmett’s <a href="https://hackage.haskell.org/package/linear">linear</a> library is a nice, flexible library for vector and matrix maths, and the <em><code>Storable</code></em> instances it supplies for everything make it a good fit for working with GL.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Linear</span> (</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V2</span>(<span class="fu">..</span>), <span class="dt">V3</span>(<span class="fu">..</span>), <span class="dt">M44</span>, <span class="dt">Quaternion</span>,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">perspective, lookAt, axisAngle,</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">mkTransformation, (<span class="fu">!*!</span>), inv33,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">column, _xyz, negated, identity)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The following two functions also come in handy when working with Linear. <code>distribute</code> gives you the transpose of a matrix, and <code>(^.)</code> will give you access to certain fields which are expressed as lenses.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Distributive</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(distribute)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Lens</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">^.</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’m going to use the <a href="https://hackage.haskell.org/package/JuicyPixels">JuicyPixels</a> library for loading texture data.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Codec.Picture</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(readPng, <span class="dt">Image</span>(<span class="dt">Image</span>),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">DynamicImage</span>(<span class="dt">ImageRGBA8</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>After this we import some standard libraries which we’ll be making use of later.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">void, when, unless, liftM2)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="fu">&lt;$&gt;</span>), (<span class="fu">&lt;*&gt;</span>), pure)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">System.IO</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">hSetBuffering, stdout,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">BufferMode</span>(<span class="dt">LineBuffering</span>))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.IORef</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IORef</span>, newIORef,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">writeIORef, readIORef)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Bits</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="fu">.|.</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll be working with strings a little bit to load our shaders and send them into GL, so we’ll need <code>Data.Text</code> and the <code>Data.Text.Foreign</code> utilities for communicating with C. We’ll also include <code>Data.Vector</code> while we’re at it.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.IO</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text.Foreign</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">T</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Vector</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">as <span class="dt">V</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Because <code>gl</code> works at quite a low level, you have to do quite a lot of marshalling between Haskell and C. Haskell provides a number of convenient utilities for doing this within the <em><code>Foreign</code></em> hierarchy. <code>Data.Vector.Storable</code> also gives us a directly serializable form of <em><code>Vector</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Vector.Storable</span> <span class="kw">as</span> <span class="dt">SV</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Marshal.Alloc</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(alloca, allocaBytes)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Marshal.Array</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(allocaArray, peekArray)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Marshal.Utils</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(with)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Storable</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(peek, sizeOf)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Foreign.Ptr</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">Ptr</span>, nullPtr, castPtr, wordPtrToPtr)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, some monad transformers which will ease some of the boilerplate.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Trans.Maybe</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">MaybeT</span>(<span class="fu">..</span>))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Trans.Cont</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">ContT</span>(<span class="fu">..</span>), evalContT)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Trans.Class</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(lift)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(liftIO)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="error-handling-utilities">Error-handling utilities</h2>
<p>I don’t actually make use of these functions anywhere within this post, but you can bet I used them while I was writing it! Debugging graphical issues can be extremely frustrating as the GPU doesn’t have anything akin to a <code>printf</code>, and GL itself is basically a gigantic state machine where subtle mistakes can lead to strange errors down the line. Sometimes it can be useful to take a scattergun approach and just sprinkle error-checking facilities throughout your code in the hope of getting a clue as to what might be the problem. These functions help you do that.</p>
<p>First, <code>getErrors</code> collects all the errors GL is currently reporting. Since GL allows certain operations to be performed concurrently, it holds multiple error registers, and a single call to <code>glGetError</code> just gives you the value from one of them. Here, we keep calling it until there are no errors left, at which point we return all the available errors as a list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; getErrors ::</span> <span class="dt">IO</span> [<span class="dt">GLuint</span>]</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> getErrors <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   err <span class="ot">←</span> glGetError</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">if</span> err <span class="fu">==</span> <span class="dt">GL_NO_ERROR</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      <span class="kw">then</span> return []</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      <span class="kw">else</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        errs <span class="ot">←</span> getErrors</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        return <span class="fu">$</span> err<span class="fu">:</span>errs</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The errors themselves are, like most things in GL, just a <code>GLuint</code> that maps to some enumerated value. <a href="https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetError.xml">The documentation for <code>glGetError</code></a> gives us a clue as to what values might be returned, so we can use that to convert the errors to a more useful <em><code>String</code></em> value.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; showError ::</span> <span class="dt">GLuint</span> <span class="ot">→</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_ENUM</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_ENUM&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_VALUE</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_VALUE&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_OPERATION</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_OPERATION&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_INVALID_FRAMEBUFFER_OPERATION</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_INVALID_FRAMEBUFFER_OPERATION&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_OUT_OF_MEMORY</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_OUT_OF_MEMORY&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_STACK_UNDERFLOW</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_STACK_UNDERFLOW&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError <span class="dt">GL_STACK_OVERFLOW</span> <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="st">&quot;GL_STACK_OVERFLOW&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> showError x <span class="fu">=</span> <span class="st">&quot;GL Error &quot;</span> <span class="fu">++</span> show x</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, <code>printErrors</code> is the function we’ll actually use. It uses the above two functions to collect the errors and output them. I found it useful just to crash straight away at these point, so I report the errors using <code>error</code>. If you wanted to try and continue despite the errors you could use <code>putStrLn</code> instead.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; printErrors ::</span> <span class="dt">String</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> printErrors prefix <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   es <span class="ot">←</span> map showError <span class="fu">&lt;$&gt;</span> getErrors</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   when (not <span class="fu">$</span> null es) <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     error (prefix <span class="fu">++</span> <span class="st">&quot;: &quot;</span> <span class="fu">++</span> show es)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note the <code>prefix</code> parameter, which just lets you put in a little string describing where in the code the error occurred. Armed with this function, you can scatter error checks all over the place to help narrow down the cause of a problem to specific regions of code.</p>
<h2 id="setting-up-the-window">Setting up the window</h2>
<p>The <code>main</code> function of our application begins by setting up the window using GLFW and binding it to our current GL context. Once that’s done, it can hand off to our initialisation and main loop to do the bulk of the work.</p>
<p>Because I want to keep the distinction between GLFW and OpenGL quite strong, I’ve chosen not to mix them up in this post. This section, which deals with window setup and initialisation, uses GLFW exclusively and makes no direct GL calls at all. Once this section is over, we won’t touch GLFW again and it will be pure GL from then on.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; main ::</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   hSetBuffering stdout <span class="dt">LineBuffering</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Not strictly necessary, but I begin here by setting <code>stdout</code> to use LineBuffering. This means any output will be flushed on every newline, which can be invaluable for debugging.</p>
<p>Next, we need to initialise GLFW.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   success <span class="ot">←</span> GLFW.init</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">if</span> not success</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">then</span> void <span class="fu">$</span> putStrLn <span class="st">&quot;Failed to initialise GLFW&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">else</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If GLFW won’t initialise we might as well give up, otherwise we can continue on into our program.</p>
<p>We need to provide GLFW with some hints to tell it how to set up the window. These will vary depending on the architecture you want to support.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     mapM_ GLFW.windowHint</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       [ <span class="dt">GLFW.WindowHint&#39;ClientAPI</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">GLFW.ClientAPI&#39;OpenGL</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;OpenGLProfile</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">GLFW.OpenGLProfile&#39;Core</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;OpenGLForwardCompat</span> <span class="dt">True</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;ContextVersionMajor</span> <span class="dv">3</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       , <span class="dt">GLFW.WindowHint&#39;ContextVersionMinor</span> <span class="dv">2</span> ]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I’ve rather arbitrarily opted for OpenGL 3.2 here, which is not outrageously out-of-date but is still widely supported. More information about the available window hints can be found in the <a href="http://www.glfw.org/docs/latest/window.html#window_hints">GLFW documentation</a>.</p>
<p>We’re now ready to make the window. Again, it’s possible this may fail, so we’ll just drop out with an error if that happens.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     w <span class="ot">←</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">GLFW.createWindow <span class="dv">480</span> <span class="dv">320</span> <span class="st">&quot;Haskell GL&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Nothing</span> <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">case</span> w <span class="kw">of</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="dt">Nothing</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> putStrLn <span class="st">&quot;Failed to create window&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="dt">Just</span> win </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>OK, we have a window! First things first, let’s associate the current GL context with this window so that any GL calls we make from now on will apply to it.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.makeContextCurrent w</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The next step is to hook into GLFW’s callbacks. In reality, I don’t think the GLFW design of responding to callbacks fits the Haskell mindset very well as you necessarily have to have callbacks modify some sort of global state, but since we’re using GLFW we’re stuck with it. For a serious game project I would probably just do the window handling myself and take a different approach.</p>
<p>So, we start off by setting up handling of the “close” button. We create an <code>IORef</code> to tell us whether the window has been closed, which we set to <code>True</code> when the close button is pressed. That way we can check at any time during our game loop whether we need to shut down. We could also close the window on a keypress simply by setting the same <code>IORef</code> value. It’s quick and dirty, but it works:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         closed <span class="ot">←</span> newIORef <span class="dt">False</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.setWindowCloseCallback win <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">Just</span> (const <span class="fu">$</span> writeIORef closed <span class="dt">True</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll also want to hook into GLFW’s <code>WindowSizeCallback</code> to avoid our image getting stretched when we resize the window. Again, we’ll make use of an <code>IORef</code> to store the calculated projection matrix so that we can access it from the render loop. We’ll cover <code>calculateProjectionMatrix</code> later; for now on just assume it’s a function which takes a tuple of <code>(width, height)</code> and returns the projection matrix we need for that aspect ratio.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         dims <span class="ot">←</span> GLFW.getWindowSize win</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         projectionMatrix <span class="ot">←</span> newIORef <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           calculateProjectionMatrix dims</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll look into the details of what <code>resize</code> does later, but for now we just tell GLFW to call it when the window is resized. Since I don’t want to have any GLFW-specific code in the main portion of this demo, I drop the <code>GLFW.Window</code> parameter using <code>const</code> (I actually did the same for the <code>WindowCloseCallback</code> above, too).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.setWindowSizeCallback win <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">Just</span> (const <span class="fu">$</span> resize projectionMatrix)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Let’s also make a quick helper function which swaps the draw buffers for the current window, so we don’t have to expose <code>win</code> to the rest of the program. We also put in a call to <code>GLFW.pollEvents</code> while we’re at it, so that window events and keypresses (if there were any) are handled properly.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         <span class="kw">let</span> swapper <span class="fu">=</span> GLFW.swapBuffers win ≫ GLFW.pollEvents</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>That pretty much covers it for GLFW’s setup – we’re now ready to initialise and run our demo. We’ll have our main function just drop out when it’s done, so we can terminate once it’s complete.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         initialise ≫<span class="fu">=</span> runDemo closed projectionMatrix swapper</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         GLFW.terminate</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>One last thing before I leave GLFW aside entirely – I’ll want to be able to access the time delta within my main loop. GLFW provides us with a convenient way to query this in a platform-agnostic manner.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; getDeltaTime ::</span> <span class="dt">IO</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> getDeltaTime <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   t <span class="ot">←</span> GLFW.getTime</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   GLFW.setTime <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   return <span class="fu">$</span> maybe <span class="dv">0</span> (fromRational ∘ toRational) t</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This very simple implementation obviously assumes we will only be querying the delta time once per frame.</p>
<p>We now have a window set up and all the platform-specific stuff we might want handled. There’s just one more thing we need to get out of the way before we can begin looking at the actual GL side of things and the <code>gl</code> package in particular.</p>
<h2 id="constructing-our-cube-mesh">Constructing our cube mesh</h2>
<p>We’re going to construct our mesh in code to avoid having to worry about model formats and so forth. This section has little to do with actual GL code, so if you’re keen to see the <code>gl</code> library in action you can safely skip it.</p>
<p>A mesh can be thought of as simply a collection of vertex data, and a set of indices into that data. For this demo, the information we need about each vertex is:</p>
<ol style="list-style-type: decimal">
<li>Its position relative to the model</li>
<li>Its colour</li>
<li>Its texture co-ordinates (Called <em>UV Co-ordinates</em>)</li>
<li>Its normal vector</li>
</ol>
<p>We can store these in a structure with a <code>Vector</code> for each piece of data, along with an index <code>Vector</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MeshSpec</span> <span class="fu">=</span> <span class="dt">MeshSpec</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { specPositions </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specColours   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specNormals   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specUVs       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V2</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specIndices   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">GLuint</span>, <span class="dt">GLuint</span>, <span class="dt">GLuint</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’re going to be defining a lot of these values all at once. Unfortunately, this starts to look pretty ugly in Haskell because negative numbers have to be wrapped in brackets, so that the vector <span class="math inline">\((0, -1, 0)\)</span> is expressed <code>V3 0 (-1) 0</code>. To try and ease the pain here, let’s define an alternate constructor for <em><code>V3</code></em> values which takes a tuple instead of three parameters.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; v3 ::</span> (a, a, a) <span class="ot">→</span> <span class="dt">V3</span> a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> v3 (x, y, z) <span class="fu">=</span> <span class="dt">V3</span> x y z</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This allows us to define a function to generate a cuboid of any dimension. The function will take the dimensions of the cuboid and fill a <em><code>MeshSpec</code></em> with the required data.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; cuboid ::</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">MeshSpec</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> cuboid l&#39; h&#39; d&#39; <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="dt">MeshSpec</span> positions colours normals uvs indices <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     l <span class="fu">=</span> l&#39; <span class="fu">*</span> <span class="fl">0.5</span>; d <span class="fu">=</span> d&#39; <span class="fu">*</span> <span class="fl">0.5</span>; h <span class="fu">=</span> h&#39; <span class="fu">*</span> <span class="fl">0.5</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>I named my input parameters <code>l'</code>, <code>h'</code>, and <code>d'</code> because although I take the length, height, and depth as input, I generally want to use these values halved, so that I can treat them as an offset from the origin in the centre of the cuboid. These halved values, then, I give the more accessible names of <code>l</code>, <code>h</code>, and <code>d</code>. Here’s how I use them to define a quad for each face of the cube:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     positions <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       [v3 ( l, h, d), v3 ( l,<span class="fu">-</span>h, d), v3 ( l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 ( l, h,<span class="fu">-</span>d),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 ( l, h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l, h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l, h, d), v3 ( l, h, d),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 (<span class="fu">-</span>l, h, d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h, d), v3 ( l,<span class="fu">-</span>h, d), v3 ( l, h, d),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 (<span class="fu">-</span>l, h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h, d), v3 (<span class="fu">-</span>l, h, d),</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 ( l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 ( l,<span class="fu">-</span>h, d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h, d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h,<span class="fu">-</span>d),</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>        v3 ( l, h,<span class="fu">-</span>d), v3 ( l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l,<span class="fu">-</span>h,<span class="fu">-</span>d), v3 (<span class="fu">-</span>l, h,<span class="fu">-</span>d)]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Each line here is a single face: The right, top, front, left, bottom and back faces respectively. I’m going to colour them so that the <span class="math inline">\((r, g, b)\)</span> values are mapped to the (normalised) <span class="math inline">\((x, y, z)\)</span> values. So the left, bottom, back point <span class="math inline">\((-l, -h, -d)\)</span> is black, the right, bottom, back point <span class="math inline">\((l, -h, -d)\)</span> is red, the right, top, front point <span class="math inline">\((l, h, d)\)</span> is white… and so forth. This can be done by saying that for a particular point <span class="math inline">\((x, y, z)\)</span> its RGB value can be calculated thus:</p>
<p><span class="math display">\[
\left(\frac{x + l}{l&#39;}, \frac{y + h}{h&#39;}, \frac{z + d}{d&#39;}\right)
\]</span></p>
<p>This can be expressed quite succinctly in Haskell.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     colours <span class="fu">=</span> V.map ((<span class="fu">/</span> <span class="dt">V3</span> l&#39; h&#39; d&#39;) ∘ (<span class="fu">+</span> <span class="dt">V3</span> l h d)) positions</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>For the normals, we can simply take the normal vector for each axis, and the negations of those vectors. Since each face is composed of four vertices, and we want to share the same normal vector across the face, we replicate each normal four times – one for each vertex.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     normals <span class="fu">=</span> V.concat ∘ map (V.replicate <span class="dv">4</span>) <span class="fu">$</span> ns <span class="fu">++</span> negated ns</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="kw">where</span> ns <span class="fu">=</span> [<span class="dt">V3</span> <span class="dv">1</span> <span class="dv">0</span> <span class="dv">0</span>, <span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>, <span class="dt">V3</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The texture co-ordinates for this shape are quite simple – they simply stretch from <span class="math inline">\((0, 0)\)</span> in the bottom-left corner to <span class="math inline">\((1, 1)\)</span> in the top-right. We want the same set of co-ordinates across each face, which again we can do using <code>replicate</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     uvs <span class="fu">=</span> V.concat ∘ replicate <span class="dv">6</span> <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       [<span class="dt">V2</span> <span class="dv">0</span> <span class="dv">0</span>, <span class="dt">V2</span> <span class="dv">0</span> <span class="dv">1</span>, <span class="dt">V2</span> <span class="dv">1</span> <span class="dv">1</span>, <span class="dt">V2</span> <span class="dv">1</span> <span class="dv">0</span>]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally we set up the indices for our shape. The quads we defined in <code>positions</code> above follow a regular pattern: <span class="math inline">\((0, 1, 2, 3)\)</span>, <span class="math inline">\((4, 5, 6, 7)\)</span>… essentially we just make a 4-tuple of incrementing numbers from an offset of <span class="math inline">\(faceIndex \times 4\)</span>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     indices <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       quads ∘ V.zipWith forFace [<span class="dv">0</span><span class="fu">..</span>] ∘ V.replicate <span class="dv">6</span> <span class="fu">$</span> (<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">forFace i (a, b, c, d) <span class="fu">=</span> (a <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>, b <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>, c <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>, d <span class="fu">+</span> i<span class="fu">*</span><span class="dv">4</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>OpenGL doesn’t work with quads, though, it uses triangles. The <code>quads</code> function we just used takes the quads and splits them up into triangles.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">quads                    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">V.concatMap triangulate</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">triangulate (a, b, c, d) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">[(a, b, c), (c, d, a)]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>…and that gives us the <em><code>MeshSpec</code></em> for our cube!</p>
<p>Considering each of these sets of vertex data separately is convenient when constructing the mesh, especially when you’re hard-coding like I did here. You’ll get better performance, though, if you combine them into a single, interleaved array (at least if you’re not deforming or otherwise modifying the mesh). This would just be a flat stream of <em><code>GLfloat</code></em>s, like this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>  x1, y1, z1, r1, g1, b1, nx1, ny1, nz1, u1, v1, x2, y2, z2, r2, g2...</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>The indices are also represented as a flat list, an unpacked version of the tuple representation we use in <em><code>MeshSpec</code></em> above. The following type gives a representation closer to what we’d like to feed to GL.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">MeshData</span> <span class="fu">=</span> <span class="dt">MeshData</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { vertexData </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">V.Vector</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , indexData  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">V.Vector</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Unpacking the indices to fit into the above structure is reasonably simple.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> unpackIndices </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">GLuint</span>, <span class="dt">GLuint</span>, <span class="dt">GLuint</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> unpackIndices <span class="fu">=</span> V.concatMap unpack</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> unpack (a, b, c) <span class="fu">=</span> [a, b, c]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Interleaving the vertex data isn’t too much harder thanks to <code>zipWith4</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> interleave </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V3</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> (<span class="dt">V2</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V.Vector</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> interleave positions colours normals uvs <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   V.foldr (<span class="fu">V.++</span>) V.empty <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     V.zipWith4 combine positions colours normals uvs</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">combine (<span class="dt">V3</span> x y z) (<span class="dt">V3</span> r g b) (<span class="dt">V3</span> nx ny nz) (<span class="dt">V2</span> u v) <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  [x, y, z, r, g, b, nx, ny, nz, u, v]</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>Be careful here, as by interleaving the vertex streams into a single array of <em><code>GLfloats</code></em> you are, of course, leaving type safety behind you. When writing this post, I had a bug where my lighting looked all wrong. It turned out I had put the normals and the <em>uv</em> co-ordinates in the wrong order in my <code>combine</code> function – a fact that would have been caught by the typechecker straight away!</p>
</div>
<p>Now we can use these functions to convert from a <em><code>MeshSpec</code></em> to a <em><code>MeshData</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; fromMeshSpec ::</span> <span class="dt">MeshSpec</span> <span class="ot">→</span> <span class="dt">MeshData</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> fromMeshSpec spec <span class="fu">=</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="dt">MeshData</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(interleave      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specPositions spec)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specColours spec)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specNormals spec)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(specUVs spec))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(unpackIndices <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> specIndices spec)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This gets us from an easy-to-define “mesh specification” to the raw data that we’d like to give to GL. Here, we’ve defined the mesh in code, but you could just as well load the data from a file and read it into <em><code>MeshData</code></em> directly if you wanted.</p>
<h2 id="resource-loading">Resource loading</h2>
<p>OK, our basic setup is complete, it’s time to get down and dirty with OpenGL! First we need to load and prepare our resources.</p>
<p>Our aim here is to get a textured, spinning cube on the screen using modern OpenGL. To that end, the very least we will need is the texture, a shader program to do the rendering, and of course the mesh itself. Let’s define some datatypes to store these in.</p>
<p>First, the mesh. We use a <em>Vertex Array Object</em> to do the rendering, which contains references to all the data making up the mesh as well as settings describing the layout of the data (which parts of the stream to bind to which attributes in the shader).</p>
<p>The data itself is stored in <em>Vertex Buffer Objects</em>, which I have named <code>VBO</code> for the vertices and <code>IBO</code> for the indices. we bind these into the Vertex Array Object, so we don’t actually need them for rendering, but we keep hold of them for cleanup later.</p>
<p>More information on Vertex Buffer Objects and Vertex Array Objects can be found on the <a href="https://www.opengl.org/wiki/Vertex_Specification">OpenGL wiki</a>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Mesh</span> <span class="fu">=</span> <span class="dt">Mesh</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { meshVBO        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , meshIBO        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , meshVAO        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , meshIndexCount </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLsizei</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>For the shader, We want the ID for the shader program, and alongside that we’ll store the locations of all the constants and attributes. These will be different per-shader, but since in this case we only have one shader we can just assume they’ll always be the same.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Shader</span> <span class="fu">=</span> <span class="dt">Shader</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { shaderProgram   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , positions       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , colours         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , normals         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , uvs             </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , pvmMatrix       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , viewModelMatrix </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , normalMatrix    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , diffuseColour   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , ambientColour   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , specularColour  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , shininess       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , lightDirection  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , diffuseMap      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">GLint</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>This represents all the data we need to send to our shader. Note that contained within this structure are not the actual <em>values</em> (the positions, colours, matrices, etc), but the <em>location at which the values are stored</em> in the shader program. We’ll use these locations to set the values when we draw.</p>
<p>Finally, there’s the texture, which is simple – just the ID GL uses to refer to the texture is enough.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">type</span> <span class="dt">TextureID</span> <span class="fu">=</span> <span class="dt">GLuint</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Packaging these two structures together , we create a <em><code>Resources</code></em> type representing all the resources this demo requires.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">Resources</span> <span class="fu">=</span> <span class="dt">Resources</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { mesh    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Mesh</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , texture </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">TextureID</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , shader  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> <span class="dt">Shader</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The job of our Initialise function, then, will be to load these resources and initialise them ready for use by GL. Loading and preparing resources for usage by GL may fail at any point, so I’m going to wrap the entire process in the <em><code>MaybeT</code></em> monad transformer so it drops out early on failure.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; initialise ::</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">Resources</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> initialise <span class="fu">=</span> runMaybeT <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>For a more complex application, <em><code>EitherT</code></em>/<em><code>ErrorT</code></em> might be a better choice so that we can report <em>what</em> failed.</p>
</div>
<h3 id="load-texture">
Loading the texture
</h3>
<p>First let’s set up the texture. Here’s the texture we’re going to use; you can download it if you’re following along.</p>
<center>
<img src="/posts/2015/03/25/getting-up-and-running-with-gl/haskell.png" title="The Haskell logo" />
</center>
<p>Loading the data is very simple. As it happens, I know that this image is an <code>ImageRGBA8</code>, so that’s all I’m going to handle – in reality you may need to handle various pixel formats depending on your input data.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   png <span class="ot">←</span> liftIO <span class="fu">$</span> readPng <span class="st">&quot;haskell.png&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   (<span class="dt">Image</span> texWidth texHeight texData) <span class="ot">←</span> <span class="dt">MaybeT</span> <span class="fu">$</span> <span class="kw">case</span> png <span class="kw">of</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     (<span class="dt">Right</span> (<span class="dt">ImageRGBA8</span> i)) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> return <span class="fu">$</span> <span class="dt">Just</span> i</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     (<span class="dt">Left</span> s)               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> liftIO (print s) ≫ return <span class="dt">Nothing</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     _                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> return <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We now have the raw pixel buffer data for the texture. All that remains is to pass it to GL. First we generate the texture name which we’ll use to refer to it (although GL calls these “names”, it is just a <code>GLuint</code> ID, really).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   textureID <span class="ot">←</span> liftIO ∘ alloca <span class="fu">$</span> \texIDPtr <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGenTextures <span class="dv">1</span> texIDPtr</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     peek texIDPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The idiom of allocating a temporary variable, passing it to GL to be filled, and then returning the filled value doesn’t feel very “Haskelly”, but it is exactly what GL expects. It means that when following along with a GL tutorial intended for C, you can pretty much switch the syntax and the examples will all work.</p>
<p>Writing out these three lines does get old pretty fast though, so let’s define a utility function which simplifies it. The following function assumes that the variable to be filled is the last one passed to the function.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> fillWith f <span class="fu">=</span> liftIO ∘ alloca <span class="fu">$</span> liftM2 (≫) f peek</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we have the texture name we can use it to bind and set up the texture. We use <code>unsafeWith</code> to get access to the raw pixel data from the <code>Vector</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindTexture   <span class="dt">GL_TEXTURE_2D</span> textureID</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> (w, h) <span class="fu">=</span> (fromIntegral texWidth, fromIntegral texHeight)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO ∘ SV.unsafeWith texData <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glTexImage2D <span class="dt">GL_TEXTURE_2D</span> <span class="dv">0</span> <span class="dt">GL_RGBA</span> w h <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="dt">GL_RGBA</span> <span class="dt">GL_UNSIGNED_BYTE</span> ∘ castPtr</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_MAG_FILTER</span> <span class="dt">GL_LINEAR</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_MIN_FILTER</span> <span class="dt">GL_LINEAR</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_WRAP_S</span> <span class="dt">GL_CLAMP_TO_EDGE</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glTexParameteri <span class="dt">GL_TEXTURE_2D</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">GL_TEXTURE_WRAP_T</span> <span class="dt">GL_CLAMP_TO_EDGE</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>Why is <code>unsafeWith</code> unsafe? Because it gives you a pointer to the underlying memory the <em><code>Vector</code></em> is pointing to. This is potentially unsafe because the C function you pass it to could hold onto this pointer and modify it at any time, breaking referential transparency. Stored pointers like this are also not tracked by the garbage collector, so if you hold onto it and try to use it after the original <em><code>Vector</code></em> has gone out of scope the garbage collector may already have cleaned it up.</p>
<p>In this case, we know that <code>glTexImage2D</code> will upload the data to the GPU without modifying it, meaning that neither of these issues should concern us, so it is safe to use.</p>
</div>
<h3 id="load-shader">
Loading the shaders
</h3>
<p>Next up are the shaders. The shader code itself is included <a href="#appendix-shader-code">at the end of this post</a>; For now let’s just assume they are loaded into <code>vertexShader.glsl</code> and <code>fragmentShader.glsl</code> respectively.</p>
<p>Loading and compiling the two shaders is basically identical, so let’s create a utility function to help us.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> loadAndCompileShader </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GLenum</span> <span class="ot">→</span> FilePath</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">GLuint</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       loadAndCompileShader shaderType filename <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>First we request GL to create a shader object for us.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         shaderID <span class="ot">←</span> glCreateShader shaderType</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>After that we load the shader file and bind its contents to our new shader object. <code>glShaderSource</code> is looking for an array of C-style strings, or in other words a pointer to a pointer of <em><code>GLchar</code></em>, expressed in C as <code>const GLchar**</code>. This is where working at such a low level starts to get a bit fiddly in Haskell – you can certainly do it, but it’s not quite as succinct as it would be in C.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         shaderCode <span class="ot">←</span> T.readFile filename</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         T.withCStringLen shaderCode <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           \(str, len) <span class="ot">→</span> with str <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             \strPtr <span class="ot">→</span> with (fromIntegral len) <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               \lenPtr <span class="ot">→</span> glShaderSource shaderID <span class="dv">1</span> strPtr lenPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Compare the four lines starting <code>T.withCStringLen</code> with the C equivalent:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">    glShaderSource(shaderID, <span class="dv">1</span>, &amp;shaderCode, NULL);</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Admittedly this isn’t an entirely fair comparison – it assumes <code>NULL</code>-terminated strings which we weren’t using in Haskell, and of course the file loading directly preceding it would have been more arduous in C. Still, the point stands that what is a simple operator in C (<code>&amp;</code>) requires a call to <code>with</code> and a lambda function in Haskell.</p>
<div class="sidenote">
<p>Fortunately, Haskell offers a number of techniques for abstracting some of this awkwardness. One of these is the <em><code>ContT</code></em> monad, which allows you to take a series of nested callback functions such as the one above and transform it into a monad, which can be expressed very readably using <code>do</code>-notation.</p>
<p>Here’s how the above code looks using <em><code>ContT</code></em>:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    evalContT <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      (str, len) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> <span class="dt">ContT</span> (T.withCStringLen shaderCode)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      strPtr     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> <span class="dt">ContT</span> (with str)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      lenPtr     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> <span class="dt">ContT</span> (with <span class="fu">$</span> fromIntegral len)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">      liftIO <span class="fu">$</span> glShaderSource shaderID <span class="dv">1</span> strPtr lenPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Given this, you could imagine that with a bit of effort and applicative notation, it might be possible to get something like,</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    glShaderSource shaderID <span class="dv">1</span> <span class="fu">&lt;$&gt;</span> str <span class="fu">&lt;*&gt;</span> len</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>which isn’t so far from the C after all!</p>
</div>
<p>Anyway, now that the shader’s loaded into memory, our utility function can compile it and check that compilation succeeded.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         glCompileShader shaderID</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         compileStatus <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           glGetShaderiv shaderID <span class="dt">GL_COMPILE_STATUS</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If compilation failed, we output the info log to tell us what happened. We have to do a little bit of marshalling between C and Haskell datatypes to access the log as a <em><code>Text</code></em> object for printing.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         when (compileStatus <span class="fu">==</span> <span class="dt">GL_FALSE</span>) <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           infoLogLength <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>             glGetShaderiv shaderID <span class="dt">GL_INFO_LOG_LENGTH</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="kw">let</span> infoLogLength&#39; <span class="fu">=</span> fromIntegral infoLogLength</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           allocaBytes infoLogLength&#39; <span class="fu">$</span> \infoBuffer <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               glGetShaderInfoLog </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">shaderID infoLogLength</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">nullPtr infoBuffer</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               T.putStr <span class="fu">=</span>≪ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">T.peekCStringLen (</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">infoBuffer,</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                            </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">infoLogLength&#39;)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Having done that, we can return the ID of our compiled shader object if compilation was successful, or <em><code>Nothing</code></em> otherwise.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         return <span class="fu">$</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">if</span> compileStatus <span class="fu">==</span> <span class="dt">GL_TRUE</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">then</span> <span class="dt">Just</span> shaderID <span class="kw">else</span> <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Our helper function complete, let’s use it to load the vertex and fragment shaders. We wrap the calls to <code>loadAndCompileShader</code> in <em><code>MaybeT</code></em> so that this function will drop out automatically if either of them fail.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   vs </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MaybeT</span> <span class="fu">$</span> loadAndCompileShader</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="dt">GL_VERTEX_SHADER</span> <span class="st">&quot;vertexShader.glsl&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   fs </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">MaybeT</span> <span class="fu">$</span> loadAndCompileShader</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="dt">GL_FRAGMENT_SHADER</span> <span class="st">&quot;fragmentShader.glsl&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we need to generate our shader program and link the two shader objects into it.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   programID <span class="ot">←</span> glCreateProgram</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glAttachShader programID vs</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glAttachShader programID fs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glLinkProgram  programID</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   linkStatus <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGetProgramiv programID <span class="dt">GL_LINK_STATUS</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here again we output the log and drop out of the initialisation with <em><code>Nothing</code></em> if <code>linkStatus</code> is <code>GL_FALSE</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   when (linkStatus <span class="fu">==</span> <span class="dt">GL_FALSE</span>) ∘ <span class="dt">MaybeT</span> <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     infoLogLength <span class="ot">←</span> fillWith <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       glGetProgramiv programID <span class="dt">GL_INFO_LOG_LENGTH</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="kw">let</span> infoLogLength&#39; <span class="fu">=</span> fromIntegral infoLogLength</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     allocaBytes infoLogLength&#39; <span class="fu">$</span> \infoBuffer <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       glGetProgramInfoLog </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">programID infoLogLength</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">nullPtr infoBuffer</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       T.putStr <span class="fu">=</span>≪ T.peekCStringLen (infoBuffer, infoLogLength&#39;)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     return <span class="dt">Nothing</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Having linked the shader program, we can throw away the individual shader objects that went into it, which will make cleaning up later easier.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDeleteShader vs</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDeleteShader fs</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We now know that we have a valid, correctly linked program identified by <code>programID</code>. We can query this for the locations of its attributes and constants which we’ll use to set their values later.</p>
<p>To ease the marshalling between Haskell and C I’m going to define a couple of helper functions here. The first, <code>unsign</code>, takes the C idiom of returning negative numbers on failure and converts it into the Haskell <em><code>Maybe</code></em> type.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span><span class="ot"> unsign ::</span> <span class="dt">Integral</span> a <span class="ot">⇒</span> <span class="dt">GLint</span> <span class="ot">→</span> <span class="dt">Maybe</span> a</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       unsign x </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">|</span> x <span class="fu">&lt;</span> <span class="dv">0</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Nothing</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">|</span> otherwise </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> fromIntegral x</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The second helper function deals with marshalling strings to C. I’m going to use <em><code>ContT</code></em> to reduce the reliance on callback functions. The <code>forString</code> function will take in a function expecting a program ID and a C string, along with a <em><code>Text</code></em> object with the actual string we want to use. It will transform this into an action wrapped in <em><code>ContT</code></em> and <em><code>MaybeT</code></em>, representing the fact that it is run as part of a sequence of callbacks, any of which might fail, in which case they should all fail. Since we’re always going to be querying the same shader program we’ll just refer to it directly in <code>fromString</code> so that we don’t have to pass it in every time. Finally we use <code>unsign</code> to return <em><code>Nothing</code></em> on failure.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> forString </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Integral</span> a</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">⇒</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(<span class="dt">GLuint</span> <span class="ot">→</span> <span class="dt">Ptr</span> <span class="dt">GLchar</span> <span class="ot">→</span> <span class="dt">IO</span> <span class="dt">GLint</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">T.Text</span> <span class="ot">→</span> <span class="dt">MaybeT</span> (<span class="dt">ContT</span> r <span class="dt">IO</span>) a</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       f <span class="ot">`forString`</span> x <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         (str, _) <span class="ot">←</span> lift <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           <span class="dt">ContT</span> (T.withCStringLen <span class="fu">$</span> T.concat [x, <span class="st">&quot;\0&quot;</span>])</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         loc <span class="ot">←</span> liftIO <span class="fu">$</span> f programID str</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         <span class="dt">MaybeT</span> ∘ return <span class="fu">$</span> unsign loc</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Armed with <code>forString</code>, what would have been a tedious process of marshalling C strings through a series of callbacks can be expressed quite idiomatically:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glShader <span class="ot">←</span> <span class="dt">MaybeT</span> ∘ evalContT ∘ runMaybeT <span class="fu">$</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dt">Shader</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;$&gt;</span> pure programID</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;position&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;colour&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;normal&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetAttribLocation  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;uv&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;pvmMatrix&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;viewModelMatrix&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;normalMatrix&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;diffuseColour&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;ambientColour&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;specularColour&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;shininess&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;lightDirection&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       <span class="fu">&lt;*&gt;</span> glGetUniformLocation </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">`forString`</span> <span class="st">&quot;diffuseMap&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>It is important that the names of the attributes and uniforms above match those that are actually used in <a href="#appendix-shader-code">the shaders</a>, otherwise they won’t be found and we’ll drop out with <em><code>Nothing</code></em> here.</p>
<div class="sidenote">
<p>Confession: I originally tried to define <code>forString</code> with the type <em><code>ContT r (MaybeT IO) GLuint</code></em> rather than the current <em><code>MaybeT (ContT r IO) GLuint</code></em>, but I couldn’t figure it out. Doing this would mean we could avoid unwrapping the <em><code>MaybeT</code></em> with <code>runMaybeT</code> and then wrapping it up again with <em><code>MaybeT</code></em> at the end, which would be a bit nicer. It does rather change the meaning of what’s being expressed though, and I think for that reason it might be impossible.</p>
</div>
<h3 id="load-mesh">
Loading the mesh
</h3>
<p>Finally, here’s the mesh. We’ll initialise a <em><code>MeshSpec</code></em> describing a <span class="math inline">\(1\times1\times1\)</span> cube and convert that to <em><code>MeshData</code></em> using the functions described in the previous section. At that point we’ll have some raw data, such as might have been read in from a model file if we were drawing something more complicated than a cube.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> cube <span class="fu">=</span> fromMeshSpec <span class="fu">$</span> cuboid <span class="dv">1</span> <span class="dv">1</span> <span class="dv">1</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We need to create two buffer objects: our VBO and our IBO. We create buffer objects using <code>glGenBuffers</code>; this in turn will give as an ID for each buffer with which we can refer to it.</p>
<p><code>glGenBuffers</code> takes an array and a length and fills the values in that array with that many buffers. We use the facilities in <em><code>Foreign.Marshal.Array</code></em> to allocate the array and pull out the values at the end.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   [vbo, ibo] <span class="ot">←</span> liftIO ∘ allocaArray <span class="dv">2</span> <span class="fu">$</span> \buffers <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGenBuffers <span class="dv">2</span> buffers</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     peekArray <span class="dv">2</span> buffers</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We’ll start by setting up the vertex buffer. First we need to bind the buffer ID we just got to the <code>GL_ARRAY_BUFFER</code> target so that GL knows what we intend to do with it. Then we fill it with data. Finally, we bind 0 to <code>GL_ARRAY_BUFFER</code> to free it up.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ARRAY_BUFFER</span> vbo</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">vertices   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> vertexData cube</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">vertexBufSize </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sizeOf (V.head vertices) <span class="fu">*</span> V.length vertices</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO ∘ SV.unsafeWith (SV.convert vertices) <span class="fu">$</span> \vsPtr <span class="ot">→</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glBufferData </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_ARRAY_BUFFER</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromIntegral vertexBufSize)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(castPtr vsPtr)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_STATIC_DRAW</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ARRAY_BUFFER</span> <span class="dv">0</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Again we use <code>unsafeWith</code> to get the data into C. We have to convert the vector into a <em>Storable</em> vector using <code>Data.Vector.Storable.convert</code> before we can do this.</p>
<p>Setting up the index buffer is similar, only this time the target is <code>GL_ELEMENT_ARRAY_BUFFER</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ELEMENT_ARRAY_BUFFER</span> ibo</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">indices   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> indexData cube</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">indexBufSize </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sizeOf (V.head indices) <span class="fu">*</span> V.length indices</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO ∘ SV.unsafeWith (SV.convert indices) <span class="fu">$</span> \isPtr <span class="ot">→</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glBufferData </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_ELEMENT_ARRAY_BUFFER</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(fromIntegral indexBufSize)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(castPtr isPtr)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_STATIC_DRAW</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ELEMENT_ARRAY_BUFFER</span> <span class="dv">0</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now that our buffer objects are set up for vertices and indices, we can wrap them up together in a <em>Vertex Array Object</em>. This collects the data together with properties about how it should be used. First we generate and bind the vertex array object, much as we did the vertex buffer objects earlier.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   vao <span class="ot">←</span> liftIO ∘ alloca <span class="fu">$</span> \vaoPtr <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glGenVertexArrays <span class="dv">1</span> vaoPtr</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     peek vaoPtr</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindVertexArray vao</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Next we bind the buffer objects we made for the vertex and index data to this new vertex array object.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ARRAY_BUFFER</span> vbo</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindBuffer <span class="dt">GL_ELEMENT_ARRAY_BUFFER</span> ibo</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We need to enable all four of the attributes our shader uses.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (positions glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (colours glShader)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (normals glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnableVertexAttribArray (uvs glShader)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And finally, we fill in the attributes, which tells GL the actual layout of the data within the buffer. When talking about the layout, we’re mainly talking about two things: The <em>offset</em> and the <em>stride</em>. The offset tells us how far into the array that chunk of data begins, while the stride tells us the difference from the start of one set of values to the start of the next. Since we have all our data in one interleaved array, the stride will be the same for each kind of data: <code>11 * sizeof(GLfloat)</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">offset x</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> wordPtrToPtr <span class="fu">$</span> x <span class="fu">*</span> fromIntegral floatSize</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">stride    </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> fromIntegral floatSize <span class="fu">*</span> <span class="dv">11</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">floatSize </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sizeOf (undefined<span class="ot">::</span><span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we can set the values for each type using <code>glVertexAttribPointer</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (positions glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">3</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">0</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (colours glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">3</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">3</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (normals glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">3</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">6</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glVertexAttribPointer (uvs glShader)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     <span class="dv">2</span> <span class="dt">GL_FLOAT</span> <span class="dt">GL_FALSE</span> stride (offset <span class="dv">9</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Our buffer objects are now set up and loaded onto the GPU ready to use. The last thing to do is to put them in the <em><code>Mesh</code></em> structure ready to be added to our <em><code>Resources</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> glMesh <span class="fu">=</span> <span class="dt">Mesh</span> vbo ibo vao (fromIntegral <span class="fu">$</span> V.length indices)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now that we have everything we need, we call <code>initGL</code> and then return the <code>Resources</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   liftIO initGL ≫ return (<span class="dt">Resources</span> glMesh textureID glShader)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And we’re done! Our <code>Resources</code> handle should now contain all the data we need, unless there was a problem, in which case we’ll fail gracefully.</p>
<h2 id="setting-up-gl">Setting up GL</h2>
<p>That call to <code>initGL</code> at the end of <code>initialise</code> allows us to give GL its basic settings.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; initGL ::</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> initGL <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glClearColor </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.96</span> <span class="fl">0.96</span> <span class="fl">0.96</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glClearDepth </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glEnable     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_DEPTH_TEST</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDepthFunc  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_LEQUAL</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glCullFace   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_BACK</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>While we’re here, remember the <code>resize</code> function we gave to GLFW at the start? Let’s get the definition of that out of the way.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; resize ::</span> <span class="dt">IORef</span> (<span class="dt">M44</span> <span class="dt">GLfloat</span>) <span class="ot">→</span> <span class="dt">Int</span> <span class="ot">→</span> <span class="dt">Int</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> resize projectionMatrix w h <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>resize</code> takes the <code>IORef</code> we made to store the projection matrix, and the new width and height. It has two jobs: it needs to update the viewport, so that GL rendering can fill the window, and it needs to update the projection matrix, so that the aspect ratio doesn’t get ruined.</p>
<p>Setting the viewport is simple – just pass the origin <code>(0, 0)</code>, and the full width and height of the window. Of course. if we only wanted to draw into a subset of the window that’s what we’d pass. The projection matrix is calculated using the same function we used in <code>main</code>: <code>calculateProjectionMatrix</code>. It is then written to the <code>IORef</code> so that we can access it from within our main loop.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glViewport <span class="dv">0</span> <span class="dv">0</span> (fromIntegral w) (fromIntegral h)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   writeIORef projectionMatrix <span class="fu">$</span> calculateProjectionMatrix (w, h)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here’s the <code>calculateProjectionMatrix</code> function itself. We use the <code>perspective</code> function from <code>linear</code> to do the work for us. <code>π/3</code> radians gives us a field of view of 60°.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; calculateProjectionMatrix ::</span> <span class="dt">Integral</span> a <span class="ot">⇒</span> (a, a) <span class="ot">→</span> <span class="dt">M44</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> calculateProjectionMatrix (w, h) <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   perspective (π<span class="fu">/</span><span class="dv">3</span>) (fromIntegral w <span class="fu">/</span> fromIntegral h) <span class="dv">1</span> <span class="dv">100</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="handling-state">Handling state</h2>
<p>This demo is very simple, so there isn’t much state to deal with. Nevertheless, the cube <em>does</em> spin, so we will need to keep track of its angle. As well as that, I’m going to include the camera position within the state structure even though it remains constant throughout the demo, as it’s convenient to hold the data together, and in real life you’re almost certainly going to be moving the camera at some point anyway.</p>
<p>Our state, then, can be represented as follows:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">data</span> <span class="dt">DemoState</span> <span class="fu">=</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { cubeRotation   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Quaternion</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , cameraPosition </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V3</span> <span class="dt">GLfloat</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And the default state is simply:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; defaultState ::</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> defaultState <span class="fu">=</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { cubeRotation   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">axisAngle (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) <span class="dv">0</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , cameraPosition </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="fu">-</span><span class="dv">2</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>There are a number of ways to handle varying state in Haskell, and which to use is an interesting choice which can have wide-reaching implications for your application. For this demo, though, I’m keeping it simple, as I want to keep the focus on use of the <code>gl</code> library. So we’ll just have a simple update function which takes the previous state and a time delta, and returns the new state.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; update ::</span> <span class="dt">DemoState</span> <span class="ot">→</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">DemoState</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> update s dt <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   s { cubeRotation <span class="fu">=</span> cubeRotatedBy (rotationSpeed <span class="fu">*</span> dt) }</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cubeRotatedBy θ </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cubeRotation s <span class="fu">*</span> axisAngle (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>) θ</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     rotationSpeed   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">π <span class="fu">/</span> <span class="dv">2</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="the-main-loop">The main loop</h2>
<p>Our <code>runDemo</code> function will comprise the main loop for this demo. It takes the two <code>IORef</code>s we created at the start, a callback we can use to swap the framebuffers, and the <code>Resources</code> we just loaded. If the resources failed to load it just drops out straight away.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> runDemo </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IORef</span> <span class="dt">Bool</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IORef</span> (<span class="dt">M44</span> <span class="dt">GLfloat</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Maybe</span> <span class="dt">Resources</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">IO</span> ()</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> runDemo _ _ _ <span class="dt">Nothing</span> <span class="fu">=</span> return ()</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Otherwise it runs <code>loop</code>, which runs the frame unless the value pointed to by <code>closed</code> is <code>True</code>. When it <em>is</em> <code>True</code>, <code>loop</code> drops out and <code>cleanup</code> gets run.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> runDemo closed projectionMatrix swapBuffers (<span class="dt">Just</span> res) <span class="fu">=</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">do</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">loop defaultState</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">cleanup res <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   loop s <span class="fu">=</span> readIORef closed ≫<span class="fu">=</span> \c <span class="ot">→</span> unless c (runFrame s)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The frame itself is comprised of essentially two phases, the update and the draw phase. We pass the delta time value to the update, but not the draw. Finally we call <code>loop</code>, which again checks <code>closed</code> and runs the next frame.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   runFrame s <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     draw res s <span class="fu">=</span>≪ readIORef projectionMatrix</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glFlush ≫ swapBuffers</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     dt <span class="ot">←</span> getDeltaTime</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     loop <span class="fu">$</span> update s dt</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<div class="sidenote">
<p>The order here might look a bit funny. The following is more usual:</p>
<ol style="list-style-type: decimal">
<li>Get delta time</li>
<li>Run update</li>
<li>Draw scene</li>
<li>Swap buffers</li>
<li>Loop</li>
</ol>
<p>However when you look at the function above, you’ll realise they’re equivalent. The reason I’ve done it this way is to avoid introducing a variable <code>s'</code> for the updated state, which is easy to make mistakes with (using <code>s</code> instead of <code>s'</code>), and makes the code just a little less clean.</p>
</div>
<h2 id="actually-drawing-things">Actually drawing things</h2>
<p>At long last, we’re ready to implement the <code>draw</code> function, which actually renders the graphics to the screen. This function is actually surprisingly simple. A lot of the work in graphics programming goes into efficiently moving data between the CPU and the GPU – that and the shader code, of course. The actual rendering part is doing little more than passing constants to the shader to work with.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; draw ::</span> <span class="dt">Resources</span> <span class="ot">→</span> <span class="dt">DemoState</span> <span class="ot">→</span> <span class="dt">M44</span> <span class="dt">GLfloat</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> draw res state projectionMatrix <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Note that we are taking the projection matrix directly here, rather than the <em><code>IORef</code></em>. We let the main loop deal with the fact that this might be modified in a callback – as far as the <code>draw</code> function is concerned, this is the projection matrix it is dealing with and it will not change – not during this frame, at least.</p>
<p>We have the projection matrix, but there are a number of other matrices we’ll need to calculate. The <em>view matrix</em> offsets everything based on the position of the camera. The <em>model matrix</em> then applies the model transformations (in this case just rotation).</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">viewMat <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  lookAt (cameraPosition state) (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">0</span>) (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">modelMat <span class="fu">=</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  mkTransformation (cubeRotation state) (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">0</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>It is convenient to precalculate the products of these matrices.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">viewModelMat </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> viewMat <span class="fu">!*!</span> modelMat</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">pvmMat       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> projectionMatrix <span class="fu">!*!</span> viewModelMat</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally the <em>normal matrix</em> is used to interpolate normals across faces. Since not all matrices have a valid inverse, I’ve chosen to fall back on the identity matrix in case <code>inv33</code> returns <em><code>Nothing</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">viewModelMat33 </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> viewModelMat <span class="fu">^.</span> _xyz <span class="fu">.</span> column _xyz</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">inverseMat     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> inv33 viewModelMat33</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">normalMat      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> maybe identity distribute inverseMat</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we have all the data we need, we can start sending it to GL. We start by clearing both the colour and the depth buffers.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glClear </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> <span class="fu">$</span>  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_COLOR_BUFFER_BIT</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.|.</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_DEPTH_BUFFER_BIT</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Next, we bind the shader program, mesh, and texture ready for use. The texture is bound to texture unit 0, which will become important in a minute.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUseProgram ∘ shaderProgram <span class="fu">$</span> shader res</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindVertexArray ∘ meshVAO <span class="fu">$</span> mesh res</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glActiveTexture <span class="dt">GL_TEXTURE0</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glBindTexture <span class="dt">GL_TEXTURE_2D</span> <span class="fu">$</span> texture res</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>We pass in the required uniforms to the shader. First the matrices, where the <em><code>Storable</code></em> instance for <em><code>M44</code></em> helps us a lot.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with pvmMat <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glUniformMatrix4fv </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(pvmMatrix <span class="fu">$</span> shader res)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span> <span class="dt">GL_TRUE</span> ∘ castPtr</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with viewModelMat <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glUniformMatrix4fv </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(viewModelMatrix <span class="fu">$</span> shader res)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span> <span class="dt">GL_TRUE</span> ∘ castPtr</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with normalMat <span class="fu">$</span></code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     glUniformMatrix3fv </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(normalMatrix <span class="fu">$</span> shader res)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">1</span> <span class="dt">GL_TRUE</span> ∘ castPtr</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And the light and texture data, which is simple. For the texture, the number passed is the index of the texture unit that texture is bound to; we specified <code>GL_TEXTURE0</code> a minute ago so we put <code>0</code> here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform4f (diffuseColour <span class="fu">$</span> shader res)  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.6</span> <span class="fl">0.6</span> <span class="fl">0.6</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform4f (ambientColour <span class="fu">$</span> shader res)  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.1</span> <span class="fl">0.1</span> <span class="fl">0.1</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform4f (specularColour <span class="fu">$</span> shader res) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.7</span> <span class="fl">0.7</span> <span class="fl">0.7</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform1f (shininess <span class="fu">$</span> shader res)      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fl">0.4</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform3f (lightDirection <span class="fu">$</span> shader res) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glUniform1i (diffuseMap <span class="fu">$</span> shader res)     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dv">0</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, we’re ready to draw!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDrawElements </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_TRIANGLES</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(meshIndexCount <span class="fu">$</span> mesh res)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">GL_UNSIGNED_INT</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(wordPtrToPtr <span class="dv">0</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>If you’ve got this far you should have a spinning cube on the screen! Pat yourself on the back; you’re ready to go.</p>
<h2 id="resource-cleanup">Resource cleanup</h2>
<p>OK, we’ve had our fun, now we need to clean up after ourselves. Actually, since we’re on our way out of the application we don’t as the OS will no doubt take care of it for us, but I’m going to anyway for the sake of completeness if nothing else.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; cleanup ::</span> <span class="dt">Resources</span> <span class="ot">→</span> <span class="dt">IO</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> cleanup (<span class="dt">Resources</span> m t s) <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with (meshVAO m) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteVertexArrays <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with (meshVBO m) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteBuffers <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with (meshIBO m) </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteBuffers <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   with t           </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> glDeleteTextures <span class="dv">1</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   glDeleteProgram  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> shaderProgram s</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The gist of this is pretty simple: for every <code>glCreate*</code> or <code>glGen*</code> function there is a <code>glDelete*</code> equivalent which we have to call.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>Whew, well, that was a pretty long post! I hope that it will come in handy for anyone who, like me, wants to fiddle about with OpenGL in Haskell but doesn’t want to spend hours getting the basic pipeline up and running. Obviously you will want to build your own abstractions on top of this and presumably draw something more interesting than a rubbish cube. But at least with this as a starting point you’ll be able to build it up from a program that works.</p>
<p>If you liked this post, please drop me a tweet <a href="http://twitter.com/danielpwright">@danielpwright</a>! If it’s popular, I might explore some other libraries in a similar way. Similarly, if you found anything lacking, please let me know.</p>
<p>As I mentioned, this was also my first time using the <code>gl</code> library. Having played with it a bit now, I must say that I like it, despite the annoyance of having to marshal data into C manually. This process is quite easy to abstract into something easier to use, and if it’s me doing the abstraction I can be sure it will be well-suited to my application.</p>
<p>Apart from that, coming from a traditional games background (my day job is as a console games programmer in C++), we tend to be quite obssessive over what our memory is doing. Even having garbage collection feels a bit… <em>free and easy</em>, let alone all the other high-level constructs Haskell offers! Knowing that I’m dealing with raw GL bindings and being able to see exactly how data is marshalled between Haskell and C gives me a reassuring sense that, at least as far as my graphics pipeline is concerned, I am in control of my data. There’s nothing worse than getting a little way into something and then realising that something you hadn’t anticipated about the abstraction you’re working with prevents you from doing the thing you want to do.</p>
<p>There is probably still a place for a package like <a href="https://hackage.haskell.org/package/OpenGL">OpenGL</a>. The level of abstraction there feels much more natural for a Haskell library. But I think, for my part, I’d rather set the level of abstraction myself, so as to best match the needs of the project I’m working on, so I will be using the <a href="https://hackage.haskell.org/package/gl">gl</a> package for any graphics projects I do from now on.</p>
<h2 id="appendix-shader-code">Appendix: shader code</h2>
<p>Here is the code for the two shaders I use in this demo. They are cobbled together from a variety of tutorials on the internet, and aren’t really very useful for any sort of production use, given that they only allow for a single directional light, they assume coloured vertices and alpha-blended textures, and so on. The goal here wasn’t really to explore interesting shader code or graphics techniques, but rather to give an absolute baseline working environment in GL.</p>
<p>So, I assume that once you have this up and running one of the first things you’ll want to do is throw away these shaders and replace them with something more useful, possibly by following one of the many tutorials on the internet for working with OpenGL in C/C++, since the code samples translate quite naturally when using the <code>gl</code> package.</p>
<p>I include these two shaders, therefore, without comment.</p>
<h3>
vertexShader.glsl
</h3>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> <span class="pp">#version 330</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">mat4</span> pvmMatrix;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">mat4</span> viewModelMatrix;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">mat3</span> normalMatrix;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> position;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> colour;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> normal;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec2</span> uv;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec3</span> calculatedNormal;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec4</span> calculatedEye;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec4</span> rgba;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec2</span> fragmentUV;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">void</span> <span class="fu">main</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">{</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  <span class="dt">vec4</span> position4 = <span class="dt">vec4</span>(position, <span class="fl">1.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  <span class="bu">gl_Position</span> = pvmMatrix * position4;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  calculatedNormal = <span class="bu">normalize</span>(normalMatrix * normal);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  calculatedEye = -(viewModelMatrix * position4);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  rgba = <span class="dt">vec4</span>(colour, <span class="fl">1.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">  fragmentUV = uv;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">}</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h3>
fragmentShader.glsl
</h3>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> <span class="pp">#version 330</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">vec4</span> diffuseColour;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">vec4</span> ambientColour;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">vec4</span> specularColour;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">float</span> shininess;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">vec3</span> lightDirection;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="kw">uniform</span> <span class="dt">sampler2D</span> diffuseMap;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec3</span> calculatedNormal;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec4</span> calculatedEye;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec4</span> rgba;</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">in</span> <span class="dt">vec2</span> fragmentUV;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">out</span> <span class="dt">vec4</span> colorOut;</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"><span class="dt">void</span> <span class="fu">main</span>()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">{</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec4</span> spec = <span class="dt">vec4</span>(<span class="fl">0.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec3</span> n = <span class="bu">normalize</span>(calculatedNormal);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">float</span> intensity = <span class="bu">max</span>(<span class="bu">dot</span>(n,lightDirection), <span class="fl">0.0</span>);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="kw">if</span> (intensity &gt; <span class="fl">0.0</span>)</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    {</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        <span class="dt">vec3</span> e = <span class="bu">normalize</span>(<span class="dt">vec3</span>(calculatedEye));</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        <span class="dt">vec3</span> h = <span class="bu">normalize</span>(lightDirection + e);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        <span class="dt">float</span> intSpec = <span class="bu">max</span>(<span class="bu">dot</span>(h,n), <span class="fl">0.0</span>);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">        spec = specularColour * <span class="bu">pow</span>(intSpec,shininess);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    }</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl"> </code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec4</span> texCol = <span class="bu">texture</span>(diffuseMap, fragmentUV);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    <span class="dt">vec4</span> baseCol = <span class="bu">mix</span>(rgba, texCol, texCol.<span class="fu">a</span>);</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">    colorOut = baseCol * <span class="bu">max</span>(intensity * diffuseColour + spec, ambientColour);</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode glsl"><code class="sourceCode glsl">}</code></pre></div></td>
</tr>
</tbody>
</table>
</div>

<div class="tagsinfo">Tagged with: <a href="/tags/haskell/index.html">haskell</a>, <a href="/tags/graphics/index.html">graphics</a>, <a href="/tags/gl/index.html">gl</a>, <a href="/tags/pragmatic-primers/index.html">pragmatic-primers</a>, <a href="/tags/literate-programs/index.html">literate-programs</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 4: Atom Feed</title>
    <link href="http://dpwright.com/posts/2015/03/18/generating-this-website-part-4-atom-feed/index.html" />
    <id>http://dpwright.com/posts/2015/03/18/generating-this-website-part-4-atom-feed/index.html</id>
    <published>2015-03-18T10:08:39Z</published>
    <updated>2015-03-18T10:08:39Z</updated>
    <summary type="html"><![CDATA[<div class="info">18 March, 2015</div>



<div class="sidenote">
<p>This is part four of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>By this point we have the basic features up and running, and everything we do from here on are more or less “nice to have”s. First of which is an Atom feed, so people using feed readers can easily keep track of new posts.</p>
<p>Feeds seem to have become less popular recently, which I think is a shame since I find them to be an incredibly easy way to keep on top of new content across the various communities I’m interested in. Perhaps I am part of the problem, however, as I recently removed the Atom feed link from the header during the redesign of this website over the new year holidays. It may come as a surprise, then, that I have a feed at all! I do, and you can access it at <a href="http://dpwright.com/atom.xml" class="uri">http://dpwright.com/atom.xml</a>, which I had thought was a standard location which browsers and feed readers would pick up automatically. It turns out I was wrong about that, so I guess I’ll have to add the link back in.</p>
<p>Anyway, here’s how I generate the above feed. There’s not a lot new in this post that isn’t already covered in the <a href="http://jaspervdj.be/hakyll/tutorials/05-snapshots-feeds.html">official documentation on feeds</a>, but here it is.</p>
<p>First, the usual pragmas and imports. I was quite pleased with the results of using <code>UnicodeSyntax</code> last post, so I’m going to do it again.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Feed</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Let’s import some useful operators…</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span>     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((⧺))</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid.Unicode</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((⊕))</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">((<span class="fu">&lt;$&gt;</span>))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally, we make use of <code>postCtx</code> from <em><code>Posts</code></em>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span> (postCtx)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Hakyll supports feeds natively and provides the <em><code>FeedConfiguration</code></em> type to configure the feed’s properties. Here’s mine.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; feedConfig ::</span> <span class="dt">FeedConfiguration</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> feedConfig <span class="fu">=</span> <span class="dt">FeedConfiguration</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   { feedTitle       </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Wright Access&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedDescription </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;dpwright&#39;s notes on code, Japan, &quot;</span> ⧺</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Japanese, and anything else&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedAuthorName  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;Daniel P. Wright&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedAuthorEmail </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;dani@dpwright.com&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   , feedRoot        </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;http://dpwright.com&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   }</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now we can generate the feed itself. In this series so far, you’ve already seen many times that to generate anything we need a <em><code>Compiler</code></em> and a <em><code>Context</code></em>, which we can then refer to in a set of <em><code>Rules</code></em> which will determine where and from what source files the content is made. In this case, all of these things are so simple we just define them inline.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; feed ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> feed tags <span class="fu">=</span> create [<span class="st">&quot;atom.xml&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     allContent </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> loadAllSnapshots <span class="st">&quot;posts/*&quot;</span> <span class="st">&quot;content&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ps         </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> take <span class="dv">10</span> <span class="fu">&lt;$&gt;</span> recentFirst allContent</code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     renderAtom feedConfig feedCtx ps</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> feedCtx <span class="fu">=</span> postCtx tags ⊕ bodyField <span class="st">&quot;description&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The feed context is just the post context augmented with the <code>description</code> field. You may remember when we were <a href="/posts/2014/09/29/generating-this-website-part-2-posts/#generating-posts">generating the posts</a> we used a function called <code>saveSnapshot</code> to save a copy of the content before adding headers and other global design elements. Here we load that content and put it in the <code>description</code> field for the post, resulting in an Atom feed which contains the entire post as its description, so that it can be read from within the feed reader of your choice.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Generating this website part 3: Indexing</title>
    <link href="http://dpwright.com/posts/2015/03/04/generating-this-website-part-3-indexing/index.html" />
    <id>http://dpwright.com/posts/2015/03/04/generating-this-website-part-3-indexing/index.html</id>
    <published>2015-03-04T09:57:39Z</published>
    <updated>2015-03-04T09:57:39Z</updated>
    <summary type="html"><![CDATA[<div class="info"> 4 March, 2015</div>



<div class="sidenote">
<p>This is part three of the “generating this website” series. To read the rest of the series, go to the series index <a href="http://www.dpwright.com/tags/generating%20this%20website">here</a></p>
</div>
<p>After something of a hiatus, I’m back with the next in the “generating this website” series, which describes the actual code used to create the site you’re reading. This time I’m going to cover indexing, which in combination with the <a href="/posts/2014-08-04-generating-this-website-part-1-introduction">introduction</a> and the previous post on <a href="/posts/2014-09-29-generating-this-website-part-2-posts">generating posts themselves</a> is enough to get a basic Hakyll site up and running.</p>
<p>What do I mean by “indexing”? Well, basically just creating the list of blog posts on the site’s <a href="/">main page</a>, or the indices by <a href="/tags">tags</a>. This is the main mechanism by which visitors will navigate the site and be introduced to new posts.</p>
<p>It’s possible to go quite deep on this, breaking up indices into pages, having lists by year or by month, and so forth. As I don’t have too many posts, I’m keeping it simple for now, with a single-page index of all posts, and a similar single-page index per tag. I may revisit this as the number of posts increases to split the index up over multiple pages, or have some sort of infinite scrolling thing like twitter. Should that happen I’ll update this post – as I’ll have to of course, because this post is a literate program, and the code you’re about to see is what I actually run to generate the index pages for this site.</p>
<p>Let’s get cracking.</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>For this post, I’m going to try out something I haven’t tried before, and that’s the <code>UnicodeSyntax</code> extension for GHC and the <a href="https://hackage.haskell.org/package/base-unicode-symbols">base-unicode-symbols</a> package which gives Unicode equivalents to commonly used Haskell operators. Why? Well, I’ve recently switched to using the <a href="http://checkmyworking.com/cm-web-fonts/">Computer Modern</a> series of fonts on the site; specifically I use <code>Computer Modern Serif</code> for the prose and <code>Computer Modern Concrete</code> for code. I think it looks really nice (well, unless you’re on Windows anyway), but some of Haskell’s operators are a little ungainly – for example the ubiquitous monadic bind operator comes out as <code>&gt;&gt;=</code>, and monoidal concatenation isn’t much better: <code>&lt;&gt;</code>. With unicode operators I can use <code>≫=</code> and <code>⊕</code> respectively, which look nicer at the possible expense of being slightly more awkward to type.</p>
<p>Most of the operators are similar enough to their ASCII originals that I hope readers will still be able to follow the code.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE UnicodeSyntax #-}</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Having enabled Unicode syntax, I’ll start with the usual incantation:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Indexing</span> <span class="kw">where</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Hakyll</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Here come the Unicode modules, which give me the operators from <code>Control.Monad</code>, <code>Data.Monoid</code>, and the Prelude, in Unicode.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Unicode</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Monoid.Unicode</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Prelude.Unicode</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p><code>base-unicode-symbols</code> does export a module for <code>Control.Applicative</code>, but there is no Unicode symbol representing <code>&lt;$&gt;</code>, so I import that here.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;$&gt;))</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The following two modules come in handy for imposing a pseudo-random order on my tags (for the tag cloud). In fact there’s nothing random about it – I just order the tags based on the hash of their name, but the result looks a lot less tacky than an alphabetically ordered list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Hashable</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Data.Ord</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Finally I import the previous blog on <a href="/posts/2014-09-29-generating-this-website-part-2-posts">posts</a>, to make use of the <code>removeIndexHtml</code> function.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">import </span><span class="dt">Posts</span> (removeIndexHtml)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<h2 id="the-main-index">The main index</h2>
<p>This is the main index which you see on the <a href="/">main page</a>. Even though it is not an index by tag, I need to make use of the tags in order to list under each post title what tags apply to that post.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; index ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> index tags <span class="fu">=</span> create [<span class="st">&quot;index.html&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> indexCompiler tags <span class="st">&quot;posts/*&quot;</span> indexContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The rule is pretty simple – I create a page, <code>index.html</code>, which runs the <code>indexCompiler</code> over all files in the <code>posts</code> directory. Since I’m creating the file from scratch, rather than converting from some source format, I don’t need to perform any transformation on the filename so I can just use <code>idRoute</code>.</p>
<p>As always with Hakyll, we make use of a <code>Compiler</code> to give the conversion/generation steps for a resource and a <code>Context</code>to supply the fields. The <code>Context</code> in this case is as follows:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; indexContext ::</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexContext </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> bodyField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;body&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ metadataField </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;url&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ pathField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;path&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ missingField  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>These fields can then be used in the index template.</p>
<p>What about the <code>Compiler</code>? Well, let’s start by looking at its type signature.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexCompiler </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Tags</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Pattern</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>               </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>There are quite a few parameters here. As mentioned, we need the <code>Tags</code>, and the <code>Pattern</code> allows us to specify how to find the posts. We could have just used <code>indexContext</code> directly here rather than pass it in, but as we’ll see if we pass it in we can re-use this <code>Compiler</code> when we generate our tag-specific indices by passing in a different <code>Context</code>. Finally, the function returns our <code>Compiler</code>.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> indexCompiler tags pattern baseCtx <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ctx <span class="ot">←</span> mkCtx baseCtx <span class="fu">&lt;$&gt;</span> postList tags pattern recentFirst</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   makeItem <span class="st">&quot;&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/archive.html&quot;</span> ctx</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> relativizeUrls</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> withItemBody removeIndexHtml</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span> mkCtx base list <span class="fu">=</span> constField <span class="st">&quot;posts&quot;</span> list ⊕ base</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The compiler is fairly standard, except perhaps for that first line – what’s going on there? Well, in order to generate our index, we first need to generate our list of posts, and that’s the job of <code>postList</code>. We then add that to our <code>Context</code>, and use this augmented <code>Context</code> to generate the index page as a whole.</p>
<p>That is actually where most of the work happens – if you think about it, the <code>index</code> page itself is just a skeleton around the main thing we’re trying to display – the list of posts. That being the case, let’s take a look at how that’s generated.</p>
<h2 id="the-list-of-posts">The list of posts</h2>
<p>OK, so we want a thing, it’s Hakyll, what do we need? A <code>Context</code> and a <code>Compiler</code>, of course! We define the <code>Context</code> required to generate a single item in the list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; itemCtx ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> itemCtx tags </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> tagsField <span class="st">&quot;tags&quot;</span> tags</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%e %B, %Y&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField <span class="st">&quot;url&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>              </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>In other words, to display a single item, we need the post’s tags, its date and URL, and the default context, which will give us its title.</p>
<p>Given this <code>Context</code>, Hakyll provides a function called <code>applyTemplateList</code> which allows us to apply a template over each <code>Item</code> in a list, turning a <code>Compiler</code> for a list of <code>Item</code>s into a <code>Compiler</code> for a single <code>Item</code> representing the whole list.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postList </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">::</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Tags</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Pattern</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">([<span class="dt">Item</span> <span class="dt">String</span>] <span class="ot">→</span> <span class="dt">Compiler</span> [<span class="dt">Item</span> <span class="dt">String</span>])</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>          </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">→</span> </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Compiler</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> postList tags pattern sortFilter <span class="fu">=</span> <span class="kw">do</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   ps      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> sortFilter <span class="fu">=</span>≪ loadAll (pattern <span class="fu">.&amp;&amp;.</span> hasNoVersion)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   itemTpl </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">←</span> loadBody <span class="st">&quot;templates/post-item.html&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   applyTemplateList itemTpl (itemCtx tags) ps</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> removeIndexHtml</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The <code>sortFilter</code> parameter to this function allows us to order the <code>Item</code>s based on their <code>Context</code>. As you can see in the call to <code>postList</code> in <code>indexCompiler</code> above, we pass in <code>recentFirst</code> to sort the posts by date.</p>
<h2 id="dealing-with-tags">Dealing with tags</h2>
<p>Extending our system to deal with tags is easy – we just write another set of <code>Rules</code> similar to <code>index</code> which generates a page for each tag.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagIndex ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagIndex tags <span class="fu">=</span> tagsRules tags <span class="fu">$</span> \_ pattern <span class="ot">→</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route <span class="fu">$</span> gsubRoute <span class="st">&quot;.html&quot;</span> (const <span class="st">&quot;/index.html&quot;</span>)</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> indexCompiler tags pattern defaultContext</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>The default <code>tagsRules</code> provided by Hakyll put the tags in a file called <code>tagname.html</code>, so we use <code>gsubRoute</code> here to rename that to <code>tagname/index.html</code> and get a prettier URL.</p>
<p>As an added bonus and to give us a way to browse all tags in the site, let’s generate a <a href="/tags">tag cloud</a>. This is a bit of an easter egg as I haven’t linked to it anywhere on the site except in this post, but you can always access it by going to <a href="http://dpwright.com/tags" class="uri">http://dpwright.com/tags</a>.</p>
<p>First we define our context.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagCloudContext ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Context</span> <span class="dt">String</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagCloudContext tags </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> cloud</code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ bodyField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;body&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ urlField      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;url&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ pathField     </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="st">&quot;path&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>                      </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">⊕ missingField  </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">where</span></code></pre></div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col width="0%" />
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     cloud   </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> tagCloudField <span class="st">&quot;tagCloud&quot;</span> <span class="dv">100</span> <span class="dv">500</span> <span class="fu">$</span> shuffle tags</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     shuffle </code></pre></div></td>
<td align="left"><div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">=</span> sortTagsBy ∘ comparing <span class="fu">$</span> hash ∘ fst</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Most of the legwork here is done by <code>tagCloudField</code>, which is provided by Hakyll. As mentioned earlier, we sort the tags by the hash of their name, which gives us a random-looking, but in fact predictable, order for the tags. It is important that this ordering is deterministic and not random, otherwise I’d have to regenerate the tags page even when no changes had been made to the site!</p>
<p>Finally we describe the <code>Rules</code> for the <code>tagCloud</code> itself. I’ve written the <code>Compiler</code> inline here as we don’t need to make use of it elsewhere and that keeps things simple.</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt; tagCloud ::</span> <span class="dt">Tags</span> <span class="ot">→</span> <span class="dt">Rules</span> ()</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> tagCloud tags <span class="fu">=</span> create [<span class="st">&quot;tags/index.html&quot;</span>] <span class="fu">$</span> <span class="kw">do</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   <span class="kw">let</span> tagsCtx <span class="fu">=</span> tagCloudContext tags</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   route idRoute</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>   compile <span class="fu">$</span> makeItem <span class="st">&quot;&quot;</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/tags.html&quot;</span>    tagsCtx</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> tagsCtx</code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> relativizeUrls</code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span>     ≫<span class="fu">=</span> withItemBody removeIndexHtml</code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>And that’s it! The site is now fully indexed, with a single main index on the front page an an index per-tag as well.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/hakyll/index.html">hakyll</a>, <a href="/tags/literate-programs/index.html">literate-programs</a>, <a href="/tags/generating%20this%20website/index.html">generating this website</a></div>
]]></summary>
</entry>
<entry>
    <title>Updating git branches you're not on</title>
    <link href="http://dpwright.com/posts/2015/01/27/updating-git-branches-youre-not-on.html" />
    <id>http://dpwright.com/posts/2015/01/27/updating-git-branches-youre-not-on.html</id>
    <published>2015-01-27T18:12:23Z</published>
    <updated>2015-01-27T18:12:23Z</updated>
    <summary type="html"><![CDATA[<div class="info">27 January, 2015</div>



<p>Do you use <code>git</code>?</p>
<p>Have you ever been on a feature branch and wanted to pull all the upstream changes into your <code>master</code> branch before rebasing onto that? Of course you have.</p>
<p>If you’re sick of doing this:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git checkout master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git pull</code></pre></td>
</tr>
<tr class="odd">
<td align="left"><pre><code>$ git checkout feature-branch</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Add the following lines to your <code>.gitconfig</code>:</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="kw">[alias]</span></code></pre></div></td>
</tr>
<tr class="even">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    remote-for-branch </span><span class="ot">=</span><span class="st"> &quot;!f() { git for-each-ref --format=&#39;%(upstream:short)&#39; `for b in $@</span><span class="co">; do echo refs/heads/$b; done` | sed &#39;s:/.*$::&#39;; }; f&quot;</span></code></pre></div></td>
</tr>
<tr class="odd">
<td align="left"><div class="sourceCode"><pre class="sourceCode ini"><code class="sourceCode ini"><span class="dt">    sync </span><span class="ot">=</span><span class="st"> &quot;!f() { for b in $@</span><span class="co">; do git fetch `git remote-for-branch $b` $b:$b; done }; f&quot;</span></code></pre></div></td>
</tr>
</tbody>
</table>
</div>
<p>Now you can do this!</p>
<div class="elastic-tabstops">
<table>
<colgroup>
<col width="100%" />
</colgroup>
<tbody>
<tr class="odd">
<td align="left"><pre><code>$ git sync master</code></pre></td>
</tr>
<tr class="even">
<td align="left"><pre><code>$ git rebase master</code></pre></td>
</tr>
</tbody>
</table>
</div>
<p>Thanks to <a href="http://stackoverflow.com/a/9753364/1004609">this Stack Overflow answer</a> for the technique, which I just wrapped up in an alias to make it easier to use.</p>

<div class="tagsinfo">Tagged with: <a href="/tags/git/index.html">git</a>, <a href="/tags/alias/index.html">alias</a></div>
]]></summary>
</entry>

</feed>
